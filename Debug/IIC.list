
IIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006970  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006a30  08006a30  00007a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c24  08006c24  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006c24  08006c24  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c24  08006c24  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c24  08006c24  00007c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c28  08006c28  00007c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006c2c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000068  08006c94  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08006c94  00008590  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001299b  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb1  00000000  00000000  0001aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d73  00000000  00000000  0001eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae9e  00000000  00000000  0001f88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a55  00000000  00000000  0003a729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c69  00000000  00000000  0005217e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6de7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000e6e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000eb2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a18 	.word	0x08006a18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006a18 	.word	0x08006a18

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <MX_DMA_Init+0x38>)
 800023c:	695a      	ldr	r2, [r3, #20]
 800023e:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <MX_DMA_Init+0x38>)
 8000240:	2101      	movs	r1, #1
 8000242:	430a      	orrs	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <MX_DMA_Init+0x38>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	2201      	movs	r2, #1
 800024c:	4013      	ands	r3, r2
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2101      	movs	r1, #1
 8000256:	200a      	movs	r0, #10
 8000258:	f000 ff86 	bl	8001168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800025c:	200a      	movs	r0, #10
 800025e:	f000 ff98 	bl	8001192 <HAL_NVIC_EnableIRQ>

}
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	40021000 	.word	0x40021000

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000276:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <MX_GPIO_Init+0x64>)
 8000278:	695a      	ldr	r2, [r3, #20]
 800027a:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <MX_GPIO_Init+0x64>)
 800027c:	2180      	movs	r1, #128	@ 0x80
 800027e:	03c9      	lsls	r1, r1, #15
 8000280:	430a      	orrs	r2, r1
 8000282:	615a      	str	r2, [r3, #20]
 8000284:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <MX_GPIO_Init+0x64>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	03db      	lsls	r3, r3, #15
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b10      	ldr	r3, [pc, #64]	@ (80002d4 <MX_GPIO_Init+0x64>)
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <MX_GPIO_Init+0x64>)
 8000298:	2180      	movs	r1, #128	@ 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <MX_GPIO_Init+0x64>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	029b      	lsls	r3, r3, #10
 80002a8:	4013      	ands	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <MX_GPIO_Init+0x64>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <MX_GPIO_Init+0x64>)
 80002b4:	2180      	movs	r1, #128	@ 0x80
 80002b6:	02c9      	lsls	r1, r1, #11
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <MX_GPIO_Init+0x64>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	@ 0x80
 80002c2:	02db      	lsls	r3, r3, #11
 80002c4:	4013      	ands	r3, r2
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b004      	add	sp, #16
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	40021000 	.word	0x40021000

080002d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_I2C1_Init+0x74>)
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fae1 	bl	80018dc <HAL_I2C_Init>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 fa73 	bl	8000808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <MX_I2C1_Init+0x74>)
 8000324:	2100      	movs	r1, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f003 f81a 	bl	8003360 <HAL_I2CEx_ConfigAnalogFilter>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 fa6a 	bl	8000808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	4b05      	ldr	r3, [pc, #20]	@ (800034c <MX_I2C1_Init+0x74>)
 8000336:	2100      	movs	r1, #0
 8000338:	0018      	movs	r0, r3
 800033a:	f003 f85d 	bl	80033f8 <HAL_I2CEx_ConfigDigitalFilter>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 fa61 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000084 	.word	0x20000084
 8000350:	40005400 	.word	0x40005400
 8000354:	2000090e 	.word	0x2000090e

08000358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b08b      	sub	sp, #44	@ 0x2c
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	2414      	movs	r4, #20
 8000362:	193b      	adds	r3, r7, r4
 8000364:	0018      	movs	r0, r3
 8000366:	2314      	movs	r3, #20
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f005 fdb2 	bl	8005ed4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a21      	ldr	r2, [pc, #132]	@ (80003fc <HAL_I2C_MspInit+0xa4>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d13b      	bne.n	80003f2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <HAL_I2C_MspInit+0xa8>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <HAL_I2C_MspInit+0xa8>)
 8000380:	2180      	movs	r1, #128	@ 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <HAL_I2C_MspInit+0xa8>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	@ 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	613b      	str	r3, [r7, #16]
 8000394:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000396:	193b      	adds	r3, r7, r4
 8000398:	22c0      	movs	r2, #192	@ 0xc0
 800039a:	00d2      	lsls	r2, r2, #3
 800039c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800039e:	0021      	movs	r1, r4
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2212      	movs	r2, #18
 80003a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2201      	movs	r2, #1
 80003aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2203      	movs	r2, #3
 80003b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2204      	movs	r2, #4
 80003b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b8:	187a      	adds	r2, r7, r1
 80003ba:	2390      	movs	r3, #144	@ 0x90
 80003bc:	05db      	lsls	r3, r3, #23
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 f923 	bl	800160c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <HAL_I2C_MspInit+0xa8>)
 80003c8:	69da      	ldr	r2, [r3, #28]
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <HAL_I2C_MspInit+0xa8>)
 80003cc:	2180      	movs	r1, #128	@ 0x80
 80003ce:	0389      	lsls	r1, r1, #14
 80003d0:	430a      	orrs	r2, r1
 80003d2:	61da      	str	r2, [r3, #28]
 80003d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <HAL_I2C_MspInit+0xa8>)
 80003d6:	69da      	ldr	r2, [r3, #28]
 80003d8:	2380      	movs	r3, #128	@ 0x80
 80003da:	039b      	lsls	r3, r3, #14
 80003dc:	4013      	ands	r3, r2
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	2017      	movs	r0, #23
 80003e8:	f000 febe 	bl	8001168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80003ec:	2017      	movs	r0, #23
 80003ee:	f000 fed0 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003f2:	46c0      	nop			@ (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b00b      	add	sp, #44	@ 0x2c
 80003f8:	bd90      	pop	{r4, r7, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	40005400 	.word	0x40005400
 8000400:	40021000 	.word	0x40021000

08000404 <__io_putchar>:
	USART1->TDR = (uint8_t)ch;
	return ch;
}
*/
PUTCHAR_PROTOTYPE
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <__io_putchar+0x20>)
 800040e:	1d39      	adds	r1, r7, #4
 8000410:	4805      	ldr	r0, [pc, #20]	@ (8000428 <__io_putchar+0x24>)
 8000412:	2201      	movs	r2, #1
 8000414:	f004 f8e0 	bl	80045d8 <HAL_UART_Transmit>

  return ch;
 8000418:	687b      	ldr	r3, [r7, #4]
}
 800041a:	0018      	movs	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	0000ffff 	.word	0x0000ffff
 8000428:	20000330 	.word	0x20000330

0800042c <HAL_UART_RxCpltCallback>:
/*                                                                             */
/* 閸戣姤鏆熸潻鏂挎礀閸婄》绱伴敓锟�???????????                                                               閿燂拷???????????*/
/*******************************************************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)        //娑撴彃褰涙稉顓熸焽閸ョ偠鐨熼崙鑺ユ殶
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]

	UNUSED(huart);
	if(huart->Instance == USART1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a3b      	ldr	r2, [pc, #236]	@ (8000528 <HAL_UART_RxCpltCallback+0xfc>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d16f      	bne.n	800051e <HAL_UART_RxCpltCallback+0xf2>
	{
		//rx_flg = 1;

#ifdef DOUBLE_END_MARK  //閸欏苯浠犲顫秴
		printf("something is done\n");
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <HAL_UART_RxCpltCallback+0x100>)
 8000440:	0018      	movs	r0, r3
 8000442:	f005 fc51 	bl	8005ce8 <puts>

		//printf("register data:0x%x\n", USART1->RDR );
		//USART_RX_BUF[USART_RX_STA ++ ] = RX_Buff[n++];
		USART_RX_BUF[USART_RX_STA ++ ] = RX_Buff[n++];
 8000446:	4b3a      	ldr	r3, [pc, #232]	@ (8000530 <HAL_UART_RxCpltCallback+0x104>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	b2d1      	uxtb	r1, r2
 800044e:	4a38      	ldr	r2, [pc, #224]	@ (8000530 <HAL_UART_RxCpltCallback+0x104>)
 8000450:	7011      	strb	r1, [r2, #0]
 8000452:	0019      	movs	r1, r3
 8000454:	4b37      	ldr	r3, [pc, #220]	@ (8000534 <HAL_UART_RxCpltCallback+0x108>)
 8000456:	2200      	movs	r2, #0
 8000458:	569a      	ldrsb	r2, [r3, r2]
 800045a:	b2d3      	uxtb	r3, r2
 800045c:	3301      	adds	r3, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	b258      	sxtb	r0, r3
 8000462:	4b34      	ldr	r3, [pc, #208]	@ (8000534 <HAL_UART_RxCpltCallback+0x108>)
 8000464:	7018      	strb	r0, [r3, #0]
 8000466:	4b34      	ldr	r3, [pc, #208]	@ (8000538 <HAL_UART_RxCpltCallback+0x10c>)
 8000468:	5c59      	ldrb	r1, [r3, r1]
 800046a:	4b34      	ldr	r3, [pc, #208]	@ (800053c <HAL_UART_RxCpltCallback+0x110>)
 800046c:	5499      	strb	r1, [r3, r2]

		printf("data now:0x%x,next:0x%x\n",RX_Buff[1], RX_Buff[0]);
 800046e:	4b32      	ldr	r3, [pc, #200]	@ (8000538 <HAL_UART_RxCpltCallback+0x10c>)
 8000470:	785b      	ldrb	r3, [r3, #1]
 8000472:	0019      	movs	r1, r3
 8000474:	4b30      	ldr	r3, [pc, #192]	@ (8000538 <HAL_UART_RxCpltCallback+0x10c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	001a      	movs	r2, r3
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <HAL_UART_RxCpltCallback+0x114>)
 800047c:	0018      	movs	r0, r3
 800047e:	f005 fbcd 	bl	8005c1c <iprintf>
		//		}
		//printf("data now:0x%x\n",USART_RX_BUF[USART_RX_STA - 1]);
		//printf("USART_RX_BUF[USART_RX_STA-1] data:0x%x,usart_rx_sta:%d\n", USART_RX_BUF[USART_RX_STA-1],USART_RX_STA-1);
		//printf("first..%d\n",*((uint8_t*)huart->pRxBuffPtr - 1));
		//__HAL_UART_CLEAR_OREFLAG(huart);
        if(USART_RX_BUF[USART_RX_STA-1] == USART_END_MARK2)
 8000482:	4b2c      	ldr	r3, [pc, #176]	@ (8000534 <HAL_UART_RxCpltCallback+0x108>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b25b      	sxtb	r3, r3
 8000488:	3b01      	subs	r3, #1
 800048a:	4a2c      	ldr	r2, [pc, #176]	@ (800053c <HAL_UART_RxCpltCallback+0x110>)
 800048c:	5cd3      	ldrb	r3, [r2, r3]
 800048e:	2b0a      	cmp	r3, #10
 8000490:	d138      	bne.n	8000504 <HAL_UART_RxCpltCallback+0xd8>
        {
                if(USART_RX_BUF[USART_RX_STA-2] == USART_END_MARK1)
 8000492:	4b28      	ldr	r3, [pc, #160]	@ (8000534 <HAL_UART_RxCpltCallback+0x108>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b25b      	sxtb	r3, r3
 8000498:	3b02      	subs	r3, #2
 800049a:	4a28      	ldr	r2, [pc, #160]	@ (800053c <HAL_UART_RxCpltCallback+0x110>)
 800049c:	5cd3      	ldrb	r3, [r2, r3]
 800049e:	2b0d      	cmp	r3, #13
 80004a0:	d13d      	bne.n	800051e <HAL_UART_RxCpltCallback+0xf2>
                {
                		printf("end sending %d data is sended\n", USART_RX_STA);
 80004a2:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <HAL_UART_RxCpltCallback+0x108>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	001a      	movs	r2, r3
 80004aa:	4b26      	ldr	r3, [pc, #152]	@ (8000544 <HAL_UART_RxCpltCallback+0x118>)
 80004ac:	0011      	movs	r1, r2
 80004ae:	0018      	movs	r0, r3
 80004b0:	f005 fbb4 	bl	8005c1c <iprintf>

        		        for(uint8_t i = 0; i < USART_RX_STA; i++)
 80004b4:	230f      	movs	r3, #15
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	e010      	b.n	80004e0 <HAL_UART_RxCpltCallback+0xb4>
        		        {
        		        	printf("UART DataBuff[%d] = 0x%x\r\n",i, USART_RX_BUF[i]);
 80004be:	240f      	movs	r4, #15
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	7819      	ldrb	r1, [r3, #0]
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4a1c      	ldr	r2, [pc, #112]	@ (800053c <HAL_UART_RxCpltCallback+0x110>)
 80004ca:	5cd3      	ldrb	r3, [r2, r3]
 80004cc:	001a      	movs	r2, r3
 80004ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000548 <HAL_UART_RxCpltCallback+0x11c>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f005 fba3 	bl	8005c1c <iprintf>
        		        for(uint8_t i = 0; i < USART_RX_STA; i++)
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	3201      	adds	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4a13      	ldr	r2, [pc, #76]	@ (8000534 <HAL_UART_RxCpltCallback+0x108>)
 80004e8:	7812      	ldrb	r2, [r2, #0]
 80004ea:	b252      	sxtb	r2, r2
 80004ec:	4293      	cmp	r3, r2
 80004ee:	dbe6      	blt.n	80004be <HAL_UART_RxCpltCallback+0x92>
        		        }
                        memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <HAL_UART_RxCpltCallback+0x110>)
 80004f2:	22ff      	movs	r2, #255	@ 0xff
 80004f4:	2100      	movs	r1, #0
 80004f6:	0018      	movs	r0, r3
 80004f8:	f005 fcec 	bl	8005ed4 <memset>
                        //USART_RX_BUF[USART_RX_STA-1] = 0x00;
                        USART_RX_STA = 0;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <HAL_UART_RxCpltCallback+0x108>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
                return;
        }
#endif

	}
}
 8000502:	e00c      	b.n	800051e <HAL_UART_RxCpltCallback+0xf2>
        HAL_UART_Receive_DMA(&huart1, USART_RX_BUF, sizeof(USART_RX_BUF));
 8000504:	490d      	ldr	r1, [pc, #52]	@ (800053c <HAL_UART_RxCpltCallback+0x110>)
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <HAL_UART_RxCpltCallback+0x120>)
 8000508:	22ff      	movs	r2, #255	@ 0xff
 800050a:	0018      	movs	r0, r3
 800050c:	f004 f903 	bl	8004716 <HAL_UART_Receive_DMA>
         RX_Buff[0] = 0;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <HAL_UART_RxCpltCallback+0x10c>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
        printf("second receive\n");
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <HAL_UART_RxCpltCallback+0x124>)
 8000518:	0018      	movs	r0, r3
 800051a:	f005 fbe5 	bl	8005ce8 <puts>
}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b005      	add	sp, #20
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	40013800 	.word	0x40013800
 800052c:	08006a30 	.word	0x08006a30
 8000530:	200002dc 	.word	0x200002dc
 8000534:	200002db 	.word	0x200002db
 8000538:	200001d8 	.word	0x200001d8
 800053c:	200001dc 	.word	0x200001dc
 8000540:	08006a44 	.word	0x08006a44
 8000544:	08006a60 	.word	0x08006a60
 8000548:	08006a80 	.word	0x08006a80
 800054c:	20000330 	.word	0x20000330
 8000550:	08006a9c 	.word	0x08006a9c

08000554 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	000a      	movs	r2, r1
 800055e:	1cbb      	adds	r3, r7, #2
 8000560:	801a      	strh	r2, [r3, #0]
	if(huart == &huart1)
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <HAL_UARTEx_RxEventCallback+0x34>)
 8000566:	429a      	cmp	r2, r3
 8000568:	d10a      	bne.n	8000580 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		rx_flg = 1;
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <HAL_UARTEx_RxEventCallback+0x38>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]

		//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, USART_RX_BUF, sizeof(USART_RX_BUF));
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);//浼犺緭杩囧崐涓柇绂佺敤
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2104      	movs	r1, #4
 800057c:	438a      	bics	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
	}
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000330 	.word	0x20000330
 800058c:	200002dd 	.word	0x200002dd
 8000590:	200003b8 	.word	0x200003b8

08000594 <Write_EEPROM>:

void Write_EEPROM(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	if(EP24C_IsDeviceReady()==HAL_OK)
 800059a:	f000 fc3d 	bl	8000e18 <EP24C_IsDeviceReady>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d15e      	bne.n	8000660 <Write_EEPROM+0xcc>
         printf("0x%02X ", I2C_BUFFER_WRITE[i]);
         if (i%16 == 15)
             printf("\n\r");
     }
     */
	printf("%d was received\n", WRITE_DATA_COUNT);
 80005a2:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <Write_EEPROM+0xd4>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	001a      	movs	r2, r3
 80005a8:	4b30      	ldr	r3, [pc, #192]	@ (800066c <Write_EEPROM+0xd8>)
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f005 fb35 	bl	8005c1c <iprintf>
//鐏忓捄2c_Buf_Write娑擃參銆庢惔蹇ユ嫹?閿熻棄顤冮惃鍕殶閹诡喖鍟撻崗顧婨RPOM閿燂拷????????????
EP24C_WriteLongData(0, USART_RX_BUF, WRITE_DATA_COUNT);
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <Write_EEPROM+0xd4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	001a      	movs	r2, r3
 80005b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <Write_EEPROM+0xdc>)
 80005ba:	0019      	movs	r1, r3
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fc65 	bl	8000e8c <EP24C_WriteLongData>
HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	@ 0x64
 80005c4:	f000 fd24 	bl	8001010 <HAL_Delay>
printf("I2C writes rom end\n");
 80005c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000674 <Write_EEPROM+0xe0>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f005 fb8c 	bl	8005ce8 <puts>
EP24C_ReadBytes(0, I2C_BUFFER_READ, WRITE_DATA_COUNT);
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <Write_EEPROM+0xd4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	001a      	movs	r2, r3
 80005d6:	4b28      	ldr	r3, [pc, #160]	@ (8000678 <Write_EEPROM+0xe4>)
 80005d8:	0019      	movs	r1, r3
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fc2e 	bl	8000e3c <EP24C_ReadBytes>

for (uint8_t i=0; i<WRITE_DATA_COUNT; i++) {
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e031      	b.n	800064c <Write_EEPROM+0xb8>
         if (I2C_BUFFER_READ[i] != USART_RX_BUF[i])
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4a22      	ldr	r2, [pc, #136]	@ (8000678 <Write_EEPROM+0xe4>)
 80005ee:	5cd2      	ldrb	r2, [r2, r3]
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	491e      	ldr	r1, [pc, #120]	@ (8000670 <Write_EEPROM+0xdc>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d00d      	beq.n	8000618 <Write_EEPROM+0x84>
         {
             printf("The data write to the rom:(0x%02X)\n ", USART_RX_BUF[i]);
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <Write_EEPROM+0xdc>)
 8000602:	5cd3      	ldrb	r3, [r2, r3]
 8000604:	001a      	movs	r2, r3
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <Write_EEPROM+0xe8>)
 8000608:	0011      	movs	r1, r2
 800060a:	0018      	movs	r0, r3
 800060c:	f005 fb06 	bl	8005c1c <iprintf>
             printf("Error:I2C EEPROM reading is not the same as writing\n");
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <Write_EEPROM+0xec>)
 8000612:	0018      	movs	r0, r3
 8000614:	f005 fb68 	bl	8005ce8 <puts>
             //return 0;
         }

         printf("the data read from the rom:0x%02X\n ", I2C_BUFFER_READ[i]);
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <Write_EEPROM+0xe4>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	001a      	movs	r2, r3
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <Write_EEPROM+0xf0>)
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f005 faf8 	bl	8005c1c <iprintf>
         if (i%16 == 15)
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	220f      	movs	r2, #15
 8000632:	4013      	ands	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b0f      	cmp	r3, #15
 8000638:	d103      	bne.n	8000642 <Write_EEPROM+0xae>
             printf("\n\r");
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <Write_EEPROM+0xf4>)
 800063c:	0018      	movs	r0, r3
 800063e:	f005 faed 	bl	8005c1c <iprintf>
for (uint8_t i=0; i<WRITE_DATA_COUNT; i++) {
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	3201      	adds	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <Write_EEPROM+0xd4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	1dfa      	adds	r2, r7, #7
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3c7      	bcc.n	80005e8 <Write_EEPROM+0x54>
     }
     printf("\n\r I2C(AT24C02) writing ending\n");
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <Write_EEPROM+0xf8>)
 800065a:	0018      	movs	r0, r3
 800065c:	f005 fb44 	bl	8005ce8 <puts>
     //HAL_UART_Transmit_DMA(&huart1, I2C_BUFFER_READ, WRITE_DATA_COUNT);
}
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000328 	.word	0x20000328
 800066c:	08006aac 	.word	0x08006aac
 8000670:	200001dc 	.word	0x200001dc
 8000674:	08006ac0 	.word	0x08006ac0
 8000678:	200000d8 	.word	0x200000d8
 800067c:	08006ad4 	.word	0x08006ad4
 8000680:	08006afc 	.word	0x08006afc
 8000684:	08006b30 	.word	0x08006b30
 8000688:	08006b54 	.word	0x08006b54
 800068c:	08006b58 	.word	0x08006b58

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fc8c 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f84a 	bl	8000730 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	@ 0x64
 800069e:	f000 fcb7 	bl	8001010 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f7ff fde5 	bl	8000270 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a6:	f7ff fdc5 	bl	8000234 <MX_DMA_Init>
  MX_I2C1_Init();
 80006aa:	f7ff fe15 	bl	80002d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 fa97 	bl	8000be0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart1, "This is string\n", strlen("This is string\n"), UART_TIMEOUT);
  printf("this is printf test\n");
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <main+0x8c>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f005 fb17 	bl	8005ce8 <puts>
  //HAL_Delay(100);
  //HAL_UART_Receive_IT(&huart1, RX_Buff, sizeof(RX_Buff));
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <main+0x90>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <main+0x90>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2110      	movs	r1, #16
 80006c6:	430a      	orrs	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, USART_RX_BUF, sizeof(USART_RX_BUF));
 80006ca:	4916      	ldr	r1, [pc, #88]	@ (8000724 <main+0x94>)
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <main+0x90>)
 80006ce:	22ff      	movs	r2, #255	@ 0xff
 80006d0:	0018      	movs	r0, r3
 80006d2:	f004 f820 	bl	8004716 <HAL_UART_Receive_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, USART_RX_BUF, sizeof(USART_RX_BUF));
 80006d6:	4913      	ldr	r1, [pc, #76]	@ (8000724 <main+0x94>)
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <main+0x90>)
 80006da:	22ff      	movs	r2, #255	@ 0xff
 80006dc:	0018      	movs	r0, r3
 80006de:	f005 f970 	bl	80059c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <main+0x98>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <main+0x98>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2104      	movs	r1, #4
 80006ee:	438a      	bics	r2, r1
 80006f0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(rx_flg > 0)
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <main+0x9c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0fb      	beq.n	80006f2 <main+0x62>
	  {
		  rx_flg = 0;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <main+0x9c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit_DMA(&huart1, USART_RX_BUF, huart1.RxXferCount);
		  //HAL_I2C_Master_Transmit_DMA(&hi2c1, DEV_ADDR_24CXX, USART_RX_BUF, huart1.RxXferCount);
		  Write_EEPROM();
 8000700:	f7ff ff48 	bl	8000594 <Write_EEPROM>

		  huart1.RxXferCount = 0;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <main+0x90>)
 8000706:	225a      	movs	r2, #90	@ 0x5a
 8000708:	2100      	movs	r1, #0
 800070a:	5299      	strh	r1, [r3, r2]
		  HAL_UART_Receive_DMA(&huart1, USART_RX_BUF, sizeof(USART_RX_BUF));
 800070c:	4905      	ldr	r1, [pc, #20]	@ (8000724 <main+0x94>)
 800070e:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <main+0x90>)
 8000710:	22ff      	movs	r2, #255	@ 0xff
 8000712:	0018      	movs	r0, r3
 8000714:	f003 ffff 	bl	8004716 <HAL_UART_Receive_DMA>
	  if(rx_flg > 0)
 8000718:	e7eb      	b.n	80006f2 <main+0x62>
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	08006b78 	.word	0x08006b78
 8000720:	20000330 	.word	0x20000330
 8000724:	200001dc 	.word	0x200001dc
 8000728:	200003b8 	.word	0x200003b8
 800072c:	200002dd 	.word	0x200002dd

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b099      	sub	sp, #100	@ 0x64
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	242c      	movs	r4, #44	@ 0x2c
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2334      	movs	r3, #52	@ 0x34
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f005 fbc7 	bl	8005ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000746:	231c      	movs	r3, #28
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2310      	movs	r3, #16
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f005 fbbf 	bl	8005ed4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	2318      	movs	r3, #24
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f005 fbb8 	bl	8005ed4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	0021      	movs	r1, r4
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2202      	movs	r2, #2
 800076a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2201      	movs	r2, #1
 8000770:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2210      	movs	r2, #16
 8000776:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	187b      	adds	r3, r7, r1
 8000780:	0018      	movs	r0, r3
 8000782:	f002 fe85 	bl	8003490 <HAL_RCC_OscConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800078a:	f000 f83d 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	211c      	movs	r1, #28
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2207      	movs	r2, #7
 8000794:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f003 f9f5 	bl	8003b9c <HAL_RCC_ClockConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007b6:	f000 f827 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2221      	movs	r2, #33	@ 0x21
 80007be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	0018      	movs	r0, r3
 80007d0:	f003 fb7a 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007d8:	f000 f816 	bl	8000808 <Error_Handler>
  }
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b019      	add	sp, #100	@ 0x64
 80007e2:	bd90      	pop	{r4, r7, pc}

080007e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f6:	f000 fbef 	bl	8000fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	40012c00 	.word	0x40012c00

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_MspInit+0x44>)
 800081c:	699a      	ldr	r2, [r3, #24]
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_MspInit+0x44>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	619a      	str	r2, [r3, #24]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_MspInit+0x44>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x44>)
 8000834:	69da      	ldr	r2, [r3, #28]
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_MspInit+0x44>)
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	0549      	lsls	r1, r1, #21
 800083c:	430a      	orrs	r2, r1
 800083e:	61da      	str	r2, [r3, #28]
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <HAL_MspInit+0x44>)
 8000842:	69da      	ldr	r2, [r3, #28]
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	055b      	lsls	r3, r3, #21
 8000848:	4013      	ands	r3, r2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800086c:	4b38      	ldr	r3, [pc, #224]	@ (8000950 <HAL_InitTick+0xf4>)
 800086e:	699a      	ldr	r2, [r3, #24]
 8000870:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <HAL_InitTick+0xf4>)
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	0109      	lsls	r1, r1, #4
 8000876:	430a      	orrs	r2, r1
 8000878:	619a      	str	r2, [r3, #24]
 800087a:	4b35      	ldr	r3, [pc, #212]	@ (8000950 <HAL_InitTick+0xf4>)
 800087c:	699a      	ldr	r2, [r3, #24]
 800087e:	2380      	movs	r3, #128	@ 0x80
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	4013      	ands	r3, r2
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000888:	230c      	movs	r3, #12
 800088a:	18fa      	adds	r2, r7, r3
 800088c:	2410      	movs	r4, #16
 800088e:	193b      	adds	r3, r7, r4
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f003 faee 	bl	8003e74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008a4:	f003 fad0 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 80008a8:	0003      	movs	r3, r0
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008ac:	e004      	b.n	80008b8 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008ae:	f003 facb 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 80008b2:	0003      	movs	r3, r0
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ba:	4926      	ldr	r1, [pc, #152]	@ (8000954 <HAL_InitTick+0xf8>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fc2d 	bl	800011c <__udivsi3>
 80008c2:	0003      	movs	r3, r0
 80008c4:	3b01      	subs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c8:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <HAL_InitTick+0xfc>)
 80008ca:	4a24      	ldr	r2, [pc, #144]	@ (800095c <HAL_InitTick+0x100>)
 80008cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ce:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <HAL_InitTick+0xfc>)
 80008d0:	4a23      	ldr	r2, [pc, #140]	@ (8000960 <HAL_InitTick+0x104>)
 80008d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008d4:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <HAL_InitTick+0xfc>)
 80008d6:	6a3a      	ldr	r2, [r7, #32]
 80008d8:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80008da:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <HAL_InitTick+0xfc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <HAL_InitTick+0xfc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <HAL_InitTick+0xfc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008ec:	252b      	movs	r5, #43	@ 0x2b
 80008ee:	197c      	adds	r4, r7, r5
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <HAL_InitTick+0xfc>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f003 fbd6 	bl	80040a4 <HAL_TIM_Base_Init>
 80008f8:	0003      	movs	r3, r0
 80008fa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11e      	bne.n	8000942 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000904:	197c      	adds	r4, r7, r5
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <HAL_InitTick+0xfc>)
 8000908:	0018      	movs	r0, r3
 800090a:	f003 fc23 	bl	8004154 <HAL_TIM_Base_Start_IT>
 800090e:	0003      	movs	r3, r0
 8000910:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000912:	197b      	adds	r3, r7, r5
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d113      	bne.n	8000942 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800091a:	200d      	movs	r0, #13
 800091c:	f000 fc39 	bl	8001192 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d809      	bhi.n	800093a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	0019      	movs	r1, r3
 800092c:	200d      	movs	r0, #13
 800092e:	f000 fc1b 	bl	8001168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_InitTick+0x108>)
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e003      	b.n	8000942 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800093a:	232b      	movs	r3, #43	@ 0x2b
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000942:	232b      	movs	r3, #43	@ 0x2b
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	781b      	ldrb	r3, [r3, #0]
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b00c      	add	sp, #48	@ 0x30
 800094e:	bdb0      	pop	{r4, r5, r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	000f4240 	.word	0x000f4240
 8000958:	200002e0 	.word	0x200002e0
 800095c:	40012c00 	.word	0x40012c00
 8000960:	000003e7 	.word	0x000003e7
 8000964:	20000004 	.word	0x20000004

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fd33 	bl	800140a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fd2f 	bl	800140a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	200003fc 	.word	0x200003fc
 80009b8:	200003b8 	.word	0x200003b8

080009bc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c0:	4b03      	ldr	r3, [pc, #12]	@ (80009d0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f003 fc12 	bl	80041ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	200002e0 	.word	0x200002e0

080009d4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <I2C1_IRQHandler+0x2c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	23e0      	movs	r3, #224	@ 0xe0
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	4013      	ands	r3, r2
 80009e4:	d004      	beq.n	80009f0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <I2C1_IRQHandler+0x2c>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fb95 	bl	8002118 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80009ee:	e003      	b.n	80009f8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <I2C1_IRQHandler+0x2c>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fb76 	bl	80020e4 <HAL_I2C_EV_IRQHandler>
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000084 	.word	0x20000084

08000a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//int temp;
	int size;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f003 ff69 	bl	80048e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
if(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE)!= RESET)
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	2210      	movs	r2, #16
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b10      	cmp	r3, #16
 8000a1e:	d130      	bne.n	8000a82 <USART1_IRQHandler+0x7e>
{
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_IDLE|UART_FLAG_RXNE);
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2230      	movs	r2, #48	@ 0x30
 8000a26:	621a      	str	r2, [r3, #32]
	while(!(USART1->ISR &(1<<5)))
	{
		*pRxBuffPtr++ = data;
	}
	*/
	HAL_UART_DMAStop(&huart1);
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f003 feca 	bl	80047c4 <HAL_UART_DMAStop>
	printf("huart1.RxXferSize is %d\n",huart1.RxXferSize);
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a32:	2258      	movs	r2, #88	@ 0x58
 8000a34:	5a9b      	ldrh	r3, [r3, r2]
 8000a36:	001a      	movs	r2, r3
 8000a38:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <USART1_IRQHandler+0x8c>)
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f005 f8ed 	bl	8005c1c <iprintf>
	size = huart1.RxXferSize - __HAL_DMA_GET_COUNTER(huart1.hdmarx);//锟窖斤拷锟秸革拷锟斤拷 = 锟杰斤拷锟秸革拷锟斤拷 - 剩锟斤拷母锟斤拷锟�
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a44:	2258      	movs	r2, #88	@ 0x58
 8000a46:	5a9b      	ldrh	r3, [r3, r2]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]

	printf("%d,size number\n", size);
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <USART1_IRQHandler+0x90>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f005 f8dd 	bl	8005c1c <iprintf>
	huart1.RxXferCount = size;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	b299      	uxth	r1, r3
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a68:	225a      	movs	r2, #90	@ 0x5a
 8000a6a:	5299      	strh	r1, [r3, r2]
	WRITE_DATA_COUNT = size;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <USART1_IRQHandler+0x94>)
 8000a72:	701a      	strb	r2, [r3, #0]
	//HAL_UART_RxCpltCallback(&huart1);
	HAL_UARTEx_RxEventCallback(&huart1,size);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <USART1_IRQHandler+0x88>)
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fd69 	bl	8000554 <HAL_UARTEx_RxEventCallback>
	//temp = temp;
}
  /* USER CODE END USART1_IRQn 1 */
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	20000330 	.word	0x20000330
 8000a90:	08006b8c 	.word	0x08006b8c
 8000a94:	08006ba8 	.word	0x08006ba8
 8000a98:	20000328 	.word	0x20000328

08000a9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e00a      	b.n	8000ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aae:	e000      	b.n	8000ab2 <_read+0x16>
 8000ab0:	bf00      	nop
 8000ab2:	0001      	movs	r1, r0
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf0      	blt.n	8000aae <_read+0x12>
  }

  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b006      	add	sp, #24
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e009      	b.n	8000afc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fc87 	bl	8000404 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf1      	blt.n	8000ae8 <_write+0x12>
  }
  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	0018      	movs	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b006      	add	sp, #24
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:

int _close(int file)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	425b      	negs	r3, r3
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2280      	movs	r2, #128	@ 0x80
 8000b30:	0192      	lsls	r2, r2, #6
 8000b32:	605a      	str	r2, [r3, #4]
  return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	@ (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f005 f9f2 	bl	8005f80 <__errno>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	18d2      	adds	r2, r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <_sbrk+0x64>)
 8000bb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20001800 	.word	0x20001800
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	2000032c 	.word	0x2000032c
 8000bd0:	20000590 	.word	0x20000590

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	@ (8000c3c <MX_USART1_UART_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bec:	22e1      	movs	r2, #225	@ 0xe1
 8000bee:	0252      	lsls	r2, r2, #9
 8000bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f003 fc83 	bl	8004530 <HAL_UART_Init>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f7ff fdeb 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000330 	.word	0x20000330
 8000c3c:	40013800 	.word	0x40013800

08000c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08b      	sub	sp, #44	@ 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	2414      	movs	r4, #20
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	2314      	movs	r3, #20
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f005 f93e 	bl	8005ed4 <memset>
  if(uartHandle->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a46      	ldr	r2, [pc, #280]	@ (8000d78 <HAL_UART_MspInit+0x138>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d000      	beq.n	8000c64 <HAL_UART_MspInit+0x24>
 8000c62:	e085      	b.n	8000d70 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c64:	4b45      	ldr	r3, [pc, #276]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	4b44      	ldr	r3, [pc, #272]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000c6a:	2180      	movs	r1, #128	@ 0x80
 8000c6c:	01c9      	lsls	r1, r1, #7
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	619a      	str	r2, [r3, #24]
 8000c72:	4b42      	ldr	r3, [pc, #264]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000c74:	699a      	ldr	r2, [r3, #24]
 8000c76:	2380      	movs	r3, #128	@ 0x80
 8000c78:	01db      	lsls	r3, r3, #7
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b3e      	ldr	r3, [pc, #248]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000c82:	695a      	ldr	r2, [r3, #20]
 8000c84:	4b3d      	ldr	r3, [pc, #244]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000c86:	2180      	movs	r1, #128	@ 0x80
 8000c88:	02c9      	lsls	r1, r1, #11
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d7c <HAL_UART_MspInit+0x13c>)
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	2380      	movs	r3, #128	@ 0x80
 8000c94:	02db      	lsls	r3, r3, #11
 8000c96:	4013      	ands	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9c:	0021      	movs	r1, r4
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	22c0      	movs	r2, #192	@ 0xc0
 8000ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2212      	movs	r2, #18
 8000ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	4a30      	ldr	r2, [pc, #192]	@ (8000d80 <HAL_UART_MspInit+0x140>)
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	f000 fca2 	bl	800160c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000cca:	4a2f      	ldr	r2, [pc, #188]	@ (8000d88 <HAL_UART_MspInit+0x148>)
 8000ccc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b2a      	ldr	r3, [pc, #168]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce0:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce6:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cec:	4b25      	ldr	r3, [pc, #148]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cf8:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fa5a 	bl	80011b4 <HAL_DMA_Init>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000d04:	f7ff fd80 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000d0c:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <HAL_UART_MspInit+0x144>)
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d16:	4a1e      	ldr	r2, [pc, #120]	@ (8000d90 <HAL_UART_MspInit+0x150>)
 8000d18:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 fa34 	bl	80011b4 <HAL_DMA_Init>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8000d50:	f7ff fd5a 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d58:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_UART_MspInit+0x14c>)
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	201b      	movs	r0, #27
 8000d66:	f000 f9ff 	bl	8001168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6a:	201b      	movs	r0, #27
 8000d6c:	f000 fa11 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b00b      	add	sp, #44	@ 0x2c
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	40013800 	.word	0x40013800
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	200003b8 	.word	0x200003b8
 8000d88:	40020030 	.word	0x40020030
 8000d8c:	200003fc 	.word	0x200003fc
 8000d90:	4002001c 	.word	0x4002001c

08000d94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d94:	4813      	ldr	r0, [pc, #76]	@ (8000de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff ff1c 	bl	8000bd4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d9c:	4812      	ldr	r0, [pc, #72]	@ (8000de8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d9e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000da0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <LoopForever+0xa>)
    CMP R1, R2
 8000da4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000da6:	d105      	bne.n	8000db4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000da8:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000daa:	4912      	ldr	r1, [pc, #72]	@ (8000df4 <LoopForever+0x12>)
    STR R1, [R0]
 8000dac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000dae:	4812      	ldr	r0, [pc, #72]	@ (8000df8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000db0:	4912      	ldr	r1, [pc, #72]	@ (8000dfc <LoopForever+0x1a>)
    STR R1, [R0]
 8000db2:	6001      	str	r1, [r0, #0]

08000db4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	4812      	ldr	r0, [pc, #72]	@ (8000e00 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000db6:	4913      	ldr	r1, [pc, #76]	@ (8000e04 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000db8:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <LoopForever+0x26>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a10      	ldr	r2, [pc, #64]	@ (8000e0c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dcc:	4c10      	ldr	r4, [pc, #64]	@ (8000e10 <LoopForever+0x2e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dda:	f005 f8d7 	bl	8005f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff fc57 	bl	8000690 <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   r0, =_estack
 8000de4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000de8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000dec:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000df0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000df4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000df8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000dfc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e08:	08006c2c 	.word	0x08006c2c
  ldr r2, =_sbss
 8000e0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e10:	20000590 	.word	0x20000590

08000e14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_IRQHandler>
	...

08000e18 <EP24C_IsDeviceReady>:
#include  "24cxx.h"

#define EP24C_TIMEOUT    200
#define EP24C_MEMADD_SIZE    I2C_MEMADD_SIZE_8BIT

HAL_StatusTypeDef EP24C_IsDeviceReady(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	uint32_t Trials = 10;
 8000e1e:	230a      	movs	r3, #10
 8000e20:	607b      	str	r3, [r7, #4]
	return HAL_I2C_IsDeviceReady(&I2C_HANDLE, DEV_ADDR_24CXX, Trials, EP24C_TIMEOUT);
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	4804      	ldr	r0, [pc, #16]	@ (8000e38 <EP24C_IsDeviceReady+0x20>)
 8000e26:	23c8      	movs	r3, #200	@ 0xc8
 8000e28:	21a0      	movs	r1, #160	@ 0xa0
 8000e2a:	f001 f85f 	bl	8001eec <HAL_I2C_IsDeviceReady>
 8000e2e:	0003      	movs	r3, r0
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000084 	.word	0x20000084

08000e3c <EP24C_ReadBytes>:
}
HAL_StatusTypeDef EP24C_ReadOneByte(uint16_t memAddress, uint8_t *byteData){
	return HAL_I2C_Mem_Read(&I2C_HANDLE, DEV_ADDR_24CXX, memAddress,
			EP24C_MEMADD_SIZE, byteData, 1, EP24C_TIMEOUT);
}
HAL_StatusTypeDef EP24C_ReadBytes(uint16_t memAddress, uint8_t *pBuffer, uint16_t bufferLen){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af04      	add	r7, sp, #16
 8000e42:	6039      	str	r1, [r7, #0]
 8000e44:	0011      	movs	r1, r2
 8000e46:	1dbb      	adds	r3, r7, #6
 8000e48:	1c02      	adds	r2, r0, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	1c0a      	adds	r2, r1, #0
 8000e50:	801a      	strh	r2, [r3, #0]
	if(bufferLen > MEM_SIZE_24CXX){
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	881a      	ldrh	r2, [r3, #0]
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d901      	bls.n	8000e62 <EP24C_ReadBytes+0x26>
		return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <EP24C_ReadBytes+0x44>
	}
	return HAL_I2C_Mem_Read(&I2C_HANDLE, DEV_ADDR_24CXX, memAddress,
 8000e62:	1dbb      	adds	r3, r7, #6
 8000e64:	881a      	ldrh	r2, [r3, #0]
 8000e66:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <EP24C_ReadBytes+0x4c>)
 8000e68:	23c8      	movs	r3, #200	@ 0xc8
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	21a0      	movs	r1, #160	@ 0xa0
 8000e7a:	f000 ff03 	bl	8001c84 <HAL_I2C_Mem_Read>
 8000e7e:	0003      	movs	r3, r0
			EP24C_MEMADD_SIZE, pBuffer, bufferLen, EP24C_TIMEOUT);
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000084 	.word	0x20000084

08000e8c <EP24C_WriteLongData>:
		return HAL_ERROR;
	}
	return HAL_I2C_Mem_Write(&I2C_HANDLE, DEV_ADDR_24CXX, memAddress,
			EP24C_MEMADD_SIZE, pBuffer, bufferLen, EP24C_TIMEOUT);
}
HAL_StatusTypeDef EP24C_WriteLongData(uint16_t memAddress, uint8_t *pBuffer, uint16_t bufferLen){
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	6039      	str	r1, [r7, #0]
 8000e94:	0011      	movs	r1, r2
 8000e96:	1dbb      	adds	r3, r7, #6
 8000e98:	1c02      	adds	r2, r0, #0
 8000e9a:	801a      	strh	r2, [r3, #0]
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	1c0a      	adds	r2, r1, #0
 8000ea0:	801a      	strh	r2, [r3, #0]
	if(bufferLen > MEM_SIZE_24CXX){
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	881a      	ldrh	r2, [r3, #0]
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d901      	bls.n	8000eb2 <EP24C_WriteLongData+0x26>
			return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e077      	b.n	8000fa2 <EP24C_WriteLongData+0x116>
		}
	HAL_StatusTypeDef result = HAL_ERROR;
 8000eb2:	2317      	movs	r3, #23
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
	if(bufferLen <= PAGE_SIZE_24CXX){
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d80f      	bhi.n	8000ee2 <EP24C_WriteLongData+0x56>
		return HAL_I2C_Mem_Write(&I2C_HANDLE, DEV_ADDR_24CXX, memAddress,
 8000ec2:	1dbb      	adds	r3, r7, #6
 8000ec4:	881a      	ldrh	r2, [r3, #0]
 8000ec6:	4839      	ldr	r0, [pc, #228]	@ (8000fac <EP24C_WriteLongData+0x120>)
 8000ec8:	23c8      	movs	r3, #200	@ 0xc8
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	21a0      	movs	r1, #160	@ 0xa0
 8000eda:	f000 fda5 	bl	8001a28 <HAL_I2C_Mem_Write>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	e05f      	b.n	8000fa2 <EP24C_WriteLongData+0x116>
			EP24C_MEMADD_SIZE, pBuffer, bufferLen, EP24C_TIMEOUT);
	}
	uint8_t *pt = pBuffer;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	613b      	str	r3, [r7, #16]
	uint16_t pageCount = bufferLen / PAGE_SIZE_24CXX;
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	8812      	ldrh	r2, [r2, #0]
 8000eee:	08d2      	lsrs	r2, r2, #3
 8000ef0:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < pageCount; ++i) {
 8000ef2:	230e      	movs	r3, #14
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	801a      	strh	r2, [r3, #0]
 8000efa:	e028      	b.n	8000f4e <EP24C_WriteLongData+0xc2>
		result = HAL_I2C_Mem_Write(&I2C_HANDLE, DEV_ADDR_24CXX, memAddress,
 8000efc:	2517      	movs	r5, #23
 8000efe:	197c      	adds	r4, r7, r5
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	881a      	ldrh	r2, [r3, #0]
 8000f04:	4829      	ldr	r0, [pc, #164]	@ (8000fac <EP24C_WriteLongData+0x120>)
 8000f06:	23c8      	movs	r3, #200	@ 0xc8
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	21a0      	movs	r1, #160	@ 0xa0
 8000f16:	f000 fd87 	bl	8001a28 <HAL_I2C_Mem_Write>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	7023      	strb	r3, [r4, #0]
				EP24C_MEMADD_SIZE, pt, PAGE_SIZE_24CXX, EP24C_TIMEOUT);

		pt += PAGE_SIZE_24CXX;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3308      	adds	r3, #8
 8000f22:	613b      	str	r3, [r7, #16]
		memAddress += PAGE_SIZE_24CXX;
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	1dba      	adds	r2, r7, #6
 8000f28:	8812      	ldrh	r2, [r2, #0]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(5);
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f000 f86e 	bl	8001010 <HAL_Delay>

		if(result != HAL_OK){
 8000f34:	197b      	adds	r3, r7, r5
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <EP24C_WriteLongData+0xb6>
			return result;
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	e02f      	b.n	8000fa2 <EP24C_WriteLongData+0x116>
	for(uint16_t i = 0; i < pageCount; ++i) {
 8000f42:	220e      	movs	r2, #14
 8000f44:	18bb      	adds	r3, r7, r2
 8000f46:	18ba      	adds	r2, r7, r2
 8000f48:	8812      	ldrh	r2, [r2, #0]
 8000f4a:	3201      	adds	r2, #1
 8000f4c:	801a      	strh	r2, [r3, #0]
 8000f4e:	230e      	movs	r3, #14
 8000f50:	18fa      	adds	r2, r7, r3
 8000f52:	230c      	movs	r3, #12
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	8812      	ldrh	r2, [r2, #0]
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d3ce      	bcc.n	8000efc <EP24C_WriteLongData+0x70>
		}
	}
	uint8_t leftBytes = bufferLen % PAGE_SIZE_24CXX;
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	200b      	movs	r0, #11
 8000f66:	183b      	adds	r3, r7, r0
 8000f68:	2107      	movs	r1, #7
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
	if(leftBytes > 0){
 8000f6e:	183b      	adds	r3, r7, r0
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d012      	beq.n	8000f9c <EP24C_WriteLongData+0x110>
		result = HAL_I2C_Mem_Write(&I2C_HANDLE, DEV_ADDR_24CXX, memAddress,
 8000f76:	183b      	adds	r3, r7, r0
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2217      	movs	r2, #23
 8000f7e:	18bc      	adds	r4, r7, r2
 8000f80:	1dba      	adds	r2, r7, #6
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	4809      	ldr	r0, [pc, #36]	@ (8000fac <EP24C_WriteLongData+0x120>)
 8000f86:	21c8      	movs	r1, #200	@ 0xc8
 8000f88:	9102      	str	r1, [sp, #8]
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	21a0      	movs	r1, #160	@ 0xa0
 8000f94:	f000 fd48 	bl	8001a28 <HAL_I2C_Mem_Write>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	7023      	strb	r3, [r4, #0]
					EP24C_MEMADD_SIZE, pt, leftBytes, EP24C_TIMEOUT);
	}
	return result;
 8000f9c:	2317      	movs	r3, #23
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b006      	add	sp, #24
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	20000084 	.word	0x20000084

08000fb0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <HAL_Init+0x24>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_Init+0x24>)
 8000fba:	2110      	movs	r1, #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fc4b 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc6:	f7ff fc25 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	18d2      	adds	r2, r2, r3
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000440 	.word	0x20000440

08000ffc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b02      	ldr	r3, [pc, #8]	@ (800100c <HAL_GetTick+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	20000440 	.word	0x20000440

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff fff0 	bl	8000ffc <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	001a      	movs	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	189b      	adds	r3, r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	f7ff ffe0 	bl	8000ffc <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000008 	.word	0x20000008

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	0002      	movs	r2, r0
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b7f      	cmp	r3, #127	@ 0x7f
 800106a:	d809      	bhi.n	8001080 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	001a      	movs	r2, r3
 8001072:	231f      	movs	r3, #31
 8001074:	401a      	ands	r2, r3
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <__NVIC_EnableIRQ+0x30>)
 8001078:	2101      	movs	r1, #1
 800107a:	4091      	lsls	r1, r2
 800107c:	000a      	movs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
  }
}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	0002      	movs	r2, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b7f      	cmp	r3, #127	@ 0x7f
 80010a0:	d828      	bhi.n	80010f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <__NVIC_SetPriority+0xd4>)
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	33c0      	adds	r3, #192	@ 0xc0
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	589b      	ldr	r3, [r3, r2]
 80010b2:	1dfa      	adds	r2, r7, #7
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	0011      	movs	r1, r2
 80010b8:	2203      	movs	r2, #3
 80010ba:	400a      	ands	r2, r1
 80010bc:	00d2      	lsls	r2, r2, #3
 80010be:	21ff      	movs	r1, #255	@ 0xff
 80010c0:	4091      	lsls	r1, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	401a      	ands	r2, r3
 80010c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	22ff      	movs	r2, #255	@ 0xff
 80010d0:	401a      	ands	r2, r3
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0018      	movs	r0, r3
 80010d8:	2303      	movs	r3, #3
 80010da:	4003      	ands	r3, r0
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	481f      	ldr	r0, [pc, #124]	@ (8001160 <__NVIC_SetPriority+0xd4>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	430a      	orrs	r2, r1
 80010ec:	33c0      	adds	r3, #192	@ 0xc0
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010f2:	e031      	b.n	8001158 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <__NVIC_SetPriority+0xd8>)
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	0019      	movs	r1, r3
 80010fc:	230f      	movs	r3, #15
 80010fe:	400b      	ands	r3, r1
 8001100:	3b08      	subs	r3, #8
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3306      	adds	r3, #6
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	3304      	adds	r3, #4
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	1dfa      	adds	r2, r7, #7
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	0011      	movs	r1, r2
 8001114:	2203      	movs	r2, #3
 8001116:	400a      	ands	r2, r1
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	21ff      	movs	r1, #255	@ 0xff
 800111c:	4091      	lsls	r1, r2
 800111e:	000a      	movs	r2, r1
 8001120:	43d2      	mvns	r2, r2
 8001122:	401a      	ands	r2, r3
 8001124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	019b      	lsls	r3, r3, #6
 800112a:	22ff      	movs	r2, #255	@ 0xff
 800112c:	401a      	ands	r2, r3
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0018      	movs	r0, r3
 8001134:	2303      	movs	r3, #3
 8001136:	4003      	ands	r3, r0
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113c:	4809      	ldr	r0, [pc, #36]	@ (8001164 <__NVIC_SetPriority+0xd8>)
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	001c      	movs	r4, r3
 8001144:	230f      	movs	r3, #15
 8001146:	4023      	ands	r3, r4
 8001148:	3b08      	subs	r3, #8
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	430a      	orrs	r2, r1
 800114e:	3306      	adds	r3, #6
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	18c3      	adds	r3, r0, r3
 8001154:	3304      	adds	r3, #4
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b003      	add	sp, #12
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	210f      	movs	r1, #15
 8001174:	187b      	adds	r3, r7, r1
 8001176:	1c02      	adds	r2, r0, #0
 8001178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	187b      	adds	r3, r7, r1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ff81 	bl	800108c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b004      	add	sp, #16
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	0002      	movs	r2, r0
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff ff57 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e036      	b.n	8001238 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2221      	movs	r2, #33	@ 0x21
 80011ce:	2102      	movs	r1, #2
 80011d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a18      	ldr	r2, [pc, #96]	@ (8001240 <HAL_DMA_Init+0x8c>)
 80011de:	4013      	ands	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0018      	movs	r0, r3
 800121c:	f000 f9da 	bl	80015d4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2221      	movs	r2, #33	@ 0x21
 800122a:	2101      	movs	r1, #1
 800122c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2220      	movs	r2, #32
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}
 8001240:	ffffc00f 	.word	0xffffc00f

08001244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001252:	2317      	movs	r3, #23
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2220      	movs	r2, #32
 800125e:	5c9b      	ldrb	r3, [r3, r2]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_DMA_Start_IT+0x24>
 8001264:	2302      	movs	r3, #2
 8001266:	e04f      	b.n	8001308 <HAL_DMA_Start_IT+0xc4>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2220      	movs	r2, #32
 800126c:	2101      	movs	r1, #1
 800126e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2221      	movs	r2, #33	@ 0x21
 8001274:	5c9b      	ldrb	r3, [r3, r2]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d13a      	bne.n	80012f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2221      	movs	r2, #33	@ 0x21
 8001280:	2102      	movs	r1, #2
 8001282:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	438a      	bics	r2, r1
 8001298:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f96a 	bl	800157a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	210e      	movs	r1, #14
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e00f      	b.n	80012e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	210a      	movs	r1, #10
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2104      	movs	r1, #4
 80012dc:	438a      	bics	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2101      	movs	r1, #1
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	e007      	b.n	8001302 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2220      	movs	r2, #32
 80012f6:	2100      	movs	r1, #0
 80012f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012fa:	2317      	movs	r3, #23
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001302:	2317      	movs	r3, #23
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b006      	add	sp, #24
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2221      	movs	r2, #33	@ 0x21
 800131c:	5c9b      	ldrb	r3, [r3, r2]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d008      	beq.n	8001336 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2204      	movs	r2, #4
 8001328:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2220      	movs	r2, #32
 800132e:	2100      	movs	r1, #0
 8001330:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e020      	b.n	8001378 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	210e      	movs	r1, #14
 8001342:	438a      	bics	r2, r1
 8001344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2101      	movs	r1, #1
 8001352:	438a      	bics	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135e:	2101      	movs	r1, #1
 8001360:	4091      	lsls	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2221      	movs	r2, #33	@ 0x21
 800136a:	2101      	movs	r1, #1
 800136c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2220      	movs	r2, #32
 8001372:	2100      	movs	r1, #0
 8001374:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001388:	210f      	movs	r1, #15
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2221      	movs	r2, #33	@ 0x21
 8001394:	5c9b      	ldrb	r3, [r3, r2]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d006      	beq.n	80013aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2204      	movs	r2, #4
 80013a0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	e028      	b.n	80013fc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	210e      	movs	r1, #14
 80013b6:	438a      	bics	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	438a      	bics	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d2:	2101      	movs	r1, #1
 80013d4:	4091      	lsls	r1, r2
 80013d6:	000a      	movs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2221      	movs	r2, #33	@ 0x21
 80013de:	2101      	movs	r1, #1
 80013e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2220      	movs	r2, #32
 80013e6:	2100      	movs	r1, #0
 80013e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	0010      	movs	r0, r2
 80013fa:	4798      	blx	r3
    }
  }
  return status;
 80013fc:	230f      	movs	r3, #15
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	781b      	ldrb	r3, [r3, #0]
}
 8001402:	0018      	movs	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	b004      	add	sp, #16
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	2204      	movs	r2, #4
 8001428:	409a      	lsls	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	d024      	beq.n	800147c <HAL_DMA_IRQHandler+0x72>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2204      	movs	r2, #4
 8001436:	4013      	ands	r3, r2
 8001438:	d020      	beq.n	800147c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2220      	movs	r2, #32
 8001442:	4013      	ands	r3, r2
 8001444:	d107      	bne.n	8001456 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2104      	movs	r1, #4
 8001452:	438a      	bics	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800145e:	2104      	movs	r1, #4
 8001460:	4091      	lsls	r1, r2
 8001462:	000a      	movs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146a:	2b00      	cmp	r3, #0
 800146c:	d100      	bne.n	8001470 <HAL_DMA_IRQHandler+0x66>
 800146e:	e06a      	b.n	8001546 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	0010      	movs	r0, r2
 8001478:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800147a:	e064      	b.n	8001546 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	2202      	movs	r2, #2
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	d02b      	beq.n	80014e4 <HAL_DMA_IRQHandler+0xda>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d027      	beq.n	80014e4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2220      	movs	r2, #32
 800149c:	4013      	ands	r3, r2
 800149e:	d10b      	bne.n	80014b8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	210a      	movs	r1, #10
 80014ac:	438a      	bics	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2221      	movs	r2, #33	@ 0x21
 80014b4:	2101      	movs	r1, #1
 80014b6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c0:	2102      	movs	r1, #2
 80014c2:	4091      	lsls	r1, r2
 80014c4:	000a      	movs	r2, r1
 80014c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2220      	movs	r2, #32
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d036      	beq.n	8001546 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	0010      	movs	r0, r2
 80014e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014e2:	e030      	b.n	8001546 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	2208      	movs	r2, #8
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4013      	ands	r3, r2
 80014f2:	d028      	beq.n	8001546 <HAL_DMA_IRQHandler+0x13c>
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2208      	movs	r2, #8
 80014f8:	4013      	ands	r3, r2
 80014fa:	d024      	beq.n	8001546 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	210e      	movs	r1, #14
 8001508:	438a      	bics	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001514:	2101      	movs	r1, #1
 8001516:	4091      	lsls	r1, r2
 8001518:	000a      	movs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2221      	movs	r2, #33	@ 0x21
 8001526:	2101      	movs	r1, #1
 8001528:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2220      	movs	r2, #32
 800152e:	2100      	movs	r1, #0
 8001530:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	0010      	movs	r0, r2
 8001542:	4798      	blx	r3
    }
  }
}
 8001544:	e7ff      	b.n	8001546 <HAL_DMA_IRQHandler+0x13c>
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2221      	movs	r2, #33	@ 0x21
 800155a:	5c9b      	ldrb	r3, [r3, r2]
 800155c:	b2db      	uxtb	r3, r3
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}

0800157a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001590:	2101      	movs	r1, #1
 8001592:	4091      	lsls	r1, r2
 8001594:	000a      	movs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d108      	bne.n	80015ba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015b8:	e007      	b.n	80015ca <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	60da      	str	r2, [r3, #12]
}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <DMA_CalcBaseAndBitshift+0x30>)
 80015e2:	4694      	mov	ip, r2
 80015e4:	4463      	add	r3, ip
 80015e6:	2114      	movs	r1, #20
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7fe fd97 	bl	800011c <__udivsi3>
 80015ee:	0003      	movs	r3, r0
 80015f0:	009a      	lsls	r2, r3, #2
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a03      	ldr	r2, [pc, #12]	@ (8001608 <DMA_CalcBaseAndBitshift+0x34>)
 80015fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}
 8001604:	bffdfff8 	.word	0xbffdfff8
 8001608:	40020000 	.word	0x40020000

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e149      	b.n	80018b0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d100      	bne.n	8001634 <HAL_GPIO_Init+0x28>
 8001632:	e13a      	b.n	80018aa <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2203      	movs	r2, #3
 800163a:	4013      	ands	r3, r2
 800163c:	2b01      	cmp	r3, #1
 800163e:	d005      	beq.n	800164c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2203      	movs	r2, #3
 8001646:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001648:	2b02      	cmp	r3, #2
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	409a      	lsls	r2, r3
 800165a:	0013      	movs	r3, r2
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	43da      	mvns	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	2201      	movs	r2, #1
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d017      	beq.n	80016ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	58d3      	ldr	r3, [r2, r3]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2207      	movs	r2, #7
 8001708:	4013      	ands	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2107      	movs	r1, #7
 8001722:	400b      	ands	r3, r1
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	6939      	ldr	r1, [r7, #16]
 800173c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	43da      	mvns	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2203      	movs	r2, #3
 800175c:	401a      	ands	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	23c0      	movs	r3, #192	@ 0xc0
 8001778:	029b      	lsls	r3, r3, #10
 800177a:	4013      	ands	r3, r2
 800177c:	d100      	bne.n	8001780 <HAL_GPIO_Init+0x174>
 800177e:	e094      	b.n	80018aa <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	4b51      	ldr	r3, [pc, #324]	@ (80018c8 <HAL_GPIO_Init+0x2bc>)
 8001782:	699a      	ldr	r2, [r3, #24]
 8001784:	4b50      	ldr	r3, [pc, #320]	@ (80018c8 <HAL_GPIO_Init+0x2bc>)
 8001786:	2101      	movs	r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	4b4e      	ldr	r3, [pc, #312]	@ (80018c8 <HAL_GPIO_Init+0x2bc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001798:	4a4c      	ldr	r2, [pc, #304]	@ (80018cc <HAL_GPIO_Init+0x2c0>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	589b      	ldr	r3, [r3, r2]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2203      	movs	r2, #3
 80017aa:	4013      	ands	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	409a      	lsls	r2, r3
 80017b2:	0013      	movs	r3, r2
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	2390      	movs	r3, #144	@ 0x90
 80017c0:	05db      	lsls	r3, r3, #23
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x1d6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a41      	ldr	r2, [pc, #260]	@ (80018d0 <HAL_GPIO_Init+0x2c4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x1d2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a40      	ldr	r2, [pc, #256]	@ (80018d4 <HAL_GPIO_Init+0x2c8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x1ce>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x1d8>
 80017da:	2305      	movs	r3, #5
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x1d8>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x1d8>
 80017e2:	2300      	movs	r3, #0
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	2103      	movs	r1, #3
 80017e8:	400a      	ands	r2, r1
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f4:	4935      	ldr	r1, [pc, #212]	@ (80018cc <HAL_GPIO_Init+0x2c0>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	035b      	lsls	r3, r3, #13
 800181a:	4013      	ands	r3, r2
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800182c:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	039b      	lsls	r3, r3, #14
 8001844:	4013      	ands	r3, r2
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001850:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43da      	mvns	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	029b      	lsls	r3, r3, #10
 800186e:	4013      	ands	r3, r2
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	4013      	ands	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	40da      	lsrs	r2, r3
 80018b8:	1e13      	subs	r3, r2, #0
 80018ba:	d000      	beq.n	80018be <HAL_GPIO_Init+0x2b2>
 80018bc:	e6ae      	b.n	800161c <HAL_GPIO_Init+0x10>
  } 
}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	46c0      	nop			@ (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b006      	add	sp, #24
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	48000400 	.word	0x48000400
 80018d4:	48000800 	.word	0x48000800
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e08f      	b.n	8001a0e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2241      	movs	r2, #65	@ 0x41
 80018f2:	5c9b      	ldrb	r3, [r3, r2]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d107      	bne.n	800190a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2240      	movs	r2, #64	@ 0x40
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0018      	movs	r0, r3
 8001906:	f7fe fd27 	bl	8000358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2241      	movs	r2, #65	@ 0x41
 800190e:	2124      	movs	r1, #36	@ 0x24
 8001910:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	438a      	bics	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	493b      	ldr	r1, [pc, #236]	@ (8001a18 <HAL_I2C_Init+0x13c>)
 800192c:	400a      	ands	r2, r1
 800192e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4938      	ldr	r1, [pc, #224]	@ (8001a1c <HAL_I2C_Init+0x140>)
 800193c:	400a      	ands	r2, r1
 800193e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	0209      	lsls	r1, r1, #8
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e007      	b.n	800196a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2184      	movs	r1, #132	@ 0x84
 8001964:	0209      	lsls	r1, r1, #8
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d109      	bne.n	8001986 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2180      	movs	r1, #128	@ 0x80
 800197e:	0109      	lsls	r1, r1, #4
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	e007      	b.n	8001996 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4923      	ldr	r1, [pc, #140]	@ (8001a20 <HAL_I2C_Init+0x144>)
 8001992:	400a      	ands	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4920      	ldr	r1, [pc, #128]	@ (8001a24 <HAL_I2C_Init+0x148>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	491a      	ldr	r1, [pc, #104]	@ (8001a1c <HAL_I2C_Init+0x140>)
 80019b2:	400a      	ands	r2, r1
 80019b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	431a      	orrs	r2, r3
 80019c0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69d9      	ldr	r1, [r3, #28]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2101      	movs	r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2241      	movs	r2, #65	@ 0x41
 80019fa:	2120      	movs	r1, #32
 80019fc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2242      	movs	r2, #66	@ 0x42
 8001a08:	2100      	movs	r1, #0
 8001a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	f0ffffff 	.word	0xf0ffffff
 8001a1c:	ffff7fff 	.word	0xffff7fff
 8001a20:	fffff7ff 	.word	0xfffff7ff
 8001a24:	02008000 	.word	0x02008000

08001a28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	000c      	movs	r4, r1
 8001a32:	0010      	movs	r0, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	230a      	movs	r3, #10
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	1c22      	adds	r2, r4, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	2308      	movs	r3, #8
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	1c02      	adds	r2, r0, #0
 8001a44:	801a      	strh	r2, [r3, #0]
 8001a46:	1dbb      	adds	r3, r7, #6
 8001a48:	1c0a      	adds	r2, r1, #0
 8001a4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2241      	movs	r2, #65	@ 0x41
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d000      	beq.n	8001a5a <HAL_I2C_Mem_Write+0x32>
 8001a58:	e10c      	b.n	8001c74 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_I2C_Mem_Write+0x42>
 8001a60:	232c      	movs	r3, #44	@ 0x2c
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0ff      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2240      	movs	r2, #64	@ 0x40
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Mem_Write+0x5c>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0f8      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	@ 0x40
 8001a88:	2101      	movs	r1, #1
 8001a8a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fab6 	bl	8000ffc <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	0219      	lsls	r1, r3, #8
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f001 f9e5 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0e3      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2241      	movs	r2, #65	@ 0x41
 8001ab2:	2121      	movs	r1, #33	@ 0x21
 8001ab4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2242      	movs	r2, #66	@ 0x42
 8001aba:	2140      	movs	r1, #64	@ 0x40
 8001abc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	222c      	movs	r2, #44	@ 0x2c
 8001ace:	18ba      	adds	r2, r7, r2
 8001ad0:	8812      	ldrh	r2, [r2, #0]
 8001ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ada:	1dbb      	adds	r3, r7, #6
 8001adc:	881c      	ldrh	r4, [r3, #0]
 8001ade:	2308      	movs	r3, #8
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	8819      	ldrh	r1, [r3, #0]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	0023      	movs	r3, r4
 8001af6:	f000 fca1 	bl	800243c <I2C_RequestMemoryWrite>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2240      	movs	r2, #64	@ 0x40
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0b5      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2bff      	cmp	r3, #255	@ 0xff
 8001b12:	d911      	bls.n	8001b38 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	22ff      	movs	r2, #255	@ 0xff
 8001b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	045c      	lsls	r4, r3, #17
 8001b24:	230a      	movs	r3, #10
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	8819      	ldrh	r1, [r3, #0]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	0023      	movs	r3, r4
 8001b32:	f001 fb77 	bl	8003224 <I2C_TransferConfig>
 8001b36:	e012      	b.n	8001b5e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	049c      	lsls	r4, r3, #18
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	8819      	ldrh	r1, [r3, #0]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	0023      	movs	r3, r4
 8001b5a:	f001 fb63 	bl	8003224 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f001 f9db 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e081      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03a      	beq.n	8001c22 <HAL_I2C_Mem_Write+0x1fa>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d136      	bne.n	8001c22 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2180      	movs	r1, #128	@ 0x80
 8001bc2:	f001 f955 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e053      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2bff      	cmp	r3, #255	@ 0xff
 8001bd6:	d911      	bls.n	8001bfc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	22ff      	movs	r2, #255	@ 0xff
 8001bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	045c      	lsls	r4, r3, #17
 8001be8:	230a      	movs	r3, #10
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	8819      	ldrh	r1, [r3, #0]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	0023      	movs	r3, r4
 8001bf6:	f001 fb15 	bl	8003224 <I2C_TransferConfig>
 8001bfa:	e012      	b.n	8001c22 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	049c      	lsls	r4, r3, #18
 8001c10:	230a      	movs	r3, #10
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	8819      	ldrh	r1, [r3, #0]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	0023      	movs	r3, r4
 8001c1e:	f001 fb01 	bl	8003224 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d198      	bne.n	8001b5e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f001 f9ba 	bl	8002fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c38:	1e03      	subs	r3, r0, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e01a      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2220      	movs	r2, #32
 8001c46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	490b      	ldr	r1, [pc, #44]	@ (8001c80 <HAL_I2C_Mem_Write+0x258>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2241      	movs	r2, #65	@ 0x41
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2242      	movs	r2, #66	@ 0x42
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2240      	movs	r2, #64	@ 0x40
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e000      	b.n	8001c76 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c74:	2302      	movs	r3, #2
  }
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b007      	add	sp, #28
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	fe00e800 	.word	0xfe00e800

08001c84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	230a      	movs	r3, #10
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	1c22      	adds	r2, r4, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	1c02      	adds	r2, r0, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	1dbb      	adds	r3, r7, #6
 8001ca4:	1c0a      	adds	r2, r1, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2241      	movs	r2, #65	@ 0x41
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d000      	beq.n	8001cb6 <HAL_I2C_Mem_Read+0x32>
 8001cb4:	e110      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_I2C_Mem_Read+0x42>
 8001cbc:	232c      	movs	r3, #44	@ 0x2c
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d105      	bne.n	8001cd2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e103      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2240      	movs	r2, #64	@ 0x40
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2C_Mem_Read+0x5c>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e0fc      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2240      	movs	r2, #64	@ 0x40
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f988 	bl	8000ffc <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	0219      	lsls	r1, r3, #8
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2319      	movs	r3, #25
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f001 f8b7 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0e7      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2241      	movs	r2, #65	@ 0x41
 8001d0e:	2122      	movs	r1, #34	@ 0x22
 8001d10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2242      	movs	r2, #66	@ 0x42
 8001d16:	2140      	movs	r1, #64	@ 0x40
 8001d18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	222c      	movs	r2, #44	@ 0x2c
 8001d2a:	18ba      	adds	r2, r7, r2
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d36:	1dbb      	adds	r3, r7, #6
 8001d38:	881c      	ldrh	r4, [r3, #0]
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	230a      	movs	r3, #10
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	8819      	ldrh	r1, [r3, #0]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	0023      	movs	r3, r4
 8001d52:	f000 fbd7 	bl	8002504 <I2C_RequestMemoryRead>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2240      	movs	r2, #64	@ 0x40
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0b9      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2bff      	cmp	r3, #255	@ 0xff
 8001d6e:	d911      	bls.n	8001d94 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	045c      	lsls	r4, r3, #17
 8001d80:	230a      	movs	r3, #10
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	8819      	ldrh	r1, [r3, #0]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	4b56      	ldr	r3, [pc, #344]	@ (8001ee4 <HAL_I2C_Mem_Read+0x260>)
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	0023      	movs	r3, r4
 8001d8e:	f001 fa49 	bl	8003224 <I2C_TransferConfig>
 8001d92:	e012      	b.n	8001dba <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	049c      	lsls	r4, r3, #18
 8001da8:	230a      	movs	r3, #10
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	8819      	ldrh	r1, [r3, #0]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee4 <HAL_I2C_Mem_Read+0x260>)
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	0023      	movs	r3, r4
 8001db6:	f001 fa35 	bl	8003224 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	f001 f852 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e082      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03a      	beq.n	8001e86 <HAL_I2C_Mem_Read+0x202>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d136      	bne.n	8001e86 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	0013      	movs	r3, r2
 8001e22:	2200      	movs	r2, #0
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	f001 f823 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e053      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2bff      	cmp	r3, #255	@ 0xff
 8001e3a:	d911      	bls.n	8001e60 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	045c      	lsls	r4, r3, #17
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	8819      	ldrh	r1, [r3, #0]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	2300      	movs	r3, #0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	0023      	movs	r3, r4
 8001e5a:	f001 f9e3 	bl	8003224 <I2C_TransferConfig>
 8001e5e:	e012      	b.n	8001e86 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	049c      	lsls	r4, r3, #18
 8001e74:	230a      	movs	r3, #10
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	8819      	ldrh	r1, [r3, #0]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	0023      	movs	r3, r4
 8001e82:	f001 f9cf 	bl	8003224 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d194      	bne.n	8001dba <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 f888 	bl	8002fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e01a      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	490c      	ldr	r1, [pc, #48]	@ (8001ee8 <HAL_I2C_Mem_Read+0x264>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2241      	movs	r2, #65	@ 0x41
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2242      	movs	r2, #66	@ 0x42
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2240      	movs	r2, #64	@ 0x40
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
  }
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b007      	add	sp, #28
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	80002400 	.word	0x80002400
 8001ee8:	fe00e800 	.word	0xfe00e800

08001eec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	230a      	movs	r3, #10
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	1c0a      	adds	r2, r1, #0
 8001efe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2241      	movs	r2, #65	@ 0x41
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d000      	beq.n	8001f12 <HAL_I2C_IsDeviceReady+0x26>
 8001f10:	e0df      	b.n	80020d2 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	e0d4      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2240      	movs	r2, #64	@ 0x40
 8001f2e:	5c9b      	ldrb	r3, [r3, r2]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_I2C_IsDeviceReady+0x4c>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e0cd      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1e8>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2240      	movs	r2, #64	@ 0x40
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2241      	movs	r2, #65	@ 0x41
 8001f44:	2124      	movs	r1, #36	@ 0x24
 8001f46:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_I2C_IsDeviceReady+0x7a>
 8001f56:	230a      	movs	r3, #10
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	059b      	lsls	r3, r3, #22
 8001f5e:	0d9b      	lsrs	r3, r3, #22
 8001f60:	4a5e      	ldr	r2, [pc, #376]	@ (80020dc <HAL_I2C_IsDeviceReady+0x1f0>)
 8001f62:	431a      	orrs	r2, r3
 8001f64:	e006      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x88>
 8001f66:	230a      	movs	r3, #10
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	059b      	lsls	r3, r3, #22
 8001f6e:	0d9b      	lsrs	r3, r3, #22
 8001f70:	4a5b      	ldr	r2, [pc, #364]	@ (80020e0 <HAL_I2C_IsDeviceReady+0x1f4>)
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f83f 	bl	8000ffc <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	3b20      	subs	r3, #32
 8001f8e:	425a      	negs	r2, r3
 8001f90:	4153      	adcs	r3, r2
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	231f      	movs	r3, #31
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	3b10      	subs	r3, #16
 8001fa6:	425a      	negs	r2, r3
 8001fa8:	4153      	adcs	r3, r2
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	231e      	movs	r3, #30
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001fb2:	e035      	b.n	8002020 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	d01a      	beq.n	8001ff0 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fba:	f7ff f81f 	bl	8000ffc <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <HAL_I2C_IsDeviceReady+0xe4>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2241      	movs	r2, #65	@ 0x41
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fdc:	2220      	movs	r2, #32
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2240      	movs	r2, #64	@ 0x40
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e071      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	3b20      	subs	r3, #32
 8001ffc:	425a      	negs	r2, r3
 8001ffe:	4153      	adcs	r3, r2
 8002000:	b2da      	uxtb	r2, r3
 8002002:	231f      	movs	r3, #31
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2210      	movs	r2, #16
 8002010:	4013      	ands	r3, r2
 8002012:	3b10      	subs	r3, #16
 8002014:	425a      	negs	r2, r3
 8002016:	4153      	adcs	r3, r2
 8002018:	b2da      	uxtb	r2, r3
 800201a:	231e      	movs	r3, #30
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002020:	231f      	movs	r3, #31
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <HAL_I2C_IsDeviceReady+0x148>
 800202a:	231e      	movs	r3, #30
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0bf      	beq.n	8001fb4 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2210      	movs	r2, #16
 800203c:	4013      	ands	r3, r2
 800203e:	2b10      	cmp	r3, #16
 8002040:	d01a      	beq.n	8002078 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	0013      	movs	r3, r2
 800204c:	2200      	movs	r2, #0
 800204e:	2120      	movs	r1, #32
 8002050:	f000 ff0e 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e03b      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2220      	movs	r2, #32
 8002062:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2241      	movs	r2, #65	@ 0x41
 8002068:	2120      	movs	r1, #32
 800206a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e02d      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	0013      	movs	r3, r2
 8002082:	2200      	movs	r2, #0
 8002084:	2120      	movs	r1, #32
 8002086:	f000 fef3 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e020      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2210      	movs	r2, #16
 8002098:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2220      	movs	r2, #32
 80020a0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d900      	bls.n	80020b2 <HAL_I2C_IsDeviceReady+0x1c6>
 80020b0:	e74d      	b.n	8001f4e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2241      	movs	r2, #65	@ 0x41
 80020b6:	2120      	movs	r1, #32
 80020b8:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	2220      	movs	r2, #32
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2240      	movs	r2, #64	@ 0x40
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
  }
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b008      	add	sp, #32
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	02002000 	.word	0x02002000
 80020e0:	02002800 	.word	0x02002800

080020e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
  }
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	2380      	movs	r3, #128	@ 0x80
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002140:	d00a      	beq.n	8002158 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	2201      	movs	r2, #1
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2280      	movs	r2, #128	@ 0x80
 8002154:	0052      	lsls	r2, r2, #1
 8002156:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4013      	ands	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002168:	d00a      	beq.n	8002180 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	2208      	movs	r2, #8
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2280      	movs	r2, #128	@ 0x80
 800217c:	00d2      	lsls	r2, r2, #3
 800217e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d00e      	beq.n	80021a8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2280      	movs	r2, #128	@ 0x80
 800218e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002190:	d00a      	beq.n	80021a8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	2202      	movs	r2, #2
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	220b      	movs	r2, #11
 80021b2:	4013      	ands	r3, r2
 80021b4:	d005      	beq.n	80021c2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0011      	movs	r1, r2
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 fceb 	bl	8002b98 <I2C_ITError>
  }
}
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b006      	add	sp, #24
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	0008      	movs	r0, r1
 80021f4:	0011      	movs	r1, r2
 80021f6:	1cfb      	adds	r3, r7, #3
 80021f8:	1c02      	adds	r2, r0, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	003b      	movs	r3, r7
 80021fe:	1c0a      	adds	r2, r1, #0
 8002200:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b002      	add	sp, #8
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2240      	movs	r2, #64	@ 0x40
 8002256:	5c9b      	ldrb	r3, [r3, r2]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <I2C_Slave_ISR_IT+0x24>
 800225c:	2302      	movs	r3, #2
 800225e:	e0e7      	b.n	8002430 <I2C_Slave_ISR_IT+0x1f4>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2240      	movs	r2, #64	@ 0x40
 8002264:	2101      	movs	r1, #1
 8002266:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2220      	movs	r2, #32
 800226c:	4013      	ands	r3, r2
 800226e:	d00a      	beq.n	8002286 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002276:	d006      	beq.n	8002286 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0011      	movs	r1, r2
 800227e:	0018      	movs	r0, r3
 8002280:	f000 faaa 	bl	80027d8 <I2C_ITSlaveCplt>
 8002284:	e0cf      	b.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2210      	movs	r2, #16
 800228a:	4013      	ands	r3, r2
 800228c:	d052      	beq.n	8002334 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2210      	movs	r2, #16
 8002292:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002294:	d04e      	beq.n	8002334 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d12d      	bne.n	80022fc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2241      	movs	r2, #65	@ 0x41
 80022a4:	5c9b      	ldrb	r3, [r3, r2]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b28      	cmp	r3, #40	@ 0x28
 80022aa:	d10b      	bne.n	80022c4 <I2C_Slave_ISR_IT+0x88>
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	049b      	lsls	r3, r3, #18
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	0011      	movs	r1, r2
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 fc13 	bl	8002ae8 <I2C_ITListenCplt>
 80022c2:	e036      	b.n	8002332 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2241      	movs	r2, #65	@ 0x41
 80022c8:	5c9b      	ldrb	r3, [r3, r2]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b29      	cmp	r3, #41	@ 0x29
 80022ce:	d110      	bne.n	80022f2 <I2C_Slave_ISR_IT+0xb6>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	4a59      	ldr	r2, [pc, #356]	@ (8002438 <I2C_Slave_ISR_IT+0x1fc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00c      	beq.n	80022f2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2210      	movs	r2, #16
 80022de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 fd83 	bl	8002dee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 fa10 	bl	8002710 <I2C_ITSlaveSeqCplt>
 80022f0:	e01f      	b.n	8002332 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2210      	movs	r2, #16
 80022f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80022fa:	e091      	b.n	8002420 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002308:	2204      	movs	r2, #4
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <I2C_Slave_ISR_IT+0xe6>
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	045b      	lsls	r3, r3, #17
 800231c:	429a      	cmp	r2, r3
 800231e:	d000      	beq.n	8002322 <I2C_Slave_ISR_IT+0xe6>
 8002320:	e07e      	b.n	8002420 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	0011      	movs	r1, r2
 800232a:	0018      	movs	r0, r3
 800232c:	f000 fc34 	bl	8002b98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002330:	e076      	b.n	8002420 <I2C_Slave_ISR_IT+0x1e4>
 8002332:	e075      	b.n	8002420 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2204      	movs	r2, #4
 8002338:	4013      	ands	r3, r2
 800233a:	d02f      	beq.n	800239c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002342:	d02b      	beq.n	800239c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d018      	beq.n	8002380 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d14c      	bne.n	8002424 <I2C_Slave_ISR_IT+0x1e8>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a2a      	ldr	r2, [pc, #168]	@ (8002438 <I2C_Slave_ISR_IT+0x1fc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d048      	beq.n	8002424 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0018      	movs	r0, r3
 8002396:	f000 f9bb 	bl	8002710 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800239a:	e043      	b.n	8002424 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2208      	movs	r2, #8
 80023a0:	4013      	ands	r3, r2
 80023a2:	d00a      	beq.n	80023ba <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2208      	movs	r2, #8
 80023a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80023aa:	d006      	beq.n	80023ba <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0011      	movs	r1, r2
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f908 	bl	80025c8 <I2C_ITAddrCplt>
 80023b8:	e035      	b.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2202      	movs	r2, #2
 80023be:	4013      	ands	r3, r2
 80023c0:	d031      	beq.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023c8:	d02d      	beq.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d018      	beq.n	8002406 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002404:	e00f      	b.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	045b      	lsls	r3, r3, #17
 800240c:	429a      	cmp	r2, r3
 800240e:	d002      	beq.n	8002416 <I2C_Slave_ISR_IT+0x1da>
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 f979 	bl	8002710 <I2C_ITSlaveSeqCplt>
 800241e:	e002      	b.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8002420:	46c0      	nop			@ (mov r8, r8)
 8002422:	e000      	b.n	8002426 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8002424:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2240      	movs	r2, #64	@ 0x40
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b006      	add	sp, #24
 8002436:	bd80      	pop	{r7, pc}
 8002438:	ffff0000 	.word	0xffff0000

0800243c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	000c      	movs	r4, r1
 8002446:	0010      	movs	r0, r2
 8002448:	0019      	movs	r1, r3
 800244a:	250a      	movs	r5, #10
 800244c:	197b      	adds	r3, r7, r5
 800244e:	1c22      	adds	r2, r4, #0
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	2308      	movs	r3, #8
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	1c02      	adds	r2, r0, #0
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	1dbb      	adds	r3, r7, #6
 800245c:	1c0a      	adds	r2, r1, #0
 800245e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	045c      	lsls	r4, r3, #17
 800246a:	197b      	adds	r3, r7, r5
 800246c:	8819      	ldrh	r1, [r3, #0]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <I2C_RequestMemoryWrite+0xc4>)
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	0023      	movs	r3, r4
 8002476:	f000 fed5 	bl	8003224 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 fd4d 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d001      	beq.n	800248e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e033      	b.n	80024f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248e:	1dbb      	adds	r3, r7, #6
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002496:	2308      	movs	r3, #8
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024a4:	e019      	b.n	80024da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024a6:	2308      	movs	r3, #8
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fd2e 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d001      	beq.n	80024cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e014      	b.n	80024f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024cc:	2308      	movs	r3, #8
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024da:	6a3a      	ldr	r2, [r7, #32]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	0013      	movs	r3, r2
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	f000 fcc2 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d001      	beq.n	80024f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b004      	add	sp, #16
 80024fc:	bdb0      	pop	{r4, r5, r7, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	80002000 	.word	0x80002000

08002504 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	000c      	movs	r4, r1
 800250e:	0010      	movs	r0, r2
 8002510:	0019      	movs	r1, r3
 8002512:	250a      	movs	r5, #10
 8002514:	197b      	adds	r3, r7, r5
 8002516:	1c22      	adds	r2, r4, #0
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	2308      	movs	r3, #8
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	1c02      	adds	r2, r0, #0
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	1c0a      	adds	r2, r1, #0
 8002526:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002528:	1dbb      	adds	r3, r7, #6
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	197b      	adds	r3, r7, r5
 8002530:	8819      	ldrh	r1, [r3, #0]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	4b23      	ldr	r3, [pc, #140]	@ (80025c4 <I2C_RequestMemoryRead+0xc0>)
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	f000 fe73 	bl	8003224 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800253e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002540:	6a39      	ldr	r1, [r7, #32]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fceb 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d001      	beq.n	8002552 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e033      	b.n	80025ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002552:	1dbb      	adds	r3, r7, #6
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800255a:	2308      	movs	r3, #8
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
 8002568:	e019      	b.n	800259e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800256a:	2308      	movs	r3, #8
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	b29b      	uxth	r3, r3
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257e:	6a39      	ldr	r1, [r7, #32]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0018      	movs	r0, r3
 8002584:	f000 fccc 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d001      	beq.n	8002590 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e014      	b.n	80025ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002590:	2308      	movs	r3, #8
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800259e:	6a3a      	ldr	r2, [r7, #32]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	0013      	movs	r3, r2
 80025a8:	2200      	movs	r2, #0
 80025aa:	2140      	movs	r1, #64	@ 0x40
 80025ac:	f000 fc60 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d001      	beq.n	80025b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bdb0      	pop	{r4, r5, r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	80002000 	.word	0x80002000

080025c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2241      	movs	r2, #65	@ 0x41
 80025d6:	5c9b      	ldrb	r3, [r3, r2]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	001a      	movs	r2, r3
 80025dc:	2328      	movs	r3, #40	@ 0x28
 80025de:	4013      	ands	r3, r2
 80025e0:	2b28      	cmp	r3, #40	@ 0x28
 80025e2:	d000      	beq.n	80025e6 <I2C_ITAddrCplt+0x1e>
 80025e4:	e088      	b.n	80026f8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	250f      	movs	r5, #15
 80025f2:	197b      	adds	r3, r7, r5
 80025f4:	2101      	movs	r1, #1
 80025f6:	400a      	ands	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	b29a      	uxth	r2, r3
 8002604:	200c      	movs	r0, #12
 8002606:	183b      	adds	r3, r7, r0
 8002608:	21fe      	movs	r1, #254	@ 0xfe
 800260a:	400a      	ands	r2, r1
 800260c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	b29a      	uxth	r2, r3
 8002616:	240a      	movs	r4, #10
 8002618:	193b      	adds	r3, r7, r4
 800261a:	0592      	lsls	r2, r2, #22
 800261c:	0d92      	lsrs	r2, r2, #22
 800261e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	b29a      	uxth	r2, r3
 8002628:	2308      	movs	r3, #8
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	21fe      	movs	r1, #254	@ 0xfe
 800262e:	400a      	ands	r2, r1
 8002630:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d148      	bne.n	80026cc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800263a:	0021      	movs	r1, r4
 800263c:	187b      	adds	r3, r7, r1
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	09db      	lsrs	r3, r3, #7
 8002642:	b29a      	uxth	r2, r3
 8002644:	183b      	adds	r3, r7, r0
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	4053      	eors	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	001a      	movs	r2, r3
 800264e:	2306      	movs	r3, #6
 8002650:	4013      	ands	r3, r2
 8002652:	d120      	bne.n	8002696 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002654:	183b      	adds	r3, r7, r0
 8002656:	187a      	adds	r2, r7, r1
 8002658:	8812      	ldrh	r2, [r2, #0]
 800265a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	2b02      	cmp	r3, #2
 800266c:	d14c      	bne.n	8002708 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2208      	movs	r2, #8
 800267a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2240      	movs	r2, #64	@ 0x40
 8002680:	2100      	movs	r1, #0
 8002682:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002684:	183b      	adds	r3, r7, r0
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	197b      	adds	r3, r7, r5
 800268a:	7819      	ldrb	r1, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff fdab 	bl	80021ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002694:	e038      	b.n	8002708 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002696:	240c      	movs	r4, #12
 8002698:	193b      	adds	r3, r7, r4
 800269a:	2208      	movs	r2, #8
 800269c:	18ba      	adds	r2, r7, r2
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fdf4 	bl	8003298 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2240      	movs	r2, #64	@ 0x40
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	230f      	movs	r3, #15
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	7819      	ldrb	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff fd90 	bl	80021ea <HAL_I2C_AddrCallback>
}
 80026ca:	e01d      	b.n	8002708 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	021a      	lsls	r2, r3, #8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0011      	movs	r1, r2
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 fddf 	bl	8003298 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2240      	movs	r2, #64	@ 0x40
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026e2:	230c      	movs	r3, #12
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	230f      	movs	r3, #15
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	7819      	ldrb	r1, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff fd7a 	bl	80021ea <HAL_I2C_AddrCallback>
}
 80026f6:	e007      	b.n	8002708 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2208      	movs	r2, #8
 80026fe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	2100      	movs	r1, #0
 8002706:	5499      	strb	r1, [r3, r2]
}
 8002708:	46c0      	nop			@ (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b004      	add	sp, #16
 800270e:	bdb0      	pop	{r4, r5, r7, pc}

08002710 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2242      	movs	r2, #66	@ 0x42
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	01db      	lsls	r3, r3, #7
 800272e:	4013      	ands	r3, r2
 8002730:	d008      	beq.n	8002744 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4924      	ldr	r1, [pc, #144]	@ (80027d0 <I2C_ITSlaveSeqCplt+0xc0>)
 800273e:	400a      	ands	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e00c      	b.n	800275e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	4013      	ands	r3, r2
 800274c:	d007      	beq.n	800275e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	491e      	ldr	r1, [pc, #120]	@ (80027d4 <I2C_ITSlaveSeqCplt+0xc4>)
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2241      	movs	r2, #65	@ 0x41
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b29      	cmp	r3, #41	@ 0x29
 8002768:	d114      	bne.n	8002794 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2241      	movs	r2, #65	@ 0x41
 800276e:	2128      	movs	r1, #40	@ 0x28
 8002770:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2221      	movs	r2, #33	@ 0x21
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2101      	movs	r1, #1
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fd8b 	bl	8003298 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2240      	movs	r2, #64	@ 0x40
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff fd1c 	bl	80021ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002792:	e019      	b.n	80027c8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2241      	movs	r2, #65	@ 0x41
 8002798:	5c9b      	ldrb	r3, [r3, r2]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b2a      	cmp	r3, #42	@ 0x2a
 800279e:	d113      	bne.n	80027c8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2241      	movs	r2, #65	@ 0x41
 80027a4:	2128      	movs	r1, #40	@ 0x28
 80027a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2222      	movs	r2, #34	@ 0x22
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2102      	movs	r1, #2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fd70 	bl	8003298 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2240      	movs	r2, #64	@ 0x40
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff fd09 	bl	80021da <HAL_I2C_SlaveRxCpltCallback>
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b004      	add	sp, #16
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	ffffbfff 	.word	0xffffbfff
 80027d4:	ffff7fff 	.word	0xffff7fff

080027d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027f4:	200b      	movs	r0, #11
 80027f6:	183b      	adds	r3, r7, r0
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	2141      	movs	r1, #65	@ 0x41
 80027fc:	5c52      	ldrb	r2, [r2, r1]
 80027fe:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2220      	movs	r2, #32
 8002806:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002808:	183b      	adds	r3, r7, r0
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b21      	cmp	r3, #33	@ 0x21
 800280e:	d003      	beq.n	8002818 <I2C_ITSlaveCplt+0x40>
 8002810:	183b      	adds	r3, r7, r0
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b29      	cmp	r3, #41	@ 0x29
 8002816:	d109      	bne.n	800282c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002818:	4aac      	ldr	r2, [pc, #688]	@ (8002acc <I2C_ITSlaveCplt+0x2f4>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f000 fd3a 	bl	8003298 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2221      	movs	r2, #33	@ 0x21
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
 800282a:	e020      	b.n	800286e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800282c:	220b      	movs	r2, #11
 800282e:	18bb      	adds	r3, r7, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b22      	cmp	r3, #34	@ 0x22
 8002834:	d003      	beq.n	800283e <I2C_ITSlaveCplt+0x66>
 8002836:	18bb      	adds	r3, r7, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b2a      	cmp	r3, #42	@ 0x2a
 800283c:	d109      	bne.n	8002852 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800283e:	4aa4      	ldr	r2, [pc, #656]	@ (8002ad0 <I2C_ITSlaveCplt+0x2f8>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f000 fd27 	bl	8003298 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2222      	movs	r2, #34	@ 0x22
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002850:	e00d      	b.n	800286e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002852:	230b      	movs	r3, #11
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b28      	cmp	r3, #40	@ 0x28
 800285a:	d108      	bne.n	800286e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800285c:	4a9d      	ldr	r2, [pc, #628]	@ (8002ad4 <I2C_ITSlaveCplt+0x2fc>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fd18 	bl	8003298 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2180      	movs	r1, #128	@ 0x80
 800287a:	0209      	lsls	r1, r1, #8
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4993      	ldr	r1, [pc, #588]	@ (8002ad8 <I2C_ITSlaveCplt+0x300>)
 800288c:	400a      	ands	r2, r1
 800288e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 faab 	bl	8002dee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	01db      	lsls	r3, r3, #7
 800289e:	4013      	ands	r3, r2
 80028a0:	d013      	beq.n	80028ca <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	498b      	ldr	r1, [pc, #556]	@ (8002adc <I2C_ITSlaveCplt+0x304>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01f      	beq.n	80028fa <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028c8:	e017      	b.n	80028fa <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4013      	ands	r3, r2
 80028d2:	d012      	beq.n	80028fa <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4980      	ldr	r1, [pc, #512]	@ (8002ae0 <I2C_ITSlaveCplt+0x308>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2204      	movs	r2, #4
 80028fe:	4013      	ands	r3, r2
 8002900:	d020      	beq.n	8002944 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2204      	movs	r2, #4
 8002906:	4393      	bics	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	2204      	movs	r2, #4
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2210      	movs	r2, #16
 800295e:	4013      	ands	r3, r2
 8002960:	d04f      	beq.n	8002a02 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2210      	movs	r2, #16
 8002966:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002968:	d04b      	beq.n	8002a02 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d12d      	bne.n	80029d0 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2241      	movs	r2, #65	@ 0x41
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b28      	cmp	r3, #40	@ 0x28
 800297e:	d10b      	bne.n	8002998 <I2C_ITSlaveCplt+0x1c0>
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	049b      	lsls	r3, r3, #18
 8002986:	429a      	cmp	r2, r3
 8002988:	d106      	bne.n	8002998 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f000 f8a9 	bl	8002ae8 <I2C_ITListenCplt>
 8002996:	e034      	b.n	8002a02 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2241      	movs	r2, #65	@ 0x41
 800299c:	5c9b      	ldrb	r3, [r3, r2]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b29      	cmp	r3, #41	@ 0x29
 80029a2:	d110      	bne.n	80029c6 <I2C_ITSlaveCplt+0x1ee>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae4 <I2C_ITSlaveCplt+0x30c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00c      	beq.n	80029c6 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2210      	movs	r2, #16
 80029b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fa19 	bl	8002dee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7ff fea6 	bl	8002710 <I2C_ITSlaveSeqCplt>
 80029c4:	e01d      	b.n	8002a02 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2210      	movs	r2, #16
 80029cc:	61da      	str	r2, [r3, #28]
 80029ce:	e018      	b.n	8002a02 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2210      	movs	r2, #16
 80029d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	2204      	movs	r2, #4
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <I2C_ITSlaveCplt+0x21c>
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	045b      	lsls	r3, r3, #17
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d106      	bne.n	8002a02 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 f8cb 	bl	8002b98 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2242      	movs	r2, #66	@ 0x42
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f8b9 	bl	8002b98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2241      	movs	r2, #65	@ 0x41
 8002a2a:	5c9b      	ldrb	r3, [r3, r2]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b28      	cmp	r3, #40	@ 0x28
 8002a30:	d147      	bne.n	8002ac2 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f855 	bl	8002ae8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a3e:	e040      	b.n	8002ac2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	4a27      	ldr	r2, [pc, #156]	@ (8002ae4 <I2C_ITSlaveCplt+0x30c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d016      	beq.n	8002a78 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff fe5f 	bl	8002710 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a23      	ldr	r2, [pc, #140]	@ (8002ae4 <I2C_ITSlaveCplt+0x30c>)
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2241      	movs	r2, #65	@ 0x41
 8002a5c:	2120      	movs	r1, #32
 8002a5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2240      	movs	r2, #64	@ 0x40
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff fbca 	bl	800220a <HAL_I2C_ListenCpltCallback>
}
 8002a76:	e024      	b.n	8002ac2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2241      	movs	r2, #65	@ 0x41
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b22      	cmp	r3, #34	@ 0x22
 8002a82:	d10f      	bne.n	8002aa4 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2241      	movs	r2, #65	@ 0x41
 8002a88:	2120      	movs	r1, #32
 8002a8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2240      	movs	r2, #64	@ 0x40
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff fb9c 	bl	80021da <HAL_I2C_SlaveRxCpltCallback>
}
 8002aa2:	e00e      	b.n	8002ac2 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2241      	movs	r2, #65	@ 0x41
 8002aa8:	2120      	movs	r1, #32
 8002aaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2240      	movs	r2, #64	@ 0x40
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff fb84 	bl	80021ca <HAL_I2C_SlaveTxCpltCallback>
}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b006      	add	sp, #24
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	00008001 	.word	0x00008001
 8002ad0:	00008002 	.word	0x00008002
 8002ad4:	00008003 	.word	0x00008003
 8002ad8:	fe00e800 	.word	0xfe00e800
 8002adc:	ffffbfff 	.word	0xffffbfff
 8002ae0:	ffff7fff 	.word	0xffff7fff
 8002ae4:	ffff0000 	.word	0xffff0000

08002ae8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a26      	ldr	r2, [pc, #152]	@ (8002b90 <I2C_ITListenCplt+0xa8>)
 8002af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2241      	movs	r2, #65	@ 0x41
 8002b02:	2120      	movs	r1, #32
 8002b04:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2242      	movs	r2, #66	@ 0x42
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b62:	4a0c      	ldr	r2, [pc, #48]	@ (8002b94 <I2C_ITListenCplt+0xac>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	0011      	movs	r1, r2
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fb95 	bl	8003298 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2210      	movs	r2, #16
 8002b74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2240      	movs	r2, #64	@ 0x40
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fb42 	bl	800220a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	ffff0000 	.word	0xffff0000
 8002b94:	00008003 	.word	0x00008003

08002b98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ba2:	200f      	movs	r0, #15
 8002ba4:	183b      	adds	r3, r7, r0
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	2141      	movs	r1, #65	@ 0x41
 8002baa:	5c52      	ldrb	r2, [r2, r1]
 8002bac:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2242      	movs	r2, #66	@ 0x42
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a72      	ldr	r2, [pc, #456]	@ (8002d84 <I2C_ITError+0x1ec>)
 8002bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002bce:	183b      	adds	r3, r7, r0
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b28      	cmp	r3, #40	@ 0x28
 8002bd4:	d007      	beq.n	8002be6 <I2C_ITError+0x4e>
 8002bd6:	183b      	adds	r3, r7, r0
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b29      	cmp	r3, #41	@ 0x29
 8002bdc:	d003      	beq.n	8002be6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002bde:	183b      	adds	r3, r7, r0
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002be4:	d10c      	bne.n	8002c00 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2103      	movs	r1, #3
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 fb54 	bl	8003298 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2241      	movs	r2, #65	@ 0x41
 8002bf4:	2128      	movs	r1, #40	@ 0x28
 8002bf6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a63      	ldr	r2, [pc, #396]	@ (8002d88 <I2C_ITError+0x1f0>)
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bfe:	e032      	b.n	8002c66 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c00:	4a62      	ldr	r2, [pc, #392]	@ (8002d8c <I2C_ITError+0x1f4>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fb46 	bl	8003298 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f8ed 	bl	8002dee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2241      	movs	r2, #65	@ 0x41
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b60      	cmp	r3, #96	@ 0x60
 8002c1e:	d01f      	beq.n	8002c60 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2241      	movs	r2, #65	@ 0x41
 8002c24:	2120      	movs	r1, #32
 8002c26:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d114      	bne.n	8002c60 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d109      	bne.n	8002c58 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c50:	2204      	movs	r2, #4
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d03b      	beq.n	8002cec <I2C_ITError+0x154>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b11      	cmp	r3, #17
 8002c78:	d002      	beq.n	8002c80 <I2C_ITError+0xe8>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b21      	cmp	r3, #33	@ 0x21
 8002c7e:	d135      	bne.n	8002cec <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	01db      	lsls	r3, r3, #7
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	01db      	lsls	r3, r3, #7
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d107      	bne.n	8002ca4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	493c      	ldr	r1, [pc, #240]	@ (8002d90 <I2C_ITError+0x1f8>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe fc50 	bl	800154e <HAL_DMA_GetState>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d016      	beq.n	8002ce2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	4a36      	ldr	r2, [pc, #216]	@ (8002d94 <I2C_ITError+0x1fc>)
 8002cba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2240      	movs	r2, #64	@ 0x40
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fe fb59 	bl	8001380 <HAL_DMA_Abort_IT>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d051      	beq.n	8002d76 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cdc:	0018      	movs	r0, r3
 8002cde:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ce0:	e049      	b.n	8002d76 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 f859 	bl	8002d9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002cea:	e044      	b.n	8002d76 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d03b      	beq.n	8002d6c <I2C_ITError+0x1d4>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b12      	cmp	r3, #18
 8002cf8:	d002      	beq.n	8002d00 <I2C_ITError+0x168>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b22      	cmp	r3, #34	@ 0x22
 8002cfe:	d135      	bne.n	8002d6c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	491e      	ldr	r1, [pc, #120]	@ (8002d98 <I2C_ITError+0x200>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fe fc10 	bl	800154e <HAL_DMA_GetState>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d016      	beq.n	8002d62 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <I2C_ITError+0x1fc>)
 8002d3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2240      	movs	r2, #64	@ 0x40
 8002d40:	2100      	movs	r1, #0
 8002d42:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fe fb19 	bl	8001380 <HAL_DMA_Abort_IT>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d013      	beq.n	8002d7a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d60:	e00b      	b.n	8002d7a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f819 	bl	8002d9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d6a:	e006      	b.n	8002d7a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f814 	bl	8002d9c <I2C_TreatErrorCallback>
  }
}
 8002d74:	e002      	b.n	8002d7c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	e000      	b.n	8002d7c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d7a:	46c0      	nop			@ (mov r8, r8)
}
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b004      	add	sp, #16
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	ffff0000 	.word	0xffff0000
 8002d88:	0800223d 	.word	0x0800223d
 8002d8c:	00008003 	.word	0x00008003
 8002d90:	ffffbfff 	.word	0xffffbfff
 8002d94:	08002e33 	.word	0x08002e33
 8002d98:	ffff7fff 	.word	0xffff7fff

08002d9c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2241      	movs	r2, #65	@ 0x41
 8002da8:	5c9b      	ldrb	r3, [r3, r2]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b60      	cmp	r3, #96	@ 0x60
 8002dae:	d10f      	bne.n	8002dd0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2241      	movs	r2, #65	@ 0x41
 8002db4:	2120      	movs	r1, #32
 8002db6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2240      	movs	r2, #64	@ 0x40
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff fa2e 	bl	800222a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002dce:	e00a      	b.n	8002de6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff fa1a 	bl	800221a <HAL_I2C_ErrorCallback>
}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d103      	bne.n	8002e0c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2201      	movs	r2, #1
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d007      	beq.n	8002e2a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	619a      	str	r2, [r3, #24]
  }
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b002      	add	sp, #8
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff ff9a 	bl	8002d9c <I2C_TreatErrorCallback>
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	1dfb      	adds	r3, r7, #7
 8002e7e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	e03a      	b.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f8d3 	bl	8003034 <I2C_IsErrorOccurred>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e040      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	d02d      	beq.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7fe f8ae 	bl	8000ffc <HAL_GetTick>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d122      	bne.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	425a      	negs	r2, r3
 8002ec2:	4153      	adcs	r3, r2
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	1dfb      	adds	r3, r7, #7
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d113      	bne.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2241      	movs	r2, #65	@ 0x41
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2242      	movs	r2, #66	@ 0x42
 8002ee8:	2100      	movs	r1, #0
 8002eea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2240      	movs	r2, #64	@ 0x40
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e00f      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	425a      	negs	r2, r3
 8002f08:	4153      	adcs	r3, r2
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d0b5      	beq.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b004      	add	sp, #16
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f2c:	e032      	b.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f87d 	bl	8003034 <I2C_IsErrorOccurred>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e030      	b.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3301      	adds	r3, #1
 8002f46:	d025      	beq.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7fe f858 	bl	8000ffc <HAL_GetTick>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11a      	bne.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2202      	movs	r2, #2
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d013      	beq.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	2220      	movs	r2, #32
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2241      	movs	r2, #65	@ 0x41
 8002f7c:	2120      	movs	r1, #32
 8002f7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2242      	movs	r2, #66	@ 0x42
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2240      	movs	r2, #64	@ 0x40
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d1c5      	bne.n	8002f2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b004      	add	sp, #16
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb8:	e02f      	b.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 f837 	bl	8003034 <I2C_IsErrorOccurred>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e02d      	b.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	f7fe f815 	bl	8000ffc <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11a      	bne.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2220      	movs	r2, #32
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d013      	beq.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2241      	movs	r2, #65	@ 0x41
 8003002:	2120      	movs	r1, #32
 8003004:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2242      	movs	r2, #66	@ 0x42
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2240      	movs	r2, #64	@ 0x40
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2220      	movs	r2, #32
 8003022:	4013      	ands	r3, r2
 8003024:	2b20      	cmp	r3, #32
 8003026:	d1c8      	bne.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2327      	movs	r3, #39	@ 0x27
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2210      	movs	r2, #16
 800305c:	4013      	ands	r3, r2
 800305e:	d100      	bne.n	8003062 <I2C_IsErrorOccurred+0x2e>
 8003060:	e079      	b.n	8003156 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2210      	movs	r2, #16
 8003068:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800306a:	e057      	b.n	800311c <I2C_IsErrorOccurred+0xe8>
 800306c:	2227      	movs	r2, #39	@ 0x27
 800306e:	18bb      	adds	r3, r7, r2
 8003070:	18ba      	adds	r2, r7, r2
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	d04f      	beq.n	800311c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800307c:	f7fd ffbe 	bl	8000ffc <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	d302      	bcc.n	8003092 <I2C_IsErrorOccurred+0x5e>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d144      	bne.n	800311c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	4013      	ands	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030a0:	2013      	movs	r0, #19
 80030a2:	183b      	adds	r3, r7, r0
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	2142      	movs	r1, #66	@ 0x42
 80030a8:	5c52      	ldrb	r2, [r2, r1]
 80030aa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	401a      	ands	r2, r3
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	429a      	cmp	r2, r3
 80030be:	d126      	bne.n	800310e <I2C_IsErrorOccurred+0xda>
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	01db      	lsls	r3, r3, #7
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d021      	beq.n	800310e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80030ca:	183b      	adds	r3, r7, r0
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d01d      	beq.n	800310e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	@ 0x80
 80030de:	01c9      	lsls	r1, r1, #7
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030e4:	f7fd ff8a 	bl	8000ffc <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ec:	e00f      	b.n	800310e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030ee:	f7fd ff85 	bl	8000ffc <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b19      	cmp	r3, #25
 80030fa:	d908      	bls.n	800310e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2220      	movs	r2, #32
 8003100:	4313      	orrs	r3, r2
 8003102:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003104:	2327      	movs	r3, #39	@ 0x27
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]

              break;
 800310c:	e006      	b.n	800311c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2220      	movs	r2, #32
 8003116:	4013      	ands	r3, r2
 8003118:	2b20      	cmp	r3, #32
 800311a:	d1e8      	bne.n	80030ee <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2220      	movs	r2, #32
 8003124:	4013      	ands	r3, r2
 8003126:	2b20      	cmp	r3, #32
 8003128:	d004      	beq.n	8003134 <I2C_IsErrorOccurred+0x100>
 800312a:	2327      	movs	r3, #39	@ 0x27
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d09b      	beq.n	800306c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003134:	2327      	movs	r3, #39	@ 0x27
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2220      	movs	r2, #32
 8003144:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	2204      	movs	r2, #4
 800314a:	4313      	orrs	r3, r2
 800314c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800314e:	2327      	movs	r3, #39	@ 0x27
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4013      	ands	r3, r2
 8003166:	d00c      	beq.n	8003182 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2201      	movs	r2, #1
 800316c:	4313      	orrs	r3, r2
 800316e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2280      	movs	r2, #128	@ 0x80
 8003176:	0052      	lsls	r2, r2, #1
 8003178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800317a:	2327      	movs	r3, #39	@ 0x27
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4013      	ands	r3, r2
 800318a:	d00c      	beq.n	80031a6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	2208      	movs	r2, #8
 8003190:	4313      	orrs	r3, r2
 8003192:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2280      	movs	r2, #128	@ 0x80
 800319a:	00d2      	lsls	r2, r2, #3
 800319c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800319e:	2327      	movs	r3, #39	@ 0x27
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4013      	ands	r3, r2
 80031ae:	d00c      	beq.n	80031ca <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2202      	movs	r2, #2
 80031b4:	4313      	orrs	r3, r2
 80031b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2280      	movs	r2, #128	@ 0x80
 80031be:	0092      	lsls	r2, r2, #2
 80031c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c2:	2327      	movs	r3, #39	@ 0x27
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80031ca:	2327      	movs	r3, #39	@ 0x27
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01d      	beq.n	8003210 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff fe09 	bl	8002dee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	490e      	ldr	r1, [pc, #56]	@ (8003220 <I2C_IsErrorOccurred+0x1ec>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2241      	movs	r2, #65	@ 0x41
 80031fc:	2120      	movs	r1, #32
 80031fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2242      	movs	r2, #66	@ 0x42
 8003204:	2100      	movs	r1, #0
 8003206:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2240      	movs	r2, #64	@ 0x40
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003210:	2327      	movs	r3, #39	@ 0x27
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b00a      	add	sp, #40	@ 0x28
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	fe00e800 	.word	0xfe00e800

08003224 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	0008      	movs	r0, r1
 800322e:	0011      	movs	r1, r2
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	240a      	movs	r4, #10
 8003234:	193b      	adds	r3, r7, r4
 8003236:	1c02      	adds	r2, r0, #0
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	2009      	movs	r0, #9
 800323c:	183b      	adds	r3, r7, r0
 800323e:	1c0a      	adds	r2, r1, #0
 8003240:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003242:	193b      	adds	r3, r7, r4
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	059b      	lsls	r3, r3, #22
 8003248:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800324a:	183b      	adds	r3, r7, r0
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	0419      	lsls	r1, r3, #16
 8003250:	23ff      	movs	r3, #255	@ 0xff
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003256:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	4313      	orrs	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800326e:	0d51      	lsrs	r1, r2, #21
 8003270:	2280      	movs	r2, #128	@ 0x80
 8003272:	00d2      	lsls	r2, r2, #3
 8003274:	400a      	ands	r2, r1
 8003276:	4907      	ldr	r1, [pc, #28]	@ (8003294 <I2C_TransferConfig+0x70>)
 8003278:	430a      	orrs	r2, r1
 800327a:	43d2      	mvns	r2, r2
 800327c:	401a      	ands	r2, r3
 800327e:	0011      	movs	r1, r2
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b007      	add	sp, #28
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	03ff63ff 	.word	0x03ff63ff

08003298 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	000a      	movs	r2, r1
 80032a2:	1cbb      	adds	r3, r7, #2
 80032a4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80032aa:	1cbb      	adds	r3, r7, #2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	d010      	beq.n	80032d6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2242      	movs	r2, #66	@ 0x42
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2241      	movs	r2, #65	@ 0x41
 80032c0:	5c9b      	ldrb	r3, [r3, r2]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	001a      	movs	r2, r3
 80032c6:	2328      	movs	r3, #40	@ 0x28
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b28      	cmp	r3, #40	@ 0x28
 80032cc:	d003      	beq.n	80032d6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	22b0      	movs	r2, #176	@ 0xb0
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032d6:	1cbb      	adds	r3, r7, #2
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	2202      	movs	r2, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	d010      	beq.n	8003302 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2244      	movs	r2, #68	@ 0x44
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2241      	movs	r2, #65	@ 0x41
 80032ec:	5c9b      	ldrb	r3, [r3, r2]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	001a      	movs	r2, r3
 80032f2:	2328      	movs	r3, #40	@ 0x28
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b28      	cmp	r3, #40	@ 0x28
 80032f8:	d003      	beq.n	8003302 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	22b0      	movs	r2, #176	@ 0xb0
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003302:	1cbb      	adds	r3, r7, #2
 8003304:	2200      	movs	r2, #0
 8003306:	5e9b      	ldrsh	r3, [r3, r2]
 8003308:	2b00      	cmp	r3, #0
 800330a:	da03      	bge.n	8003314 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	22b8      	movs	r2, #184	@ 0xb8
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003314:	1cbb      	adds	r3, r7, #2
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d103      	bne.n	8003324 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2290      	movs	r2, #144	@ 0x90
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003324:	1cbb      	adds	r3, r7, #2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	2b20      	cmp	r3, #32
 800332a:	d103      	bne.n	8003334 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003334:	1cbb      	adds	r3, r7, #2
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d103      	bne.n	8003344 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2240      	movs	r2, #64	@ 0x40
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43d9      	mvns	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2241      	movs	r2, #65	@ 0x41
 800336e:	5c9b      	ldrb	r3, [r3, r2]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b20      	cmp	r3, #32
 8003374:	d138      	bne.n	80033e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2240      	movs	r2, #64	@ 0x40
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003380:	2302      	movs	r3, #2
 8003382:	e032      	b.n	80033ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2240      	movs	r2, #64	@ 0x40
 8003388:	2101      	movs	r1, #1
 800338a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2241      	movs	r2, #65	@ 0x41
 8003390:	2124      	movs	r1, #36	@ 0x24
 8003392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	438a      	bics	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4911      	ldr	r1, [pc, #68]	@ (80033f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2241      	movs	r2, #65	@ 0x41
 80033d8:	2120      	movs	r1, #32
 80033da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	2100      	movs	r1, #0
 80033e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	ffffefff 	.word	0xffffefff

080033f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2241      	movs	r2, #65	@ 0x41
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	d139      	bne.n	8003482 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2240      	movs	r2, #64	@ 0x40
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003418:	2302      	movs	r3, #2
 800341a:	e033      	b.n	8003484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2240      	movs	r2, #64	@ 0x40
 8003420:	2101      	movs	r1, #1
 8003422:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2241      	movs	r2, #65	@ 0x41
 8003428:	2124      	movs	r1, #36	@ 0x24
 800342a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a11      	ldr	r2, [pc, #68]	@ (800348c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003448:	4013      	ands	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2101      	movs	r1, #1
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2241      	movs	r2, #65	@ 0x41
 8003472:	2120      	movs	r1, #32
 8003474:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2240      	movs	r2, #64	@ 0x40
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e000      	b.n	8003484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
  }
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bd80      	pop	{r7, pc}
 800348c:	fffff0ff 	.word	0xfffff0ff

08003490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f000 fb76 	bl	8003b90 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	d100      	bne.n	80034b0 <HAL_RCC_OscConfig+0x20>
 80034ae:	e08e      	b.n	80035ce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034b0:	4bc5      	ldr	r3, [pc, #788]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	220c      	movs	r2, #12
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d00e      	beq.n	80034da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034bc:	4bc2      	ldr	r3, [pc, #776]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	220c      	movs	r2, #12
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d117      	bne.n	80034f8 <HAL_RCC_OscConfig+0x68>
 80034c8:	4bbf      	ldr	r3, [pc, #764]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	23c0      	movs	r3, #192	@ 0xc0
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	401a      	ands	r2, r3
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	025b      	lsls	r3, r3, #9
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d10e      	bne.n	80034f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034da:	4bbb      	ldr	r3, [pc, #748]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	029b      	lsls	r3, r3, #10
 80034e2:	4013      	ands	r3, r2
 80034e4:	d100      	bne.n	80034e8 <HAL_RCC_OscConfig+0x58>
 80034e6:	e071      	b.n	80035cc <HAL_RCC_OscConfig+0x13c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d000      	beq.n	80034f2 <HAL_RCC_OscConfig+0x62>
 80034f0:	e06c      	b.n	80035cc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f000 fb4c 	bl	8003b90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x80>
 8003500:	4bb1      	ldr	r3, [pc, #708]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4bb0      	ldr	r3, [pc, #704]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003506:	2180      	movs	r1, #128	@ 0x80
 8003508:	0249      	lsls	r1, r1, #9
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e02f      	b.n	8003570 <HAL_RCC_OscConfig+0xe0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0xa2>
 8003518:	4bab      	ldr	r3, [pc, #684]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4baa      	ldr	r3, [pc, #680]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800351e:	49ab      	ldr	r1, [pc, #684]	@ (80037cc <HAL_RCC_OscConfig+0x33c>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	4ba8      	ldr	r3, [pc, #672]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4ba7      	ldr	r3, [pc, #668]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800352a:	49a9      	ldr	r1, [pc, #676]	@ (80037d0 <HAL_RCC_OscConfig+0x340>)
 800352c:	400a      	ands	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e01e      	b.n	8003570 <HAL_RCC_OscConfig+0xe0>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b05      	cmp	r3, #5
 8003538:	d10e      	bne.n	8003558 <HAL_RCC_OscConfig+0xc8>
 800353a:	4ba3      	ldr	r3, [pc, #652]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4ba2      	ldr	r3, [pc, #648]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	02c9      	lsls	r1, r1, #11
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	4b9f      	ldr	r3, [pc, #636]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b9e      	ldr	r3, [pc, #632]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800354e:	2180      	movs	r1, #128	@ 0x80
 8003550:	0249      	lsls	r1, r1, #9
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xe0>
 8003558:	4b9b      	ldr	r3, [pc, #620]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b9a      	ldr	r3, [pc, #616]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800355e:	499b      	ldr	r1, [pc, #620]	@ (80037cc <HAL_RCC_OscConfig+0x33c>)
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	4b98      	ldr	r3, [pc, #608]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b97      	ldr	r3, [pc, #604]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800356a:	4999      	ldr	r1, [pc, #612]	@ (80037d0 <HAL_RCC_OscConfig+0x340>)
 800356c:	400a      	ands	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d014      	beq.n	80035a2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fd40 	bl	8000ffc <HAL_GetTick>
 800357c:	0003      	movs	r3, r0
 800357e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003582:	f7fd fd3b 	bl	8000ffc <HAL_GetTick>
 8003586:	0002      	movs	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b64      	cmp	r3, #100	@ 0x64
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e2fd      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003594:	4b8c      	ldr	r3, [pc, #560]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2380      	movs	r3, #128	@ 0x80
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	4013      	ands	r3, r2
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0xf2>
 80035a0:	e015      	b.n	80035ce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fd fd2b 	bl	8000ffc <HAL_GetTick>
 80035a6:	0003      	movs	r3, r0
 80035a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fd fd26 	bl	8000ffc <HAL_GetTick>
 80035b0:	0002      	movs	r2, r0
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e2e8      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	4b82      	ldr	r3, [pc, #520]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	029b      	lsls	r3, r3, #10
 80035c6:	4013      	ands	r3, r2
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x11c>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2202      	movs	r2, #2
 80035d4:	4013      	ands	r3, r2
 80035d6:	d100      	bne.n	80035da <HAL_RCC_OscConfig+0x14a>
 80035d8:	e06c      	b.n	80036b4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035da:	4b7b      	ldr	r3, [pc, #492]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	220c      	movs	r2, #12
 80035e0:	4013      	ands	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035e4:	4b78      	ldr	r3, [pc, #480]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	220c      	movs	r2, #12
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d11f      	bne.n	8003630 <HAL_RCC_OscConfig+0x1a0>
 80035f0:	4b75      	ldr	r3, [pc, #468]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	23c0      	movs	r3, #192	@ 0xc0
 80035f6:	025b      	lsls	r3, r3, #9
 80035f8:	401a      	ands	r2, r3
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	429a      	cmp	r2, r3
 8003600:	d116      	bne.n	8003630 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	4b71      	ldr	r3, [pc, #452]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2202      	movs	r2, #2
 8003608:	4013      	ands	r3, r2
 800360a:	d005      	beq.n	8003618 <HAL_RCC_OscConfig+0x188>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e2bb      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b6b      	ldr	r3, [pc, #428]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	22f8      	movs	r2, #248	@ 0xf8
 800361e:	4393      	bics	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00da      	lsls	r2, r3, #3
 8003628:	4b67      	ldr	r3, [pc, #412]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	e041      	b.n	80036b4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d024      	beq.n	8003682 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	4b63      	ldr	r3, [pc, #396]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b62      	ldr	r3, [pc, #392]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800363e:	2101      	movs	r1, #1
 8003640:	430a      	orrs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fcda 	bl	8000ffc <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364e:	f7fd fcd5 	bl	8000ffc <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e297      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	4b59      	ldr	r3, [pc, #356]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2202      	movs	r2, #2
 8003666:	4013      	ands	r3, r2
 8003668:	d0f1      	beq.n	800364e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4b57      	ldr	r3, [pc, #348]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	22f8      	movs	r2, #248	@ 0xf8
 8003670:	4393      	bics	r3, r2
 8003672:	0019      	movs	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00da      	lsls	r2, r3, #3
 800367a:	4b53      	ldr	r3, [pc, #332]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e018      	b.n	80036b4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b51      	ldr	r3, [pc, #324]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b50      	ldr	r3, [pc, #320]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003688:	2101      	movs	r1, #1
 800368a:	438a      	bics	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fd fcb5 	bl	8000ffc <HAL_GetTick>
 8003692:	0003      	movs	r3, r0
 8003694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003698:	f7fd fcb0 	bl	8000ffc <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e272      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2202      	movs	r2, #2
 80036b0:	4013      	ands	r3, r2
 80036b2:	d1f1      	bne.n	8003698 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2208      	movs	r2, #8
 80036ba:	4013      	ands	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d019      	beq.n	80036fa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b40      	ldr	r3, [pc, #256]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80036c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036ca:	4b3f      	ldr	r3, [pc, #252]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80036cc:	2101      	movs	r1, #1
 80036ce:	430a      	orrs	r2, r1
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fd fc93 	bl	8000ffc <HAL_GetTick>
 80036d6:	0003      	movs	r3, r0
 80036d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fd fc8e 	bl	8000ffc <HAL_GetTick>
 80036e0:	0002      	movs	r2, r0
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e250      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	2202      	movs	r2, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	d0f1      	beq.n	80036dc <HAL_RCC_OscConfig+0x24c>
 80036f8:	e018      	b.n	800372c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fa:	4b33      	ldr	r3, [pc, #204]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80036fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036fe:	4b32      	ldr	r3, [pc, #200]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003700:	2101      	movs	r1, #1
 8003702:	438a      	bics	r2, r1
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fd fc79 	bl	8000ffc <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003710:	f7fd fc74 	bl	8000ffc <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e236      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003722:	4b29      	ldr	r3, [pc, #164]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	2202      	movs	r2, #2
 8003728:	4013      	ands	r3, r2
 800372a:	d1f1      	bne.n	8003710 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2204      	movs	r2, #4
 8003732:	4013      	ands	r3, r2
 8003734:	d100      	bne.n	8003738 <HAL_RCC_OscConfig+0x2a8>
 8003736:	e0b5      	b.n	80038a4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003738:	201f      	movs	r0, #31
 800373a:	183b      	adds	r3, r7, r0
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003740:	4b21      	ldr	r3, [pc, #132]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	055b      	lsls	r3, r3, #21
 8003748:	4013      	ands	r3, r2
 800374a:	d110      	bne.n	800376e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 8003752:	2180      	movs	r1, #128	@ 0x80
 8003754:	0549      	lsls	r1, r1, #21
 8003756:	430a      	orrs	r2, r1
 8003758:	61da      	str	r2, [r3, #28]
 800375a:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	055b      	lsls	r3, r3, #21
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003768:	183b      	adds	r3, r7, r0
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b19      	ldr	r3, [pc, #100]	@ (80037d4 <HAL_RCC_OscConfig+0x344>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4013      	ands	r3, r2
 8003778:	d11a      	bne.n	80037b0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <HAL_RCC_OscConfig+0x344>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <HAL_RCC_OscConfig+0x344>)
 8003780:	2180      	movs	r1, #128	@ 0x80
 8003782:	0049      	lsls	r1, r1, #1
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003788:	f7fd fc38 	bl	8000ffc <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fd fc33 	bl	8000ffc <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	@ 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1f5      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <HAL_RCC_OscConfig+0x344>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d10f      	bne.n	80037d8 <HAL_RCC_OscConfig+0x348>
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	4b02      	ldr	r3, [pc, #8]	@ (80037c8 <HAL_RCC_OscConfig+0x338>)
 80037be:	2101      	movs	r1, #1
 80037c0:	430a      	orrs	r2, r1
 80037c2:	621a      	str	r2, [r3, #32]
 80037c4:	e036      	b.n	8003834 <HAL_RCC_OscConfig+0x3a4>
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	40021000 	.word	0x40021000
 80037cc:	fffeffff 	.word	0xfffeffff
 80037d0:	fffbffff 	.word	0xfffbffff
 80037d4:	40007000 	.word	0x40007000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10c      	bne.n	80037fa <HAL_RCC_OscConfig+0x36a>
 80037e0:	4bca      	ldr	r3, [pc, #808]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	4bc9      	ldr	r3, [pc, #804]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80037e6:	2101      	movs	r1, #1
 80037e8:	438a      	bics	r2, r1
 80037ea:	621a      	str	r2, [r3, #32]
 80037ec:	4bc7      	ldr	r3, [pc, #796]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80037ee:	6a1a      	ldr	r2, [r3, #32]
 80037f0:	4bc6      	ldr	r3, [pc, #792]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80037f2:	2104      	movs	r1, #4
 80037f4:	438a      	bics	r2, r1
 80037f6:	621a      	str	r2, [r3, #32]
 80037f8:	e01c      	b.n	8003834 <HAL_RCC_OscConfig+0x3a4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x38c>
 8003802:	4bc2      	ldr	r3, [pc, #776]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	4bc1      	ldr	r3, [pc, #772]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003808:	2104      	movs	r1, #4
 800380a:	430a      	orrs	r2, r1
 800380c:	621a      	str	r2, [r3, #32]
 800380e:	4bbf      	ldr	r3, [pc, #764]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	4bbe      	ldr	r3, [pc, #760]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003814:	2101      	movs	r1, #1
 8003816:	430a      	orrs	r2, r1
 8003818:	621a      	str	r2, [r3, #32]
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0x3a4>
 800381c:	4bbb      	ldr	r3, [pc, #748]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	4bba      	ldr	r3, [pc, #744]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003822:	2101      	movs	r1, #1
 8003824:	438a      	bics	r2, r1
 8003826:	621a      	str	r2, [r3, #32]
 8003828:	4bb8      	ldr	r3, [pc, #736]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800382a:	6a1a      	ldr	r2, [r3, #32]
 800382c:	4bb7      	ldr	r3, [pc, #732]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800382e:	2104      	movs	r1, #4
 8003830:	438a      	bics	r2, r1
 8003832:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d014      	beq.n	8003866 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383c:	f7fd fbde 	bl	8000ffc <HAL_GetTick>
 8003840:	0003      	movs	r3, r0
 8003842:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	e009      	b.n	800385a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd fbd9 	bl	8000ffc <HAL_GetTick>
 800384a:	0002      	movs	r2, r0
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	4aaf      	ldr	r2, [pc, #700]	@ (8003b10 <HAL_RCC_OscConfig+0x680>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e19a      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	4bac      	ldr	r3, [pc, #688]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2202      	movs	r2, #2
 8003860:	4013      	ands	r3, r2
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x3b6>
 8003864:	e013      	b.n	800388e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fd fbc9 	bl	8000ffc <HAL_GetTick>
 800386a:	0003      	movs	r3, r0
 800386c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	e009      	b.n	8003884 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fd fbc4 	bl	8000ffc <HAL_GetTick>
 8003874:	0002      	movs	r2, r0
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	4aa5      	ldr	r2, [pc, #660]	@ (8003b10 <HAL_RCC_OscConfig+0x680>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e185      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	4ba1      	ldr	r3, [pc, #644]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	2202      	movs	r2, #2
 800388a:	4013      	ands	r3, r2
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800388e:	231f      	movs	r3, #31
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b9c      	ldr	r3, [pc, #624]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	4b9b      	ldr	r3, [pc, #620]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800389e:	499d      	ldr	r1, [pc, #628]	@ (8003b14 <HAL_RCC_OscConfig+0x684>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	4013      	ands	r3, r2
 80038ac:	d063      	beq.n	8003976 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d12a      	bne.n	800390c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038b6:	4b95      	ldr	r3, [pc, #596]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80038b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ba:	4b94      	ldr	r3, [pc, #592]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80038bc:	2104      	movs	r1, #4
 80038be:	430a      	orrs	r2, r1
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80038c2:	4b92      	ldr	r3, [pc, #584]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80038c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c6:	4b91      	ldr	r3, [pc, #580]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80038c8:	2101      	movs	r1, #1
 80038ca:	430a      	orrs	r2, r1
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fd fb95 	bl	8000ffc <HAL_GetTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038d8:	f7fd fb90 	bl	8000ffc <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e152      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038ea:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80038ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ee:	2202      	movs	r2, #2
 80038f0:	4013      	ands	r3, r2
 80038f2:	d0f1      	beq.n	80038d8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038f4:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80038f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f8:	22f8      	movs	r2, #248	@ 0xf8
 80038fa:	4393      	bics	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	00da      	lsls	r2, r3, #3
 8003904:	4b81      	ldr	r3, [pc, #516]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003906:	430a      	orrs	r2, r1
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34
 800390a:	e034      	b.n	8003976 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	3305      	adds	r3, #5
 8003912:	d111      	bne.n	8003938 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003914:	4b7d      	ldr	r3, [pc, #500]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003918:	4b7c      	ldr	r3, [pc, #496]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800391a:	2104      	movs	r1, #4
 800391c:	438a      	bics	r2, r1
 800391e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003920:	4b7a      	ldr	r3, [pc, #488]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003924:	22f8      	movs	r2, #248	@ 0xf8
 8003926:	4393      	bics	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	00da      	lsls	r2, r3, #3
 8003930:	4b76      	ldr	r3, [pc, #472]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003932:	430a      	orrs	r2, r1
 8003934:	635a      	str	r2, [r3, #52]	@ 0x34
 8003936:	e01e      	b.n	8003976 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003938:	4b74      	ldr	r3, [pc, #464]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800393a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800393c:	4b73      	ldr	r3, [pc, #460]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800393e:	2104      	movs	r1, #4
 8003940:	430a      	orrs	r2, r1
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003944:	4b71      	ldr	r3, [pc, #452]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003948:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800394a:	2101      	movs	r1, #1
 800394c:	438a      	bics	r2, r1
 800394e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fd fb54 	bl	8000ffc <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800395a:	f7fd fb4f 	bl	8000ffc <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e111      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800396c:	4b67      	ldr	r3, [pc, #412]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800396e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003970:	2202      	movs	r2, #2
 8003972:	4013      	ands	r3, r2
 8003974:	d1f1      	bne.n	800395a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2220      	movs	r2, #32
 800397c:	4013      	ands	r3, r2
 800397e:	d05c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003980:	4b62      	ldr	r3, [pc, #392]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	220c      	movs	r2, #12
 8003986:	4013      	ands	r3, r2
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d00e      	beq.n	80039aa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800398c:	4b5f      	ldr	r3, [pc, #380]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	220c      	movs	r2, #12
 8003992:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003994:	2b08      	cmp	r3, #8
 8003996:	d114      	bne.n	80039c2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003998:	4b5c      	ldr	r3, [pc, #368]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	23c0      	movs	r3, #192	@ 0xc0
 800399e:	025b      	lsls	r3, r3, #9
 80039a0:	401a      	ands	r2, r3
 80039a2:	23c0      	movs	r3, #192	@ 0xc0
 80039a4:	025b      	lsls	r3, r3, #9
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d10b      	bne.n	80039c2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80039aa:	4b58      	ldr	r3, [pc, #352]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80039ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	029b      	lsls	r3, r3, #10
 80039b2:	4013      	ands	r3, r2
 80039b4:	d040      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5a8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d03c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0e6      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01b      	beq.n	8003a02 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80039ca:	4b50      	ldr	r3, [pc, #320]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80039cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ce:	4b4f      	ldr	r3, [pc, #316]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80039d0:	2180      	movs	r1, #128	@ 0x80
 80039d2:	0249      	lsls	r1, r1, #9
 80039d4:	430a      	orrs	r2, r1
 80039d6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fd fb10 	bl	8000ffc <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e2:	f7fd fb0b 	bl	8000ffc <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0cd      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039f4:	4b45      	ldr	r3, [pc, #276]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 80039f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	029b      	lsls	r3, r3, #10
 80039fc:	4013      	ands	r3, r2
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x552>
 8003a00:	e01b      	b.n	8003a3a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003a02:	4b42      	ldr	r3, [pc, #264]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a06:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a08:	4943      	ldr	r1, [pc, #268]	@ (8003b18 <HAL_RCC_OscConfig+0x688>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fd faf5 	bl	8000ffc <HAL_GetTick>
 8003a12:	0003      	movs	r3, r0
 8003a14:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a18:	f7fd faf0 	bl	8000ffc <HAL_GetTick>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0b2      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a2a:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a2e:	2380      	movs	r3, #128	@ 0x80
 8003a30:	029b      	lsls	r3, r3, #10
 8003a32:	4013      	ands	r3, r2
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x588>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a38:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d100      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5b4>
 8003a42:	e0a4      	b.n	8003b8e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a44:	4b31      	ldr	r3, [pc, #196]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	220c      	movs	r2, #12
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d100      	bne.n	8003a52 <HAL_RCC_OscConfig+0x5c2>
 8003a50:	e078      	b.n	8003b44 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d14c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a60:	492e      	ldr	r1, [pc, #184]	@ (8003b1c <HAL_RCC_OscConfig+0x68c>)
 8003a62:	400a      	ands	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fd fac9 	bl	8000ffc <HAL_GetTick>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fac4 	bl	8000ffc <HAL_GetTick>
 8003a74:	0002      	movs	r2, r0
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e086      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a82:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	049b      	lsls	r3, r3, #18
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	220f      	movs	r2, #15
 8003a94:	4393      	bics	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003b20 <HAL_RCC_OscConfig+0x690>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003abc:	4b13      	ldr	r3, [pc, #76]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003ac2:	2180      	movs	r1, #128	@ 0x80
 8003ac4:	0449      	lsls	r1, r1, #17
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fd fa97 	bl	8000ffc <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fa92 	bl	8000ffc <HAL_GetTick>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e054      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	049b      	lsls	r3, r3, #18
 8003aee:	4013      	ands	r3, r2
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x644>
 8003af2:	e04c      	b.n	8003b8e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <HAL_RCC_OscConfig+0x67c>)
 8003afa:	4908      	ldr	r1, [pc, #32]	@ (8003b1c <HAL_RCC_OscConfig+0x68c>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fd fa7c 	bl	8000ffc <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b08:	e015      	b.n	8003b36 <HAL_RCC_OscConfig+0x6a6>
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	00001388 	.word	0x00001388
 8003b14:	efffffff 	.word	0xefffffff
 8003b18:	fffeffff 	.word	0xfffeffff
 8003b1c:	feffffff 	.word	0xfeffffff
 8003b20:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fd fa6a 	bl	8000ffc <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e02c      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b36:	4b18      	ldr	r3, [pc, #96]	@ (8003b98 <HAL_RCC_OscConfig+0x708>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	049b      	lsls	r3, r3, #18
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x694>
 8003b42:	e024      	b.n	8003b8e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e01f      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_RCC_OscConfig+0x708>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b56:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <HAL_RCC_OscConfig+0x708>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	23c0      	movs	r3, #192	@ 0xc0
 8003b60:	025b      	lsls	r3, r3, #9
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d10e      	bne.n	8003b8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	220f      	movs	r2, #15
 8003b70:	401a      	ands	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	23f0      	movs	r3, #240	@ 0xf0
 8003b7e:	039b      	lsls	r3, r3, #14
 8003b80:	401a      	ands	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b008      	add	sp, #32
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000

08003b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0bf      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b61      	ldr	r3, [pc, #388]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d911      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4393      	bics	r3, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	4b5b      	ldr	r3, [pc, #364]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd0:	4b59      	ldr	r3, [pc, #356]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0a6      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d015      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d006      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bf6:	4b51      	ldr	r3, [pc, #324]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	4b50      	ldr	r3, [pc, #320]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003bfc:	21e0      	movs	r1, #224	@ 0xe0
 8003bfe:	00c9      	lsls	r1, r1, #3
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b4d      	ldr	r3, [pc, #308]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	22f0      	movs	r2, #240	@ 0xf0
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	4b4a      	ldr	r3, [pc, #296]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d04c      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b44      	ldr	r3, [pc, #272]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	4013      	ands	r3, r2
 8003c34:	d120      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e07a      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b3e      	ldr	r3, [pc, #248]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	2380      	movs	r3, #128	@ 0x80
 8003c48:	049b      	lsls	r3, r3, #18
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d114      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06e      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c5a:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	029b      	lsls	r3, r3, #10
 8003c62:	4013      	ands	r3, r2
 8003c64:	d108      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e062      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6a:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e05b      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c78:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	4393      	bics	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	4b2d      	ldr	r3, [pc, #180]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd f9b6 	bl	8000ffc <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c94:	e009      	b.n	8003caa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c96:	f7fd f9b1 	bl	8000ffc <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	4a27      	ldr	r2, [pc, #156]	@ (8003d40 <HAL_RCC_ClockConfig+0x1a4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e042      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	220c      	movs	r2, #12
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d1ec      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d211      	bcs.n	8003cee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cdc:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <HAL_RCC_ClockConfig+0x19c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e020      	b.n	8003d30 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a11      	ldr	r2, [pc, #68]	@ (8003d44 <HAL_RCC_ClockConfig+0x1a8>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d0c:	f000 f820 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d10:	0001      	movs	r1, r0
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <HAL_RCC_ClockConfig+0x1a0>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	220f      	movs	r2, #15
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d48 <HAL_RCC_ClockConfig+0x1ac>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	000a      	movs	r2, r1
 8003d22:	40da      	lsrs	r2, r3
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003d26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f7fc fd97 	bl	800085c <HAL_InitTick>
  
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40022000 	.word	0x40022000
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	00001388 	.word	0x00001388
 8003d44:	fffff8ff 	.word	0xfffff8ff
 8003d48:	08006bb8 	.word	0x08006bb8
 8003d4c:	20000000 	.word	0x20000000

08003d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	220c      	movs	r2, #12
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d046      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xb8>
 8003d7a:	d848      	bhi.n	8003e0e <HAL_RCC_GetSysClockFreq+0xbe>
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d002      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x36>
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d003      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x3c>
 8003d84:	e043      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d86:	4b27      	ldr	r3, [pc, #156]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d88:	613b      	str	r3, [r7, #16]
      break;
 8003d8a:	e043      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	0c9b      	lsrs	r3, r3, #18
 8003d90:	220f      	movs	r2, #15
 8003d92:	4013      	ands	r3, r2
 8003d94:	4a24      	ldr	r2, [pc, #144]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d9a:	4b21      	ldr	r3, [pc, #132]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	220f      	movs	r2, #15
 8003da0:	4013      	ands	r3, r2
 8003da2:	4a22      	ldr	r2, [pc, #136]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	23c0      	movs	r3, #192	@ 0xc0
 8003dac:	025b      	lsls	r3, r3, #9
 8003dae:	401a      	ands	r2, r3
 8003db0:	2380      	movs	r3, #128	@ 0x80
 8003db2:	025b      	lsls	r3, r3, #9
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d109      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	481a      	ldr	r0, [pc, #104]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003dbc:	f7fc f9ae 	bl	800011c <__udivsi3>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4353      	muls	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e01a      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	23c0      	movs	r3, #192	@ 0xc0
 8003dd0:	025b      	lsls	r3, r3, #9
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	23c0      	movs	r3, #192	@ 0xc0
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d109      	bne.n	8003df0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	4814      	ldr	r0, [pc, #80]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003de0:	f7fc f99c 	bl	800011c <__udivsi3>
 8003de4:	0003      	movs	r3, r0
 8003de6:	001a      	movs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4353      	muls	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	480c      	ldr	r0, [pc, #48]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003df4:	f7fc f992 	bl	800011c <__udivsi3>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4353      	muls	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	613b      	str	r3, [r7, #16]
      break;
 8003e06:	e005      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003e08:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003e0a:	613b      	str	r3, [r7, #16]
      break;
 8003e0c:	e002      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e0e:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e10:	613b      	str	r3, [r7, #16]
      break;
 8003e12:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e14:	693b      	ldr	r3, [r7, #16]
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b006      	add	sp, #24
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	40021000 	.word	0x40021000
 8003e24:	007a1200 	.word	0x007a1200
 8003e28:	08006bd0 	.word	0x08006bd0
 8003e2c:	08006be0 	.word	0x08006be0
 8003e30:	02dc6c00 	.word	0x02dc6c00

08003e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e38:	4b02      	ldr	r3, [pc, #8]	@ (8003e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	20000000 	.word	0x20000000

08003e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003e4c:	f7ff fff2 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e50:	0001      	movs	r1, r0
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	2207      	movs	r2, #7
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	4a04      	ldr	r2, [pc, #16]	@ (8003e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	40d9      	lsrs	r1, r3
 8003e62:	000b      	movs	r3, r1
}    
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08006bc8 	.word	0x08006bc8

08003e74 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x4c>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x4c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	22f0      	movs	r2, #240	@ 0xf0
 8003e96:	401a      	ands	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003e9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x4c>)
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	23e0      	movs	r3, #224	@ 0xe0
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003eaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <HAL_RCC_GetClockConfig+0x50>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	601a      	str	r2, [r3, #0]
}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b002      	add	sp, #8
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40022000 	.word	0x40022000

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	025b      	lsls	r3, r3, #9
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d100      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003ee4:	e08e      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003ee6:	2017      	movs	r0, #23
 8003ee8:	183b      	adds	r3, r7, r0
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b67      	ldr	r3, [pc, #412]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	055b      	lsls	r3, r3, #21
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d110      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	4b64      	ldr	r3, [pc, #400]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	4b63      	ldr	r3, [pc, #396]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f00:	2180      	movs	r1, #128	@ 0x80
 8003f02:	0549      	lsls	r1, r1, #21
 8003f04:	430a      	orrs	r2, r1
 8003f06:	61da      	str	r2, [r3, #28]
 8003f08:	4b60      	ldr	r3, [pc, #384]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	2380      	movs	r3, #128	@ 0x80
 8003f0e:	055b      	lsls	r3, r3, #21
 8003f10:	4013      	ands	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	183b      	adds	r3, r7, r0
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	d11a      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f28:	4b59      	ldr	r3, [pc, #356]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b58      	ldr	r3, [pc, #352]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f2e:	2180      	movs	r1, #128	@ 0x80
 8003f30:	0049      	lsls	r1, r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fd f861 	bl	8000ffc <HAL_GetTick>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	e008      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f40:	f7fd f85c 	bl	8000ffc <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e097      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	4b4f      	ldr	r3, [pc, #316]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	@ 0x80
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	23c0      	movs	r3, #192	@ 0xc0
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d034      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	23c0      	movs	r3, #192	@ 0xc0
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d02c      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f80:	4b42      	ldr	r3, [pc, #264]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	4a43      	ldr	r2, [pc, #268]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8a:	4b40      	ldr	r3, [pc, #256]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f90:	2180      	movs	r1, #128	@ 0x80
 8003f92:	0249      	lsls	r1, r1, #9
 8003f94:	430a      	orrs	r2, r1
 8003f96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f98:	4b3c      	ldr	r3, [pc, #240]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f9e:	493e      	ldr	r1, [pc, #248]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fa4:	4b39      	ldr	r3, [pc, #228]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fd f823 	bl	8000ffc <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fba:	e009      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fd f81e 	bl	8000ffc <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	4a35      	ldr	r2, [pc, #212]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e058      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fda:	4b2c      	ldr	r3, [pc, #176]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4a2d      	ldr	r2, [pc, #180]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4b28      	ldr	r3, [pc, #160]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fea:	430a      	orrs	r2, r1
 8003fec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fee:	2317      	movs	r3, #23
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff8:	4b24      	ldr	r3, [pc, #144]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	4b23      	ldr	r3, [pc, #140]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ffe:	4928      	ldr	r1, [pc, #160]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004000:	400a      	ands	r2, r1
 8004002:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2201      	movs	r2, #1
 800400a:	4013      	ands	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400e:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	2203      	movs	r2, #3
 8004014:	4393      	bics	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800401e:	430a      	orrs	r2, r1
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2220      	movs	r2, #32
 8004028:	4013      	ands	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402c:	4b17      	ldr	r3, [pc, #92]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	2210      	movs	r2, #16
 8004032:	4393      	bics	r3, r2
 8004034:	0019      	movs	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	4b14      	ldr	r3, [pc, #80]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800403c:	430a      	orrs	r2, r1
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	029b      	lsls	r3, r3, #10
 8004048:	4013      	ands	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	2280      	movs	r2, #128	@ 0x80
 8004052:	4393      	bics	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800405c:	430a      	orrs	r2, r1
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4013      	ands	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800406c:	4b07      	ldr	r3, [pc, #28]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	2240      	movs	r2, #64	@ 0x40
 8004072:	4393      	bics	r3, r2
 8004074:	0019      	movs	r1, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	4b04      	ldr	r3, [pc, #16]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800407c:	430a      	orrs	r2, r1
 800407e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b006      	add	sp, #24
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
 8004094:	fffffcff 	.word	0xfffffcff
 8004098:	fffeffff 	.word	0xfffeffff
 800409c:	00001388 	.word	0x00001388
 80040a0:	efffffff 	.word	0xefffffff

080040a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e042      	b.n	800413c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	223d      	movs	r2, #61	@ 0x3d
 80040ba:	5c9b      	ldrb	r3, [r3, r2]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223c      	movs	r2, #60	@ 0x3c
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 f839 	bl	8004144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	223d      	movs	r2, #61	@ 0x3d
 80040d6:	2102      	movs	r1, #2
 80040d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	0019      	movs	r1, r3
 80040e4:	0010      	movs	r0, r2
 80040e6:	f000 f98f 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2246      	movs	r2, #70	@ 0x46
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	223e      	movs	r2, #62	@ 0x3e
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	223f      	movs	r2, #63	@ 0x3f
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2240      	movs	r2, #64	@ 0x40
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2241      	movs	r2, #65	@ 0x41
 800410e:	2101      	movs	r1, #1
 8004110:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2242      	movs	r2, #66	@ 0x42
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2243      	movs	r2, #67	@ 0x43
 800411e:	2101      	movs	r1, #1
 8004120:	5499      	strb	r1, [r3, r2]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2244      	movs	r2, #68	@ 0x44
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2245      	movs	r2, #69	@ 0x45
 800412e:	2101      	movs	r1, #1
 8004130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223d      	movs	r2, #61	@ 0x3d
 8004136:	2101      	movs	r1, #1
 8004138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800414c:	46c0      	nop			@ (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	b002      	add	sp, #8
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	223d      	movs	r2, #61	@ 0x3d
 8004160:	5c9b      	ldrb	r3, [r3, r2]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d001      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e036      	b.n	80041da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	223d      	movs	r2, #61	@ 0x3d
 8004170:	2102      	movs	r1, #2
 8004172:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2101      	movs	r1, #1
 8004180:	430a      	orrs	r2, r1
 8004182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a16      	ldr	r2, [pc, #88]	@ (80041e4 <HAL_TIM_Base_Start_IT+0x90>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00a      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x50>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	05db      	lsls	r3, r3, #23
 8004196:	429a      	cmp	r2, r3
 8004198:	d004      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x50>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <HAL_TIM_Base_Start_IT+0x94>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d111      	bne.n	80041c8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2207      	movs	r2, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d010      	beq.n	80041d8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2101      	movs	r1, #1
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	e007      	b.n	80041d8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2101      	movs	r1, #1
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400

080041ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2202      	movs	r2, #2
 8004208:	4013      	ands	r3, r2
 800420a:	d021      	beq.n	8004250 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2202      	movs	r2, #2
 8004210:	4013      	ands	r3, r2
 8004212:	d01d      	beq.n	8004250 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2203      	movs	r2, #3
 800421a:	4252      	negs	r2, r2
 800421c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	2203      	movs	r2, #3
 800422c:	4013      	ands	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0018      	movs	r0, r3
 8004234:	f000 f8d0 	bl	80043d8 <HAL_TIM_IC_CaptureCallback>
 8004238:	e007      	b.n	800424a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0018      	movs	r0, r3
 800423e:	f000 f8c3 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 f8cf 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2204      	movs	r2, #4
 8004254:	4013      	ands	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2204      	movs	r2, #4
 800425c:	4013      	ands	r3, r2
 800425e:	d01e      	beq.n	800429e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2205      	movs	r2, #5
 8004266:	4252      	negs	r2, r2
 8004268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	23c0      	movs	r3, #192	@ 0xc0
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4013      	ands	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	0018      	movs	r0, r3
 8004282:	f000 f8a9 	bl	80043d8 <HAL_TIM_IC_CaptureCallback>
 8004286:	e007      	b.n	8004298 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0018      	movs	r0, r3
 800428c:	f000 f89c 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	0018      	movs	r0, r3
 8004294:	f000 f8a8 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2208      	movs	r2, #8
 80042a2:	4013      	ands	r3, r2
 80042a4:	d021      	beq.n	80042ea <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2208      	movs	r2, #8
 80042aa:	4013      	ands	r3, r2
 80042ac:	d01d      	beq.n	80042ea <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2209      	movs	r2, #9
 80042b4:	4252      	negs	r2, r2
 80042b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2204      	movs	r2, #4
 80042bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	2203      	movs	r2, #3
 80042c6:	4013      	ands	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 f883 	bl	80043d8 <HAL_TIM_IC_CaptureCallback>
 80042d2:	e007      	b.n	80042e4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 f876 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 f882 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2210      	movs	r2, #16
 80042ee:	4013      	ands	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2210      	movs	r2, #16
 80042f6:	4013      	ands	r3, r2
 80042f8:	d01e      	beq.n	8004338 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2211      	movs	r2, #17
 8004300:	4252      	negs	r2, r2
 8004302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2208      	movs	r2, #8
 8004308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	23c0      	movs	r3, #192	@ 0xc0
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4013      	ands	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f85c 	bl	80043d8 <HAL_TIM_IC_CaptureCallback>
 8004320:	e007      	b.n	8004332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f000 f84f 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f85b 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2201      	movs	r2, #1
 800433c:	4013      	ands	r3, r2
 800433e:	d00c      	beq.n	800435a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	4013      	ands	r3, r2
 8004346:	d008      	beq.n	800435a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2202      	movs	r2, #2
 800434e:	4252      	negs	r2, r2
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0018      	movs	r0, r3
 8004356:	f7fc fa45 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2280      	movs	r2, #128	@ 0x80
 800435e:	4013      	ands	r3, r2
 8004360:	d00c      	beq.n	800437c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2280      	movs	r2, #128	@ 0x80
 8004366:	4013      	ands	r3, r2
 8004368:	d008      	beq.n	800437c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2281      	movs	r2, #129	@ 0x81
 8004370:	4252      	negs	r2, r2
 8004372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	0018      	movs	r0, r3
 8004378:	f000 f8d2 	bl	8004520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2240      	movs	r2, #64	@ 0x40
 8004380:	4013      	ands	r3, r2
 8004382:	d00c      	beq.n	800439e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	@ 0x40
 8004388:	4013      	ands	r3, r2
 800438a:	d008      	beq.n	800439e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2241      	movs	r2, #65	@ 0x41
 8004392:	4252      	negs	r2, r2
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 f82d 	bl	80043f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2220      	movs	r2, #32
 80043a2:	4013      	ands	r3, r2
 80043a4:	d00c      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	4013      	ands	r3, r2
 80043ac:	d008      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2221      	movs	r2, #33	@ 0x21
 80043b4:	4252      	negs	r2, r2
 80043b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 f8a8 	bl	8004510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b004      	add	sp, #16
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043d0:	46c0      	nop			@ (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a37      	ldr	r2, [pc, #220]	@ (80044f8 <TIM_Base_SetConfig+0xf0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d008      	beq.n	8004432 <TIM_Base_SetConfig+0x2a>
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	05db      	lsls	r3, r3, #23
 8004426:	429a      	cmp	r2, r3
 8004428:	d003      	beq.n	8004432 <TIM_Base_SetConfig+0x2a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a33      	ldr	r2, [pc, #204]	@ (80044fc <TIM_Base_SetConfig+0xf4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d108      	bne.n	8004444 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2270      	movs	r2, #112	@ 0x70
 8004436:	4393      	bics	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <TIM_Base_SetConfig+0xf0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d014      	beq.n	8004476 <TIM_Base_SetConfig+0x6e>
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	05db      	lsls	r3, r3, #23
 8004452:	429a      	cmp	r2, r3
 8004454:	d00f      	beq.n	8004476 <TIM_Base_SetConfig+0x6e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a28      	ldr	r2, [pc, #160]	@ (80044fc <TIM_Base_SetConfig+0xf4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0x6e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <TIM_Base_SetConfig+0xf8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0x6e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a26      	ldr	r2, [pc, #152]	@ (8004504 <TIM_Base_SetConfig+0xfc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0x6e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a25      	ldr	r2, [pc, #148]	@ (8004508 <TIM_Base_SetConfig+0x100>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d108      	bne.n	8004488 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a24      	ldr	r2, [pc, #144]	@ (800450c <TIM_Base_SetConfig+0x104>)
 800447a:	4013      	ands	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2280      	movs	r2, #128	@ 0x80
 800448c:	4393      	bics	r3, r2
 800448e:	001a      	movs	r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a11      	ldr	r2, [pc, #68]	@ (80044f8 <TIM_Base_SetConfig+0xf0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0xbe>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a12      	ldr	r2, [pc, #72]	@ (8004504 <TIM_Base_SetConfig+0xfc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0xbe>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a11      	ldr	r2, [pc, #68]	@ (8004508 <TIM_Base_SetConfig+0x100>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d103      	bne.n	80044ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2201      	movs	r2, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d106      	bne.n	80044ee <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2201      	movs	r2, #1
 80044e6:	4393      	bics	r3, r2
 80044e8:	001a      	movs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]
  }
}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b004      	add	sp, #16
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40000400 	.word	0x40000400
 8004500:	40002000 	.word	0x40002000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800
 800450c:	fffffcff 	.word	0xfffffcff

08004510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004518:	46c0      	nop			@ (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e044      	b.n	80045cc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d107      	bne.n	800455a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2278      	movs	r2, #120	@ 0x78
 800454e:	2100      	movs	r1, #0
 8004550:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0018      	movs	r0, r3
 8004556:	f7fc fb73 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2224      	movs	r2, #36	@ 0x24
 800455e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2101      	movs	r1, #1
 800456c:	438a      	bics	r2, r1
 800456e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	0018      	movs	r0, r3
 800457c:	f000 fdea 	bl	8005154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 fca6 	bl	8004ed4 <UART_SetConfig>
 8004588:	0003      	movs	r3, r0
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e01c      	b.n	80045cc <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	490d      	ldr	r1, [pc, #52]	@ (80045d4 <HAL_UART_Init+0xa4>)
 800459e:	400a      	ands	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	212a      	movs	r1, #42	@ 0x2a
 80045ae:	438a      	bics	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2101      	movs	r1, #1
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0018      	movs	r0, r3
 80045c6:	f000 fe79 	bl	80052bc <UART_CheckIdleState>
 80045ca:	0003      	movs	r3, r0
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b002      	add	sp, #8
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	ffffb7ff 	.word	0xffffb7ff

080045d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d000      	beq.n	80045f2 <HAL_UART_Transmit+0x1a>
 80045f0:	e08c      	b.n	800470c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_UART_Transmit+0x28>
 80045f8:	1dbb      	adds	r3, r7, #6
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e084      	b.n	800470e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	429a      	cmp	r2, r3
 800460e:	d109      	bne.n	8004624 <HAL_UART_Transmit+0x4c>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2201      	movs	r2, #1
 800461c:	4013      	ands	r3, r2
 800461e:	d001      	beq.n	8004624 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e074      	b.n	800470e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2284      	movs	r2, #132	@ 0x84
 8004628:	2100      	movs	r1, #0
 800462a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2221      	movs	r2, #33	@ 0x21
 8004630:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004632:	f7fc fce3 	bl	8000ffc <HAL_GetTick>
 8004636:	0003      	movs	r3, r0
 8004638:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1dba      	adds	r2, r7, #6
 800463e:	2150      	movs	r1, #80	@ 0x50
 8004640:	8812      	ldrh	r2, [r2, #0]
 8004642:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1dba      	adds	r2, r7, #6
 8004648:	2152      	movs	r1, #82	@ 0x52
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	2380      	movs	r3, #128	@ 0x80
 8004654:	015b      	lsls	r3, r3, #5
 8004656:	429a      	cmp	r2, r3
 8004658:	d108      	bne.n	800466c <HAL_UART_Transmit+0x94>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e003      	b.n	8004674 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004674:	e02f      	b.n	80046d6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	0013      	movs	r3, r2
 8004680:	2200      	movs	r2, #0
 8004682:	2180      	movs	r1, #128	@ 0x80
 8004684:	f000 fec2 	bl	800540c <UART_WaitOnFlagUntilTimeout>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d004      	beq.n	8004696 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e03b      	b.n	800470e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	05d2      	lsls	r2, r2, #23
 80046a6:	0dd2      	lsrs	r2, r2, #23
 80046a8:	b292      	uxth	r2, r2
 80046aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	3302      	adds	r3, #2
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e007      	b.n	80046c4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2252      	movs	r2, #82	@ 0x52
 80046c8:	5a9b      	ldrh	r3, [r3, r2]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b299      	uxth	r1, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2252      	movs	r2, #82	@ 0x52
 80046d4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2252      	movs	r2, #82	@ 0x52
 80046da:	5a9b      	ldrh	r3, [r3, r2]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1c9      	bne.n	8004676 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	0013      	movs	r3, r2
 80046ec:	2200      	movs	r2, #0
 80046ee:	2140      	movs	r1, #64	@ 0x40
 80046f0:	f000 fe8c 	bl	800540c <UART_WaitOnFlagUntilTimeout>
 80046f4:	1e03      	subs	r3, r0, #0
 80046f6:	d004      	beq.n	8004702 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e005      	b.n	800470e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b008      	add	sp, #32
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b088      	sub	sp, #32
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	1dbb      	adds	r3, r7, #6
 8004722:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2280      	movs	r2, #128	@ 0x80
 8004728:	589b      	ldr	r3, [r3, r2]
 800472a:	2b20      	cmp	r3, #32
 800472c:	d145      	bne.n	80047ba <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_UART_Receive_DMA+0x26>
 8004734:	1dbb      	adds	r3, r7, #6
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e03d      	b.n	80047bc <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	2380      	movs	r3, #128	@ 0x80
 8004746:	015b      	lsls	r3, r3, #5
 8004748:	429a      	cmp	r2, r3
 800474a:	d109      	bne.n	8004760 <HAL_UART_Receive_DMA+0x4a>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2201      	movs	r2, #1
 8004758:	4013      	ands	r3, r2
 800475a:	d001      	beq.n	8004760 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e02d      	b.n	80047bc <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	2380      	movs	r3, #128	@ 0x80
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	4013      	ands	r3, r2
 8004772:	d019      	beq.n	80047a8 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004774:	f3ef 8310 	mrs	r3, PRIMASK
 8004778:	613b      	str	r3, [r7, #16]
  return(result);
 800477a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	2301      	movs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f383 8810 	msr	PRIMASK, r3
}
 8004788:	46c0      	nop			@ (mov r8, r8)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2180      	movs	r1, #128	@ 0x80
 8004796:	04c9      	lsls	r1, r1, #19
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047a8:	1dbb      	adds	r3, r7, #6
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 fe9b 	bl	80054ec <UART_Start_Receive_DMA>
 80047b6:	0003      	movs	r3, r0
 80047b8:	e000      	b.n	80047bc <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b008      	add	sp, #32
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	@ 0x30
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2280      	movs	r2, #128	@ 0x80
 80047d6:	589b      	ldr	r3, [r3, r2]
 80047d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b80      	cmp	r3, #128	@ 0x80
 80047e6:	d138      	bne.n	800485a <HAL_UART_DMAStop+0x96>
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	2b21      	cmp	r3, #33	@ 0x21
 80047ec:	d135      	bne.n	800485a <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ee:	f3ef 8310 	mrs	r3, PRIMASK
 80047f2:	617b      	str	r3, [r7, #20]
  return(result);
 80047f4:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f8:	2301      	movs	r3, #1
 80047fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	f383 8810 	msr	PRIMASK, r3
}
 8004802:	46c0      	nop			@ (mov r8, r8)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2180      	movs	r1, #128	@ 0x80
 8004810:	438a      	bics	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	2b00      	cmp	r3, #0
 8004826:	d014      	beq.n	8004852 <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	0018      	movs	r0, r3
 800482e:	f7fc fd6f 	bl	8001310 <HAL_DMA_Abort>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d00d      	beq.n	8004852 <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	0018      	movs	r0, r3
 800483c:	f7fc fe93 	bl	8001566 <HAL_DMA_GetError>
 8004840:	0003      	movs	r3, r0
 8004842:	2b20      	cmp	r3, #32
 8004844:	d105      	bne.n	8004852 <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2284      	movs	r2, #132	@ 0x84
 800484a:	2110      	movs	r1, #16
 800484c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e044      	b.n	80048dc <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f000 fee9 	bl	800562c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2240      	movs	r2, #64	@ 0x40
 8004862:	4013      	ands	r3, r2
 8004864:	2b40      	cmp	r3, #64	@ 0x40
 8004866:	d138      	bne.n	80048da <HAL_UART_DMAStop+0x116>
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	2b22      	cmp	r3, #34	@ 0x22
 800486c:	d135      	bne.n	80048da <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486e:	f3ef 8310 	mrs	r3, PRIMASK
 8004872:	60bb      	str	r3, [r7, #8]
  return(result);
 8004874:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	2301      	movs	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f383 8810 	msr	PRIMASK, r3
}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2140      	movs	r1, #64	@ 0x40
 8004890:	438a      	bics	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d014      	beq.n	80048d2 <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7fc fd2f 	bl	8001310 <HAL_DMA_Abort>
 80048b2:	1e03      	subs	r3, r0, #0
 80048b4:	d00d      	beq.n	80048d2 <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	0018      	movs	r0, r3
 80048bc:	f7fc fe53 	bl	8001566 <HAL_DMA_GetError>
 80048c0:	0003      	movs	r3, r0
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d105      	bne.n	80048d2 <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2284      	movs	r2, #132	@ 0x84
 80048ca:	2110      	movs	r1, #16
 80048cc:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e004      	b.n	80048dc <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 fecd 	bl	8005674 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b00c      	add	sp, #48	@ 0x30
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b0ab      	sub	sp, #172	@ 0xac
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	22a4      	movs	r2, #164	@ 0xa4
 80048f4:	18b9      	adds	r1, r7, r2
 80048f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	20a0      	movs	r0, #160	@ 0xa0
 8004900:	1839      	adds	r1, r7, r0
 8004902:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	219c      	movs	r1, #156	@ 0x9c
 800490c:	1879      	adds	r1, r7, r1
 800490e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004910:	0011      	movs	r1, r2
 8004912:	18bb      	adds	r3, r7, r2
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a99      	ldr	r2, [pc, #612]	@ (8004b7c <HAL_UART_IRQHandler+0x298>)
 8004918:	4013      	ands	r3, r2
 800491a:	2298      	movs	r2, #152	@ 0x98
 800491c:	18bc      	adds	r4, r7, r2
 800491e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004920:	18bb      	adds	r3, r7, r2
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d114      	bne.n	8004952 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004928:	187b      	adds	r3, r7, r1
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	4013      	ands	r3, r2
 8004930:	d00f      	beq.n	8004952 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004932:	183b      	adds	r3, r7, r0
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2220      	movs	r2, #32
 8004938:	4013      	ands	r3, r2
 800493a:	d00a      	beq.n	8004952 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004940:	2b00      	cmp	r3, #0
 8004942:	d100      	bne.n	8004946 <HAL_UART_IRQHandler+0x62>
 8004944:	e29e      	b.n	8004e84 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	0010      	movs	r0, r2
 800494e:	4798      	blx	r3
      }
      return;
 8004950:	e298      	b.n	8004e84 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004952:	2398      	movs	r3, #152	@ 0x98
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d100      	bne.n	800495e <HAL_UART_IRQHandler+0x7a>
 800495c:	e114      	b.n	8004b88 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800495e:	239c      	movs	r3, #156	@ 0x9c
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	4013      	ands	r3, r2
 8004968:	d106      	bne.n	8004978 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800496a:	23a0      	movs	r3, #160	@ 0xa0
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a83      	ldr	r2, [pc, #524]	@ (8004b80 <HAL_UART_IRQHandler+0x29c>)
 8004972:	4013      	ands	r3, r2
 8004974:	d100      	bne.n	8004978 <HAL_UART_IRQHandler+0x94>
 8004976:	e107      	b.n	8004b88 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004978:	23a4      	movs	r3, #164	@ 0xa4
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2201      	movs	r2, #1
 8004980:	4013      	ands	r3, r2
 8004982:	d012      	beq.n	80049aa <HAL_UART_IRQHandler+0xc6>
 8004984:	23a0      	movs	r3, #160	@ 0xa0
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4013      	ands	r3, r2
 8004990:	d00b      	beq.n	80049aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2201      	movs	r2, #1
 8004998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2284      	movs	r2, #132	@ 0x84
 800499e:	589b      	ldr	r3, [r3, r2]
 80049a0:	2201      	movs	r2, #1
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2184      	movs	r1, #132	@ 0x84
 80049a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049aa:	23a4      	movs	r3, #164	@ 0xa4
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2202      	movs	r2, #2
 80049b2:	4013      	ands	r3, r2
 80049b4:	d011      	beq.n	80049da <HAL_UART_IRQHandler+0xf6>
 80049b6:	239c      	movs	r3, #156	@ 0x9c
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2201      	movs	r2, #1
 80049be:	4013      	ands	r3, r2
 80049c0:	d00b      	beq.n	80049da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2202      	movs	r2, #2
 80049c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2284      	movs	r2, #132	@ 0x84
 80049ce:	589b      	ldr	r3, [r3, r2]
 80049d0:	2204      	movs	r2, #4
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2184      	movs	r1, #132	@ 0x84
 80049d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049da:	23a4      	movs	r3, #164	@ 0xa4
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2204      	movs	r2, #4
 80049e2:	4013      	ands	r3, r2
 80049e4:	d011      	beq.n	8004a0a <HAL_UART_IRQHandler+0x126>
 80049e6:	239c      	movs	r3, #156	@ 0x9c
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2204      	movs	r2, #4
 80049f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2284      	movs	r2, #132	@ 0x84
 80049fe:	589b      	ldr	r3, [r3, r2]
 8004a00:	2202      	movs	r2, #2
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2184      	movs	r1, #132	@ 0x84
 8004a08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a0a:	23a4      	movs	r3, #164	@ 0xa4
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2208      	movs	r2, #8
 8004a12:	4013      	ands	r3, r2
 8004a14:	d017      	beq.n	8004a46 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a16:	23a0      	movs	r3, #160	@ 0xa0
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d105      	bne.n	8004a2e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a22:	239c      	movs	r3, #156	@ 0x9c
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a2c:	d00b      	beq.n	8004a46 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2208      	movs	r2, #8
 8004a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2284      	movs	r2, #132	@ 0x84
 8004a3a:	589b      	ldr	r3, [r3, r2]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2184      	movs	r1, #132	@ 0x84
 8004a44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a46:	23a4      	movs	r3, #164	@ 0xa4
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	4013      	ands	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_UART_IRQHandler+0x198>
 8004a54:	23a0      	movs	r3, #160	@ 0xa0
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	2380      	movs	r3, #128	@ 0x80
 8004a5c:	04db      	lsls	r3, r3, #19
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d00c      	beq.n	8004a7c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2280      	movs	r2, #128	@ 0x80
 8004a68:	0112      	lsls	r2, r2, #4
 8004a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2284      	movs	r2, #132	@ 0x84
 8004a70:	589b      	ldr	r3, [r3, r2]
 8004a72:	2220      	movs	r2, #32
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2184      	movs	r1, #132	@ 0x84
 8004a7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2284      	movs	r2, #132	@ 0x84
 8004a80:	589b      	ldr	r3, [r3, r2]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d100      	bne.n	8004a88 <HAL_UART_IRQHandler+0x1a4>
 8004a86:	e1ff      	b.n	8004e88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a88:	23a4      	movs	r3, #164	@ 0xa4
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	4013      	ands	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a94:	23a0      	movs	r3, #160	@ 0xa0
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d008      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	0010      	movs	r0, r2
 8004ab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2284      	movs	r2, #132	@ 0x84
 8004ab6:	589b      	ldr	r3, [r3, r2]
 8004ab8:	2194      	movs	r1, #148	@ 0x94
 8004aba:	187a      	adds	r2, r7, r1
 8004abc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2240      	movs	r2, #64	@ 0x40
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b40      	cmp	r3, #64	@ 0x40
 8004aca:	d004      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004acc:	187b      	adds	r3, r7, r1
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2228      	movs	r2, #40	@ 0x28
 8004ad2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ad4:	d047      	beq.n	8004b66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 fdcb 	bl	8005674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2240      	movs	r2, #64	@ 0x40
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b40      	cmp	r3, #64	@ 0x40
 8004aea:	d137      	bne.n	8004b5c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aec:	f3ef 8310 	mrs	r3, PRIMASK
 8004af0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af4:	2090      	movs	r0, #144	@ 0x90
 8004af6:	183a      	adds	r2, r7, r0
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	2301      	movs	r3, #1
 8004afc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b00:	f383 8810 	msr	PRIMASK, r3
}
 8004b04:	46c0      	nop			@ (mov r8, r8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2140      	movs	r1, #64	@ 0x40
 8004b12:	438a      	bics	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]
 8004b16:	183b      	adds	r3, r7, r0
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b1e:	f383 8810 	msr	PRIMASK, r3
}
 8004b22:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d012      	beq.n	8004b52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b30:	4a14      	ldr	r2, [pc, #80]	@ (8004b84 <HAL_UART_IRQHandler+0x2a0>)
 8004b32:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7fc fc21 	bl	8001380 <HAL_DMA_Abort_IT>
 8004b3e:	1e03      	subs	r3, r0, #0
 8004b40:	d01a      	beq.n	8004b78 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	e012      	b.n	8004b78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 f9b5 	bl	8004ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5a:	e00d      	b.n	8004b78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 f9b0 	bl	8004ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e008      	b.n	8004b78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 f9ab 	bl	8004ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2284      	movs	r2, #132	@ 0x84
 8004b72:	2100      	movs	r1, #0
 8004b74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b76:	e187      	b.n	8004e88 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	46c0      	nop			@ (mov r8, r8)
    return;
 8004b7a:	e185      	b.n	8004e88 <HAL_UART_IRQHandler+0x5a4>
 8004b7c:	0000080f 	.word	0x0000080f
 8004b80:	04000120 	.word	0x04000120
 8004b84:	0800592f 	.word	0x0800592f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d000      	beq.n	8004b92 <HAL_UART_IRQHandler+0x2ae>
 8004b90:	e139      	b.n	8004e06 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b92:	23a4      	movs	r3, #164	@ 0xa4
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2210      	movs	r2, #16
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d100      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x2bc>
 8004b9e:	e132      	b.n	8004e06 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ba0:	23a0      	movs	r3, #160	@ 0xa0
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d100      	bne.n	8004bae <HAL_UART_IRQHandler+0x2ca>
 8004bac:	e12b      	b.n	8004e06 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2240      	movs	r2, #64	@ 0x40
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	d000      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x2e2>
 8004bc4:	e09f      	b.n	8004d06 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	217e      	movs	r1, #126	@ 0x7e
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d100      	bne.n	8004bde <HAL_UART_IRQHandler+0x2fa>
 8004bdc:	e156      	b.n	8004e8c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2258      	movs	r2, #88	@ 0x58
 8004be2:	5a9b      	ldrh	r3, [r3, r2]
 8004be4:	187a      	adds	r2, r7, r1
 8004be6:	8812      	ldrh	r2, [r2, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d300      	bcc.n	8004bee <HAL_UART_IRQHandler+0x30a>
 8004bec:	e14e      	b.n	8004e8c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	187a      	adds	r2, r7, r1
 8004bf2:	215a      	movs	r1, #90	@ 0x5a
 8004bf4:	8812      	ldrh	r2, [r2, #0]
 8004bf6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d06f      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c02:	f3ef 8310 	mrs	r3, PRIMASK
 8004c06:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	f383 8810 	msr	PRIMASK, r3
}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	499e      	ldr	r1, [pc, #632]	@ (8004e9c <HAL_UART_IRQHandler+0x5b8>)
 8004c24:	400a      	ands	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2e:	f383 8810 	msr	PRIMASK, r3
}
 8004c32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c34:	f3ef 8310 	mrs	r3, PRIMASK
 8004c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c3e:	2301      	movs	r3, #1
 8004c40:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2101      	movs	r1, #1
 8004c56:	438a      	bics	r2, r1
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c60:	f383 8810 	msr	PRIMASK, r3
}
 8004c64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c70:	2301      	movs	r3, #1
 8004c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2140      	movs	r1, #64	@ 0x40
 8004c88:	438a      	bics	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c8e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2280      	movs	r2, #128	@ 0x80
 8004c9c:	2120      	movs	r1, #32
 8004c9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8004caa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb6:	f383 8810 	msr	PRIMASK, r3
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2110      	movs	r1, #16
 8004cc8:	438a      	bics	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd2:	f383 8810 	msr	PRIMASK, r3
}
 8004cd6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7fc fb17 	bl	8001310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2258      	movs	r2, #88	@ 0x58
 8004cec:	5a9a      	ldrh	r2, [r3, r2]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	215a      	movs	r1, #90	@ 0x5a
 8004cf2:	5a5b      	ldrh	r3, [r3, r1]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7fb fc28 	bl	8000554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d04:	e0c2      	b.n	8004e8c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2258      	movs	r2, #88	@ 0x58
 8004d0a:	5a99      	ldrh	r1, [r3, r2]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	225a      	movs	r2, #90	@ 0x5a
 8004d10:	5a9b      	ldrh	r3, [r3, r2]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	208e      	movs	r0, #142	@ 0x8e
 8004d16:	183b      	adds	r3, r7, r0
 8004d18:	1a8a      	subs	r2, r1, r2
 8004d1a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	225a      	movs	r2, #90	@ 0x5a
 8004d20:	5a9b      	ldrh	r3, [r3, r2]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d100      	bne.n	8004d2a <HAL_UART_IRQHandler+0x446>
 8004d28:	e0b2      	b.n	8004e90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004d2a:	183b      	adds	r3, r7, r0
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d100      	bne.n	8004d34 <HAL_UART_IRQHandler+0x450>
 8004d32:	e0ad      	b.n	8004e90 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d34:	f3ef 8310 	mrs	r3, PRIMASK
 8004d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3c:	2488      	movs	r4, #136	@ 0x88
 8004d3e:	193a      	adds	r2, r7, r4
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	2301      	movs	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			@ (mov r8, r8)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4951      	ldr	r1, [pc, #324]	@ (8004ea0 <HAL_UART_IRQHandler+0x5bc>)
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	193b      	adds	r3, r7, r4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f383 8810 	msr	PRIMASK, r3
}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d70:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d72:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d74:	2484      	movs	r4, #132	@ 0x84
 8004d76:	193a      	adds	r2, r7, r4
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			@ (mov r8, r8)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	438a      	bics	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	193b      	adds	r3, r7, r4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	f383 8810 	msr	PRIMASK, r3
}
 8004da2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2280      	movs	r2, #128	@ 0x80
 8004da8:	2120      	movs	r1, #32
 8004daa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc0:	2480      	movs	r4, #128	@ 0x80
 8004dc2:	193a      	adds	r2, r7, r4
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	f383 8810 	msr	PRIMASK, r3
}
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2110      	movs	r1, #16
 8004dde:	438a      	bics	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	193b      	adds	r3, r7, r4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dea:	f383 8810 	msr	PRIMASK, r3
}
 8004dee:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004df6:	183b      	adds	r3, r7, r0
 8004df8:	881a      	ldrh	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7fb fba8 	bl	8000554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e04:	e044      	b.n	8004e90 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e06:	23a4      	movs	r3, #164	@ 0xa4
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	035b      	lsls	r3, r3, #13
 8004e10:	4013      	ands	r3, r2
 8004e12:	d010      	beq.n	8004e36 <HAL_UART_IRQHandler+0x552>
 8004e14:	239c      	movs	r3, #156	@ 0x9c
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	03db      	lsls	r3, r3, #15
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2280      	movs	r2, #128	@ 0x80
 8004e28:	0352      	lsls	r2, r2, #13
 8004e2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fdbf 	bl	80059b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e34:	e02f      	b.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e36:	23a4      	movs	r3, #164	@ 0xa4
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2280      	movs	r2, #128	@ 0x80
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e42:	23a0      	movs	r3, #160	@ 0xa0
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2280      	movs	r2, #128	@ 0x80
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01e      	beq.n	8004e94 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	4798      	blx	r3
    }
    return;
 8004e60:	e018      	b.n	8004e94 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e62:	23a4      	movs	r3, #164	@ 0xa4
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2240      	movs	r2, #64	@ 0x40
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
 8004e6e:	23a0      	movs	r3, #160	@ 0xa0
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2240      	movs	r2, #64	@ 0x40
 8004e76:	4013      	ands	r3, r2
 8004e78:	d00d      	beq.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f000 fd6d 	bl	800595c <UART_EndTransmit_IT>
    return;
 8004e82:	e008      	b.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004e84:	46c0      	nop			@ (mov r8, r8)
 8004e86:	e006      	b.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004e88:	46c0      	nop			@ (mov r8, r8)
 8004e8a:	e004      	b.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004e8c:	46c0      	nop			@ (mov r8, r8)
 8004e8e:	e002      	b.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004e90:	46c0      	nop			@ (mov r8, r8)
 8004e92:	e000      	b.n	8004e96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004e94:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b02b      	add	sp, #172	@ 0xac
 8004e9a:	bd90      	pop	{r4, r7, pc}
 8004e9c:	fffffeff 	.word	0xfffffeff
 8004ea0:	fffffedf 	.word	0xfffffedf

08004ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004edc:	231e      	movs	r3, #30
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a8d      	ldr	r2, [pc, #564]	@ (8005138 <UART_SetConfig+0x264>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	0019      	movs	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a88      	ldr	r2, [pc, #544]	@ (800513c <UART_SetConfig+0x268>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a7f      	ldr	r2, [pc, #508]	@ (8005140 <UART_SetConfig+0x26c>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a7b      	ldr	r2, [pc, #492]	@ (8005144 <UART_SetConfig+0x270>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d127      	bne.n	8004faa <UART_SetConfig+0xd6>
 8004f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8005148 <UART_SetConfig+0x274>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	2203      	movs	r2, #3
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d00d      	beq.n	8004f82 <UART_SetConfig+0xae>
 8004f66:	d81b      	bhi.n	8004fa0 <UART_SetConfig+0xcc>
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d014      	beq.n	8004f96 <UART_SetConfig+0xc2>
 8004f6c:	d818      	bhi.n	8004fa0 <UART_SetConfig+0xcc>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <UART_SetConfig+0xa4>
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d00a      	beq.n	8004f8c <UART_SetConfig+0xb8>
 8004f76:	e013      	b.n	8004fa0 <UART_SetConfig+0xcc>
 8004f78:	231f      	movs	r3, #31
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e021      	b.n	8004fc6 <UART_SetConfig+0xf2>
 8004f82:	231f      	movs	r3, #31
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	2202      	movs	r2, #2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e01c      	b.n	8004fc6 <UART_SetConfig+0xf2>
 8004f8c:	231f      	movs	r3, #31
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	2204      	movs	r2, #4
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e017      	b.n	8004fc6 <UART_SetConfig+0xf2>
 8004f96:	231f      	movs	r3, #31
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e012      	b.n	8004fc6 <UART_SetConfig+0xf2>
 8004fa0:	231f      	movs	r3, #31
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e00d      	b.n	8004fc6 <UART_SetConfig+0xf2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a67      	ldr	r2, [pc, #412]	@ (800514c <UART_SetConfig+0x278>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d104      	bne.n	8004fbe <UART_SetConfig+0xea>
 8004fb4:	231f      	movs	r3, #31
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e003      	b.n	8004fc6 <UART_SetConfig+0xf2>
 8004fbe:	231f      	movs	r3, #31
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d15c      	bne.n	800508c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004fd2:	231f      	movs	r3, #31
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d015      	beq.n	8005008 <UART_SetConfig+0x134>
 8004fdc:	dc18      	bgt.n	8005010 <UART_SetConfig+0x13c>
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d00d      	beq.n	8004ffe <UART_SetConfig+0x12a>
 8004fe2:	dc15      	bgt.n	8005010 <UART_SetConfig+0x13c>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <UART_SetConfig+0x11a>
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d005      	beq.n	8004ff8 <UART_SetConfig+0x124>
 8004fec:	e010      	b.n	8005010 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fee:	f7fe ff2b 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	61bb      	str	r3, [r7, #24]
        break;
 8004ff6:	e012      	b.n	800501e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b55      	ldr	r3, [pc, #340]	@ (8005150 <UART_SetConfig+0x27c>)
 8004ffa:	61bb      	str	r3, [r7, #24]
        break;
 8004ffc:	e00f      	b.n	800501e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe fea7 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8005002:	0003      	movs	r3, r0
 8005004:	61bb      	str	r3, [r7, #24]
        break;
 8005006:	e00a      	b.n	800501e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005008:	2380      	movs	r3, #128	@ 0x80
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	61bb      	str	r3, [r7, #24]
        break;
 800500e:	e006      	b.n	800501e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005014:	231e      	movs	r3, #30
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2201      	movs	r2, #1
 800501a:	701a      	strb	r2, [r3, #0]
        break;
 800501c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d100      	bne.n	8005026 <UART_SetConfig+0x152>
 8005024:	e07a      	b.n	800511c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	005a      	lsls	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	18d2      	adds	r2, r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	0019      	movs	r1, r3
 8005038:	0010      	movs	r0, r2
 800503a:	f7fb f86f 	bl	800011c <__udivsi3>
 800503e:	0003      	movs	r3, r0
 8005040:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d91c      	bls.n	8005082 <UART_SetConfig+0x1ae>
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	025b      	lsls	r3, r3, #9
 800504e:	429a      	cmp	r2, r3
 8005050:	d217      	bcs.n	8005082 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	b29a      	uxth	r2, r3
 8005056:	200e      	movs	r0, #14
 8005058:	183b      	adds	r3, r7, r0
 800505a:	210f      	movs	r1, #15
 800505c:	438a      	bics	r2, r1
 800505e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	b29b      	uxth	r3, r3
 8005066:	2207      	movs	r2, #7
 8005068:	4013      	ands	r3, r2
 800506a:	b299      	uxth	r1, r3
 800506c:	183b      	adds	r3, r7, r0
 800506e:	183a      	adds	r2, r7, r0
 8005070:	8812      	ldrh	r2, [r2, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	183a      	adds	r2, r7, r0
 800507c:	8812      	ldrh	r2, [r2, #0]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e04c      	b.n	800511c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005082:	231e      	movs	r3, #30
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e047      	b.n	800511c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800508c:	231f      	movs	r3, #31
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d015      	beq.n	80050c2 <UART_SetConfig+0x1ee>
 8005096:	dc18      	bgt.n	80050ca <UART_SetConfig+0x1f6>
 8005098:	2b04      	cmp	r3, #4
 800509a:	d00d      	beq.n	80050b8 <UART_SetConfig+0x1e4>
 800509c:	dc15      	bgt.n	80050ca <UART_SetConfig+0x1f6>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <UART_SetConfig+0x1d4>
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d005      	beq.n	80050b2 <UART_SetConfig+0x1de>
 80050a6:	e010      	b.n	80050ca <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7fe fece 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 80050ac:	0003      	movs	r3, r0
 80050ae:	61bb      	str	r3, [r7, #24]
        break;
 80050b0:	e012      	b.n	80050d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b2:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <UART_SetConfig+0x27c>)
 80050b4:	61bb      	str	r3, [r7, #24]
        break;
 80050b6:	e00f      	b.n	80050d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b8:	f7fe fe4a 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 80050bc:	0003      	movs	r3, r0
 80050be:	61bb      	str	r3, [r7, #24]
        break;
 80050c0:	e00a      	b.n	80050d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	61bb      	str	r3, [r7, #24]
        break;
 80050c8:	e006      	b.n	80050d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ce:	231e      	movs	r3, #30
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
        break;
 80050d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01e      	beq.n	800511c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	085a      	lsrs	r2, r3, #1
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	18d2      	adds	r2, r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	0019      	movs	r1, r3
 80050ee:	0010      	movs	r0, r2
 80050f0:	f7fb f814 	bl	800011c <__udivsi3>
 80050f4:	0003      	movs	r3, r0
 80050f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b0f      	cmp	r3, #15
 80050fc:	d90a      	bls.n	8005114 <UART_SetConfig+0x240>
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	2380      	movs	r3, #128	@ 0x80
 8005102:	025b      	lsls	r3, r3, #9
 8005104:	429a      	cmp	r2, r3
 8005106:	d205      	bcs.n	8005114 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e003      	b.n	800511c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005114:	231e      	movs	r3, #30
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005128:	231e      	movs	r3, #30
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	781b      	ldrb	r3, [r3, #0]
}
 800512e:	0018      	movs	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	b008      	add	sp, #32
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			@ (mov r8, r8)
 8005138:	efff69f3 	.word	0xefff69f3
 800513c:	ffffcfff 	.word	0xffffcfff
 8005140:	fffff4ff 	.word	0xfffff4ff
 8005144:	40013800 	.word	0x40013800
 8005148:	40021000 	.word	0x40021000
 800514c:	40004400 	.word	0x40004400
 8005150:	007a1200 	.word	0x007a1200

08005154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	2208      	movs	r2, #8
 8005162:	4013      	ands	r3, r2
 8005164:	d00b      	beq.n	800517e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a4a      	ldr	r2, [pc, #296]	@ (8005298 <UART_AdvFeatureConfig+0x144>)
 800516e:	4013      	ands	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	2201      	movs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	d00b      	beq.n	80051a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4a43      	ldr	r2, [pc, #268]	@ (800529c <UART_AdvFeatureConfig+0x148>)
 8005190:	4013      	ands	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	2202      	movs	r2, #2
 80051a6:	4013      	ands	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4a3b      	ldr	r2, [pc, #236]	@ (80052a0 <UART_AdvFeatureConfig+0x14c>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	0019      	movs	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	2204      	movs	r2, #4
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a34      	ldr	r2, [pc, #208]	@ (80052a4 <UART_AdvFeatureConfig+0x150>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	2210      	movs	r2, #16
 80051ea:	4013      	ands	r3, r2
 80051ec:	d00b      	beq.n	8005206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	@ (80052a8 <UART_AdvFeatureConfig+0x154>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	2220      	movs	r2, #32
 800520c:	4013      	ands	r3, r2
 800520e:	d00b      	beq.n	8005228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4a25      	ldr	r2, [pc, #148]	@ (80052ac <UART_AdvFeatureConfig+0x158>)
 8005218:	4013      	ands	r3, r2
 800521a:	0019      	movs	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	2240      	movs	r2, #64	@ 0x40
 800522e:	4013      	ands	r3, r2
 8005230:	d01d      	beq.n	800526e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a1d      	ldr	r2, [pc, #116]	@ (80052b0 <UART_AdvFeatureConfig+0x15c>)
 800523a:	4013      	ands	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	035b      	lsls	r3, r3, #13
 8005252:	429a      	cmp	r2, r3
 8005254:	d10b      	bne.n	800526e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a15      	ldr	r2, [pc, #84]	@ (80052b4 <UART_AdvFeatureConfig+0x160>)
 800525e:	4013      	ands	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	2280      	movs	r2, #128	@ 0x80
 8005274:	4013      	ands	r3, r2
 8005276:	d00b      	beq.n	8005290 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4a0e      	ldr	r2, [pc, #56]	@ (80052b8 <UART_AdvFeatureConfig+0x164>)
 8005280:	4013      	ands	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }
}
 8005290:	46c0      	nop			@ (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}
 8005298:	ffff7fff 	.word	0xffff7fff
 800529c:	fffdffff 	.word	0xfffdffff
 80052a0:	fffeffff 	.word	0xfffeffff
 80052a4:	fffbffff 	.word	0xfffbffff
 80052a8:	ffffefff 	.word	0xffffefff
 80052ac:	ffffdfff 	.word	0xffffdfff
 80052b0:	ffefffff 	.word	0xffefffff
 80052b4:	ff9fffff 	.word	0xff9fffff
 80052b8:	fff7ffff 	.word	0xfff7ffff

080052bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b092      	sub	sp, #72	@ 0x48
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2284      	movs	r2, #132	@ 0x84
 80052c8:	2100      	movs	r1, #0
 80052ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052cc:	f7fb fe96 	bl	8000ffc <HAL_GetTick>
 80052d0:	0003      	movs	r3, r0
 80052d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2208      	movs	r2, #8
 80052dc:	4013      	ands	r3, r2
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d12c      	bne.n	800533c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e4:	2280      	movs	r2, #128	@ 0x80
 80052e6:	0391      	lsls	r1, r2, #14
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4a46      	ldr	r2, [pc, #280]	@ (8005404 <UART_CheckIdleState+0x148>)
 80052ec:	9200      	str	r2, [sp, #0]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f000 f88c 	bl	800540c <UART_WaitOnFlagUntilTimeout>
 80052f4:	1e03      	subs	r3, r0, #0
 80052f6:	d021      	beq.n	800533c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f8:	f3ef 8310 	mrs	r3, PRIMASK
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005302:	2301      	movs	r3, #1
 8005304:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			@ (mov r8, r8)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2180      	movs	r1, #128	@ 0x80
 800531a:	438a      	bics	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2278      	movs	r2, #120	@ 0x78
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e05f      	b.n	80053fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2204      	movs	r2, #4
 8005344:	4013      	ands	r3, r2
 8005346:	2b04      	cmp	r3, #4
 8005348:	d146      	bne.n	80053d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534c:	2280      	movs	r2, #128	@ 0x80
 800534e:	03d1      	lsls	r1, r2, #15
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <UART_CheckIdleState+0x148>)
 8005354:	9200      	str	r2, [sp, #0]
 8005356:	2200      	movs	r2, #0
 8005358:	f000 f858 	bl	800540c <UART_WaitOnFlagUntilTimeout>
 800535c:	1e03      	subs	r3, r0, #0
 800535e:	d03b      	beq.n	80053d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005360:	f3ef 8310 	mrs	r3, PRIMASK
 8005364:	60fb      	str	r3, [r7, #12]
  return(result);
 8005366:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005368:	637b      	str	r3, [r7, #52]	@ 0x34
 800536a:	2301      	movs	r3, #1
 800536c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f383 8810 	msr	PRIMASK, r3
}
 8005374:	46c0      	nop			@ (mov r8, r8)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4921      	ldr	r1, [pc, #132]	@ (8005408 <UART_CheckIdleState+0x14c>)
 8005382:	400a      	ands	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f383 8810 	msr	PRIMASK, r3
}
 8005390:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005392:	f3ef 8310 	mrs	r3, PRIMASK
 8005396:	61bb      	str	r3, [r7, #24]
  return(result);
 8005398:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	633b      	str	r3, [r7, #48]	@ 0x30
 800539c:	2301      	movs	r3, #1
 800539e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f383 8810 	msr	PRIMASK, r3
}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2101      	movs	r1, #1
 80053b4:	438a      	bics	r2, r1
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	f383 8810 	msr	PRIMASK, r3
}
 80053c2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2280      	movs	r2, #128	@ 0x80
 80053c8:	2120      	movs	r1, #32
 80053ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2278      	movs	r2, #120	@ 0x78
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e011      	b.n	80053fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2280      	movs	r2, #128	@ 0x80
 80053e2:	2120      	movs	r1, #32
 80053e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2278      	movs	r2, #120	@ 0x78
 80053f6:	2100      	movs	r1, #0
 80053f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	0018      	movs	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	b010      	add	sp, #64	@ 0x40
 8005402:	bd80      	pop	{r7, pc}
 8005404:	01ffffff 	.word	0x01ffffff
 8005408:	fffffedf 	.word	0xfffffedf

0800540c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	1dfb      	adds	r3, r7, #7
 800541a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541c:	e051      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3301      	adds	r3, #1
 8005422:	d04e      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005424:	f7fb fdea 	bl	8000ffc <HAL_GetTick>
 8005428:	0002      	movs	r2, r0
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e051      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2204      	movs	r2, #4
 8005446:	4013      	ands	r3, r2
 8005448:	d03b      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b80      	cmp	r3, #128	@ 0x80
 800544e:	d038      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d035      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	2208      	movs	r2, #8
 800545e:	4013      	ands	r3, r2
 8005460:	2b08      	cmp	r3, #8
 8005462:	d111      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2208      	movs	r2, #8
 800546a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 f900 	bl	8005674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2284      	movs	r2, #132	@ 0x84
 8005478:	2108      	movs	r1, #8
 800547a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2278      	movs	r2, #120	@ 0x78
 8005480:	2100      	movs	r1, #0
 8005482:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e02c      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	2380      	movs	r3, #128	@ 0x80
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	401a      	ands	r2, r3
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	429a      	cmp	r2, r3
 800549a:	d112      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2280      	movs	r2, #128	@ 0x80
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 f8e3 	bl	8005674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2284      	movs	r2, #132	@ 0x84
 80054b2:	2120      	movs	r1, #32
 80054b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2278      	movs	r2, #120	@ 0x78
 80054ba:	2100      	movs	r1, #0
 80054bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e00f      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	425a      	negs	r2, r3
 80054d2:	4153      	adcs	r3, r2
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	001a      	movs	r2, r3
 80054d8:	1dfb      	adds	r3, r7, #7
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d09e      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b004      	add	sp, #16
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b090      	sub	sp, #64	@ 0x40
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	1dbb      	adds	r3, r7, #6
 80054f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1dba      	adds	r2, r7, #6
 8005504:	2158      	movs	r1, #88	@ 0x58
 8005506:	8812      	ldrh	r2, [r2, #0]
 8005508:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2284      	movs	r2, #132	@ 0x84
 800550e:	2100      	movs	r1, #0
 8005510:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2280      	movs	r2, #128	@ 0x80
 8005516:	2122      	movs	r1, #34	@ 0x22
 8005518:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	2b00      	cmp	r3, #0
 8005520:	d028      	beq.n	8005574 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005526:	4a3e      	ldr	r2, [pc, #248]	@ (8005620 <UART_Start_Receive_DMA+0x134>)
 8005528:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800552e:	4a3d      	ldr	r2, [pc, #244]	@ (8005624 <UART_Start_Receive_DMA+0x138>)
 8005530:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005536:	4a3c      	ldr	r2, [pc, #240]	@ (8005628 <UART_Start_Receive_DMA+0x13c>)
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800553e:	2200      	movs	r2, #0
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3324      	adds	r3, #36	@ 0x24
 800554c:	0019      	movs	r1, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	001a      	movs	r2, r3
 8005554:	1dbb      	adds	r3, r7, #6
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	f7fb fe74 	bl	8001244 <HAL_DMA_Start_IT>
 800555c:	1e03      	subs	r3, r0, #0
 800555e:	d009      	beq.n	8005574 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2284      	movs	r2, #132	@ 0x84
 8005564:	2110      	movs	r1, #16
 8005566:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2280      	movs	r2, #128	@ 0x80
 800556c:	2120      	movs	r1, #32
 800556e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e050      	b.n	8005616 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d019      	beq.n	80055b0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800557c:	f3ef 8310 	mrs	r3, PRIMASK
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005586:	2301      	movs	r3, #1
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	f383 8810 	msr	PRIMASK, r3
}
 8005590:	46c0      	nop			@ (mov r8, r8)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2180      	movs	r1, #128	@ 0x80
 800559e:	0049      	lsls	r1, r1, #1
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	f383 8810 	msr	PRIMASK, r3
}
 80055ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b0:	f3ef 8310 	mrs	r3, PRIMASK
 80055b4:	613b      	str	r3, [r7, #16]
  return(result);
 80055b6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ba:	2301      	movs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f383 8810 	msr	PRIMASK, r3
}
 80055c4:	46c0      	nop			@ (mov r8, r8)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2101      	movs	r1, #1
 80055d2:	430a      	orrs	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f383 8810 	msr	PRIMASK, r3
}
 80055e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	61fb      	str	r3, [r7, #28]
  return(result);
 80055e8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ec:	2301      	movs	r3, #1
 80055ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2140      	movs	r1, #64	@ 0x40
 8005604:	430a      	orrs	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b010      	add	sp, #64	@ 0x40
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	0800573d 	.word	0x0800573d
 8005624:	08005869 	.word	0x08005869
 8005628:	080058ab 	.word	0x080058ab

0800562c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005634:	f3ef 8310 	mrs	r3, PRIMASK
 8005638:	60bb      	str	r3, [r7, #8]
  return(result);
 800563a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	2301      	movs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f383 8810 	msr	PRIMASK, r3
}
 8005648:	46c0      	nop			@ (mov r8, r8)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	21c0      	movs	r1, #192	@ 0xc0
 8005656:	438a      	bics	r2, r1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f383 8810 	msr	PRIMASK, r3
}
 8005664:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800566c:	46c0      	nop			@ (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b006      	add	sp, #24
 8005672:	bd80      	pop	{r7, pc}

08005674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08e      	sub	sp, #56	@ 0x38
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567c:	f3ef 8310 	mrs	r3, PRIMASK
 8005680:	617b      	str	r3, [r7, #20]
  return(result);
 8005682:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005684:	637b      	str	r3, [r7, #52]	@ 0x34
 8005686:	2301      	movs	r3, #1
 8005688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	f383 8810 	msr	PRIMASK, r3
}
 8005690:	46c0      	nop			@ (mov r8, r8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4926      	ldr	r1, [pc, #152]	@ (8005738 <UART_EndRxTransfer+0xc4>)
 800569e:	400a      	ands	r2, r1
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f383 8810 	msr	PRIMASK, r3
}
 80056ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ae:	f3ef 8310 	mrs	r3, PRIMASK
 80056b2:	623b      	str	r3, [r7, #32]
  return(result);
 80056b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b8:	2301      	movs	r3, #1
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2101      	movs	r1, #1
 80056d0:	438a      	bics	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d118      	bne.n	800571a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e8:	f3ef 8310 	mrs	r3, PRIMASK
 80056ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056f2:	2301      	movs	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f383 8810 	msr	PRIMASK, r3
}
 80056fc:	46c0      	nop			@ (mov r8, r8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2110      	movs	r1, #16
 800570a:	438a      	bics	r2, r1
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f383 8810 	msr	PRIMASK, r3
}
 8005718:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2280      	movs	r2, #128	@ 0x80
 800571e:	2120      	movs	r1, #32
 8005720:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	46bd      	mov	sp, r7
 8005732:	b00e      	add	sp, #56	@ 0x38
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	fffffedf 	.word	0xfffffedf

0800573c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b094      	sub	sp, #80	@ 0x50
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b20      	cmp	r3, #32
 8005750:	d06f      	beq.n	8005832 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005754:	225a      	movs	r2, #90	@ 0x5a
 8005756:	2100      	movs	r1, #0
 8005758:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575a:	f3ef 8310 	mrs	r3, PRIMASK
 800575e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005760:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005764:	2301      	movs	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f383 8810 	msr	PRIMASK, r3
}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	493a      	ldr	r1, [pc, #232]	@ (8005864 <UART_DMAReceiveCplt+0x128>)
 800577c:	400a      	ands	r2, r1
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005782:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f383 8810 	msr	PRIMASK, r3
}
 800578a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578c:	f3ef 8310 	mrs	r3, PRIMASK
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005794:	647b      	str	r3, [r7, #68]	@ 0x44
 8005796:	2301      	movs	r3, #1
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	f383 8810 	msr	PRIMASK, r3
}
 80057a0:	46c0      	nop			@ (mov r8, r8)
 80057a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2101      	movs	r1, #1
 80057ae:	438a      	bics	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057be:	f3ef 8310 	mrs	r3, PRIMASK
 80057c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c8:	2301      	movs	r3, #1
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2140      	movs	r1, #64	@ 0x40
 80057e0:	438a      	bics	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057f2:	2280      	movs	r2, #128	@ 0x80
 80057f4:	2120      	movs	r1, #32
 80057f6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d118      	bne.n	8005832 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005800:	f3ef 8310 	mrs	r3, PRIMASK
 8005804:	60fb      	str	r3, [r7, #12]
  return(result);
 8005806:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800580a:	2301      	movs	r3, #1
 800580c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f383 8810 	msr	PRIMASK, r3
}
 8005814:	46c0      	nop			@ (mov r8, r8)
 8005816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2110      	movs	r1, #16
 8005822:	438a      	bics	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f383 8810 	msr	PRIMASK, r3
}
 8005830:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005834:	2200      	movs	r2, #0
 8005836:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800583a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583c:	2b01      	cmp	r3, #1
 800583e:	d108      	bne.n	8005852 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005842:	2258      	movs	r2, #88	@ 0x58
 8005844:	5a9a      	ldrh	r2, [r3, r2]
 8005846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005848:	0011      	movs	r1, r2
 800584a:	0018      	movs	r0, r3
 800584c:	f7fa fe82 	bl	8000554 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005850:	e003      	b.n	800585a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005854:	0018      	movs	r0, r3
 8005856:	f7fa fde9 	bl	800042c <HAL_UART_RxCpltCallback>
}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	b014      	add	sp, #80	@ 0x50
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	fffffeff 	.word	0xfffffeff

08005868 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10a      	bne.n	800589a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2258      	movs	r2, #88	@ 0x58
 8005888:	5a9b      	ldrh	r3, [r3, r2]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	0011      	movs	r1, r2
 8005892:	0018      	movs	r0, r3
 8005894:	f7fa fe5e 	bl	8000554 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005898:	e003      	b.n	80058a2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	0018      	movs	r0, r3
 800589e:	f7ff fb09 	bl	8004eb4 <HAL_UART_RxHalfCpltCallback>
}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b004      	add	sp, #16
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2280      	movs	r2, #128	@ 0x80
 80058c2:	589b      	ldr	r3, [r3, r2]
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2280      	movs	r2, #128	@ 0x80
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b80      	cmp	r3, #128	@ 0x80
 80058d2:	d10a      	bne.n	80058ea <UART_DMAError+0x40>
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b21      	cmp	r3, #33	@ 0x21
 80058d8:	d107      	bne.n	80058ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2252      	movs	r2, #82	@ 0x52
 80058de:	2100      	movs	r1, #0
 80058e0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7ff fea1 	bl	800562c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2240      	movs	r2, #64	@ 0x40
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b40      	cmp	r3, #64	@ 0x40
 80058f6:	d10a      	bne.n	800590e <UART_DMAError+0x64>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b22      	cmp	r3, #34	@ 0x22
 80058fc:	d107      	bne.n	800590e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	225a      	movs	r2, #90	@ 0x5a
 8005902:	2100      	movs	r1, #0
 8005904:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	0018      	movs	r0, r3
 800590a:	f7ff feb3 	bl	8005674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2284      	movs	r2, #132	@ 0x84
 8005912:	589b      	ldr	r3, [r3, r2]
 8005914:	2210      	movs	r2, #16
 8005916:	431a      	orrs	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2184      	movs	r1, #132	@ 0x84
 800591c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	0018      	movs	r0, r3
 8005922:	f7ff facf 	bl	8004ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b006      	add	sp, #24
 800592c:	bd80      	pop	{r7, pc}

0800592e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	225a      	movs	r2, #90	@ 0x5a
 8005940:	2100      	movs	r1, #0
 8005942:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2252      	movs	r2, #82	@ 0x52
 8005948:	2100      	movs	r1, #0
 800594a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	0018      	movs	r0, r3
 8005950:	f7ff fab8 	bl	8004ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005954:	46c0      	nop			@ (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b004      	add	sp, #16
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005964:	f3ef 8310 	mrs	r3, PRIMASK
 8005968:	60bb      	str	r3, [r7, #8]
  return(result);
 800596a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	2301      	movs	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			@ (mov r8, r8)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2140      	movs	r1, #64	@ 0x40
 8005986:	438a      	bics	r2, r1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f383 8810 	msr	PRIMASK, r3
}
 8005994:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff fa7d 	bl	8004ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b006      	add	sp, #24
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	b002      	add	sp, #8
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c2:	b5b0      	push	{r4, r5, r7, lr}
 80059c4:	b08a      	sub	sp, #40	@ 0x28
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	1dbb      	adds	r3, r7, #6
 80059ce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2280      	movs	r2, #128	@ 0x80
 80059d4:	589b      	ldr	r3, [r3, r2]
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d156      	bne.n	8005a88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80059e0:	1dbb      	adds	r3, r7, #6
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e04e      	b.n	8005a8a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d109      	bne.n	8005a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2201      	movs	r2, #1
 8005a04:	4013      	ands	r3, r2
 8005a06:	d001      	beq.n	8005a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e03e      	b.n	8005a8a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005a18:	2527      	movs	r5, #39	@ 0x27
 8005a1a:	197c      	adds	r4, r7, r5
 8005a1c:	1dbb      	adds	r3, r7, #6
 8005a1e:	881a      	ldrh	r2, [r3, #0]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f7ff fd61 	bl	80054ec <UART_Start_Receive_DMA>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005a2e:	197b      	adds	r3, r7, r5
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d124      	bne.n	8005a80 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d11c      	bne.n	8005a78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2210      	movs	r2, #16
 8005a44:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a46:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4a:	617b      	str	r3, [r7, #20]
  return(result);
 8005a4c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	2301      	movs	r3, #1
 8005a52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f383 8810 	msr	PRIMASK, r3
}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2110      	movs	r1, #16
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	e003      	b.n	8005a80 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005a78:	2327      	movs	r3, #39	@ 0x27
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005a80:	2327      	movs	r3, #39	@ 0x27
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	e000      	b.n	8005a8a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b00a      	add	sp, #40	@ 0x28
 8005a90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a94 <std>:
 8005a94:	2300      	movs	r3, #0
 8005a96:	b510      	push	{r4, lr}
 8005a98:	0004      	movs	r4, r0
 8005a9a:	6003      	str	r3, [r0, #0]
 8005a9c:	6043      	str	r3, [r0, #4]
 8005a9e:	6083      	str	r3, [r0, #8]
 8005aa0:	8181      	strh	r1, [r0, #12]
 8005aa2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005aa4:	81c2      	strh	r2, [r0, #14]
 8005aa6:	6103      	str	r3, [r0, #16]
 8005aa8:	6143      	str	r3, [r0, #20]
 8005aaa:	6183      	str	r3, [r0, #24]
 8005aac:	0019      	movs	r1, r3
 8005aae:	2208      	movs	r2, #8
 8005ab0:	305c      	adds	r0, #92	@ 0x5c
 8005ab2:	f000 fa0f 	bl	8005ed4 <memset>
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <std+0x50>)
 8005ab8:	6224      	str	r4, [r4, #32]
 8005aba:	6263      	str	r3, [r4, #36]	@ 0x24
 8005abc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <std+0x54>)
 8005abe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <std+0x58>)
 8005ac2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <std+0x5c>)
 8005ac6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <std+0x60>)
 8005aca:	429c      	cmp	r4, r3
 8005acc:	d005      	beq.n	8005ada <std+0x46>
 8005ace:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <std+0x64>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d002      	beq.n	8005ada <std+0x46>
 8005ad4:	4b09      	ldr	r3, [pc, #36]	@ (8005afc <std+0x68>)
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d103      	bne.n	8005ae2 <std+0x4e>
 8005ada:	0020      	movs	r0, r4
 8005adc:	3058      	adds	r0, #88	@ 0x58
 8005ade:	f000 fa79 	bl	8005fd4 <__retarget_lock_init_recursive>
 8005ae2:	bd10      	pop	{r4, pc}
 8005ae4:	08005cfd 	.word	0x08005cfd
 8005ae8:	08005d25 	.word	0x08005d25
 8005aec:	08005d5d 	.word	0x08005d5d
 8005af0:	08005d89 	.word	0x08005d89
 8005af4:	20000444 	.word	0x20000444
 8005af8:	200004ac 	.word	0x200004ac
 8005afc:	20000514 	.word	0x20000514

08005b00 <stdio_exit_handler>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4a03      	ldr	r2, [pc, #12]	@ (8005b10 <stdio_exit_handler+0x10>)
 8005b04:	4903      	ldr	r1, [pc, #12]	@ (8005b14 <stdio_exit_handler+0x14>)
 8005b06:	4804      	ldr	r0, [pc, #16]	@ (8005b18 <stdio_exit_handler+0x18>)
 8005b08:	f000 f86c 	bl	8005be4 <_fwalk_sglue>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	08006865 	.word	0x08006865
 8005b18:	2000001c 	.word	0x2000001c

08005b1c <cleanup_stdio>:
 8005b1c:	6841      	ldr	r1, [r0, #4]
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <cleanup_stdio+0x30>)
 8005b20:	b510      	push	{r4, lr}
 8005b22:	0004      	movs	r4, r0
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d001      	beq.n	8005b2c <cleanup_stdio+0x10>
 8005b28:	f000 fe9c 	bl	8006864 <_fflush_r>
 8005b2c:	68a1      	ldr	r1, [r4, #8]
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <cleanup_stdio+0x34>)
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <cleanup_stdio+0x1e>
 8005b34:	0020      	movs	r0, r4
 8005b36:	f000 fe95 	bl	8006864 <_fflush_r>
 8005b3a:	68e1      	ldr	r1, [r4, #12]
 8005b3c:	4b05      	ldr	r3, [pc, #20]	@ (8005b54 <cleanup_stdio+0x38>)
 8005b3e:	4299      	cmp	r1, r3
 8005b40:	d002      	beq.n	8005b48 <cleanup_stdio+0x2c>
 8005b42:	0020      	movs	r0, r4
 8005b44:	f000 fe8e 	bl	8006864 <_fflush_r>
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	20000444 	.word	0x20000444
 8005b50:	200004ac 	.word	0x200004ac
 8005b54:	20000514 	.word	0x20000514

08005b58 <global_stdio_init.part.0>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <global_stdio_init.part.0+0x28>)
 8005b5c:	4a09      	ldr	r2, [pc, #36]	@ (8005b84 <global_stdio_init.part.0+0x2c>)
 8005b5e:	2104      	movs	r1, #4
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	4809      	ldr	r0, [pc, #36]	@ (8005b88 <global_stdio_init.part.0+0x30>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	f7ff ff95 	bl	8005a94 <std>
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	2109      	movs	r1, #9
 8005b6e:	4807      	ldr	r0, [pc, #28]	@ (8005b8c <global_stdio_init.part.0+0x34>)
 8005b70:	f7ff ff90 	bl	8005a94 <std>
 8005b74:	2202      	movs	r2, #2
 8005b76:	2112      	movs	r1, #18
 8005b78:	4805      	ldr	r0, [pc, #20]	@ (8005b90 <global_stdio_init.part.0+0x38>)
 8005b7a:	f7ff ff8b 	bl	8005a94 <std>
 8005b7e:	bd10      	pop	{r4, pc}
 8005b80:	2000057c 	.word	0x2000057c
 8005b84:	08005b01 	.word	0x08005b01
 8005b88:	20000444 	.word	0x20000444
 8005b8c:	200004ac 	.word	0x200004ac
 8005b90:	20000514 	.word	0x20000514

08005b94 <__sfp_lock_acquire>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4802      	ldr	r0, [pc, #8]	@ (8005ba0 <__sfp_lock_acquire+0xc>)
 8005b98:	f000 fa1d 	bl	8005fd6 <__retarget_lock_acquire_recursive>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	20000585 	.word	0x20000585

08005ba4 <__sfp_lock_release>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4802      	ldr	r0, [pc, #8]	@ (8005bb0 <__sfp_lock_release+0xc>)
 8005ba8:	f000 fa16 	bl	8005fd8 <__retarget_lock_release_recursive>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	46c0      	nop			@ (mov r8, r8)
 8005bb0:	20000585 	.word	0x20000585

08005bb4 <__sinit>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	0004      	movs	r4, r0
 8005bb8:	f7ff ffec 	bl	8005b94 <__sfp_lock_acquire>
 8005bbc:	6a23      	ldr	r3, [r4, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <__sinit+0x14>
 8005bc2:	f7ff ffef 	bl	8005ba4 <__sfp_lock_release>
 8005bc6:	bd10      	pop	{r4, pc}
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <__sinit+0x28>)
 8005bca:	6223      	str	r3, [r4, #32]
 8005bcc:	4b04      	ldr	r3, [pc, #16]	@ (8005be0 <__sinit+0x2c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f6      	bne.n	8005bc2 <__sinit+0xe>
 8005bd4:	f7ff ffc0 	bl	8005b58 <global_stdio_init.part.0>
 8005bd8:	e7f3      	b.n	8005bc2 <__sinit+0xe>
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	08005b1d 	.word	0x08005b1d
 8005be0:	2000057c 	.word	0x2000057c

08005be4 <_fwalk_sglue>:
 8005be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be6:	0014      	movs	r4, r2
 8005be8:	2600      	movs	r6, #0
 8005bea:	9000      	str	r0, [sp, #0]
 8005bec:	9101      	str	r1, [sp, #4]
 8005bee:	68a5      	ldr	r5, [r4, #8]
 8005bf0:	6867      	ldr	r7, [r4, #4]
 8005bf2:	3f01      	subs	r7, #1
 8005bf4:	d504      	bpl.n	8005c00 <_fwalk_sglue+0x1c>
 8005bf6:	6824      	ldr	r4, [r4, #0]
 8005bf8:	2c00      	cmp	r4, #0
 8005bfa:	d1f8      	bne.n	8005bee <_fwalk_sglue+0xa>
 8005bfc:	0030      	movs	r0, r6
 8005bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c00:	89ab      	ldrh	r3, [r5, #12]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d908      	bls.n	8005c18 <_fwalk_sglue+0x34>
 8005c06:	220e      	movs	r2, #14
 8005c08:	5eab      	ldrsh	r3, [r5, r2]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	d004      	beq.n	8005c18 <_fwalk_sglue+0x34>
 8005c0e:	0029      	movs	r1, r5
 8005c10:	9800      	ldr	r0, [sp, #0]
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	4798      	blx	r3
 8005c16:	4306      	orrs	r6, r0
 8005c18:	3568      	adds	r5, #104	@ 0x68
 8005c1a:	e7ea      	b.n	8005bf2 <_fwalk_sglue+0xe>

08005c1c <iprintf>:
 8005c1c:	b40f      	push	{r0, r1, r2, r3}
 8005c1e:	b507      	push	{r0, r1, r2, lr}
 8005c20:	4905      	ldr	r1, [pc, #20]	@ (8005c38 <iprintf+0x1c>)
 8005c22:	ab04      	add	r3, sp, #16
 8005c24:	6808      	ldr	r0, [r1, #0]
 8005c26:	cb04      	ldmia	r3!, {r2}
 8005c28:	6881      	ldr	r1, [r0, #8]
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	f000 fafa 	bl	8006224 <_vfiprintf_r>
 8005c30:	b003      	add	sp, #12
 8005c32:	bc08      	pop	{r3}
 8005c34:	b004      	add	sp, #16
 8005c36:	4718      	bx	r3
 8005c38:	20000018 	.word	0x20000018

08005c3c <_puts_r>:
 8005c3c:	6a03      	ldr	r3, [r0, #32]
 8005c3e:	b570      	push	{r4, r5, r6, lr}
 8005c40:	0005      	movs	r5, r0
 8005c42:	000e      	movs	r6, r1
 8005c44:	6884      	ldr	r4, [r0, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <_puts_r+0x12>
 8005c4a:	f7ff ffb3 	bl	8005bb4 <__sinit>
 8005c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c50:	07db      	lsls	r3, r3, #31
 8005c52:	d405      	bmi.n	8005c60 <_puts_r+0x24>
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	059b      	lsls	r3, r3, #22
 8005c58:	d402      	bmi.n	8005c60 <_puts_r+0x24>
 8005c5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c5c:	f000 f9bb 	bl	8005fd6 <__retarget_lock_acquire_recursive>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	071b      	lsls	r3, r3, #28
 8005c64:	d502      	bpl.n	8005c6c <_puts_r+0x30>
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d11f      	bne.n	8005cac <_puts_r+0x70>
 8005c6c:	0021      	movs	r1, r4
 8005c6e:	0028      	movs	r0, r5
 8005c70:	f000 f8d2 	bl	8005e18 <__swsetup_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d019      	beq.n	8005cac <_puts_r+0x70>
 8005c78:	2501      	movs	r5, #1
 8005c7a:	426d      	negs	r5, r5
 8005c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c7e:	07db      	lsls	r3, r3, #31
 8005c80:	d405      	bmi.n	8005c8e <_puts_r+0x52>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	059b      	lsls	r3, r3, #22
 8005c86:	d402      	bmi.n	8005c8e <_puts_r+0x52>
 8005c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c8a:	f000 f9a5 	bl	8005fd8 <__retarget_lock_release_recursive>
 8005c8e:	0028      	movs	r0, r5
 8005c90:	bd70      	pop	{r4, r5, r6, pc}
 8005c92:	3601      	adds	r6, #1
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da04      	bge.n	8005ca4 <_puts_r+0x68>
 8005c9a:	69a2      	ldr	r2, [r4, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	dc16      	bgt.n	8005cce <_puts_r+0x92>
 8005ca0:	290a      	cmp	r1, #10
 8005ca2:	d014      	beq.n	8005cce <_puts_r+0x92>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	7019      	strb	r1, [r3, #0]
 8005cac:	68a3      	ldr	r3, [r4, #8]
 8005cae:	7831      	ldrb	r1, [r6, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	2900      	cmp	r1, #0
 8005cb4:	d1ed      	bne.n	8005c92 <_puts_r+0x56>
 8005cb6:	60a3      	str	r3, [r4, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da0f      	bge.n	8005cdc <_puts_r+0xa0>
 8005cbc:	0022      	movs	r2, r4
 8005cbe:	0028      	movs	r0, r5
 8005cc0:	310a      	adds	r1, #10
 8005cc2:	f000 f867 	bl	8005d94 <__swbuf_r>
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d0d6      	beq.n	8005c78 <_puts_r+0x3c>
 8005cca:	250a      	movs	r5, #10
 8005ccc:	e7d6      	b.n	8005c7c <_puts_r+0x40>
 8005cce:	0022      	movs	r2, r4
 8005cd0:	0028      	movs	r0, r5
 8005cd2:	f000 f85f 	bl	8005d94 <__swbuf_r>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d1e8      	bne.n	8005cac <_puts_r+0x70>
 8005cda:	e7cd      	b.n	8005c78 <_puts_r+0x3c>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	6022      	str	r2, [r4, #0]
 8005ce2:	220a      	movs	r2, #10
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e7f0      	b.n	8005cca <_puts_r+0x8e>

08005ce8 <puts>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4b03      	ldr	r3, [pc, #12]	@ (8005cf8 <puts+0x10>)
 8005cec:	0001      	movs	r1, r0
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	f7ff ffa4 	bl	8005c3c <_puts_r>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	46c0      	nop			@ (mov r8, r8)
 8005cf8:	20000018 	.word	0x20000018

08005cfc <__sread>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	000c      	movs	r4, r1
 8005d00:	250e      	movs	r5, #14
 8005d02:	5f49      	ldrsh	r1, [r1, r5]
 8005d04:	f000 f914 	bl	8005f30 <_read_r>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	db03      	blt.n	8005d14 <__sread+0x18>
 8005d0c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005d0e:	181b      	adds	r3, r3, r0
 8005d10:	6563      	str	r3, [r4, #84]	@ 0x54
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	4a02      	ldr	r2, [pc, #8]	@ (8005d20 <__sread+0x24>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	81a3      	strh	r3, [r4, #12]
 8005d1c:	e7f9      	b.n	8005d12 <__sread+0x16>
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	ffffefff 	.word	0xffffefff

08005d24 <__swrite>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	001f      	movs	r7, r3
 8005d28:	898b      	ldrh	r3, [r1, #12]
 8005d2a:	0005      	movs	r5, r0
 8005d2c:	000c      	movs	r4, r1
 8005d2e:	0016      	movs	r6, r2
 8005d30:	05db      	lsls	r3, r3, #23
 8005d32:	d505      	bpl.n	8005d40 <__swrite+0x1c>
 8005d34:	230e      	movs	r3, #14
 8005d36:	5ec9      	ldrsh	r1, [r1, r3]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	f000 f8e4 	bl	8005f08 <_lseek_r>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	4a05      	ldr	r2, [pc, #20]	@ (8005d58 <__swrite+0x34>)
 8005d44:	0028      	movs	r0, r5
 8005d46:	4013      	ands	r3, r2
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	0032      	movs	r2, r6
 8005d4c:	230e      	movs	r3, #14
 8005d4e:	5ee1      	ldrsh	r1, [r4, r3]
 8005d50:	003b      	movs	r3, r7
 8005d52:	f000 f901 	bl	8005f58 <_write_r>
 8005d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d58:	ffffefff 	.word	0xffffefff

08005d5c <__sseek>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	000c      	movs	r4, r1
 8005d60:	250e      	movs	r5, #14
 8005d62:	5f49      	ldrsh	r1, [r1, r5]
 8005d64:	f000 f8d0 	bl	8005f08 <_lseek_r>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	1c42      	adds	r2, r0, #1
 8005d6c:	d103      	bne.n	8005d76 <__sseek+0x1a>
 8005d6e:	4a05      	ldr	r2, [pc, #20]	@ (8005d84 <__sseek+0x28>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
 8005d76:	2280      	movs	r2, #128	@ 0x80
 8005d78:	0152      	lsls	r2, r2, #5
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d80:	e7f8      	b.n	8005d74 <__sseek+0x18>
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	ffffefff 	.word	0xffffefff

08005d88 <__sclose>:
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	230e      	movs	r3, #14
 8005d8c:	5ec9      	ldrsh	r1, [r1, r3]
 8005d8e:	f000 f8a9 	bl	8005ee4 <_close_r>
 8005d92:	bd10      	pop	{r4, pc}

08005d94 <__swbuf_r>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	0006      	movs	r6, r0
 8005d98:	000d      	movs	r5, r1
 8005d9a:	0014      	movs	r4, r2
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d004      	beq.n	8005daa <__swbuf_r+0x16>
 8005da0:	6a03      	ldr	r3, [r0, #32]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <__swbuf_r+0x16>
 8005da6:	f7ff ff05 	bl	8005bb4 <__sinit>
 8005daa:	69a3      	ldr	r3, [r4, #24]
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	071b      	lsls	r3, r3, #28
 8005db2:	d502      	bpl.n	8005dba <__swbuf_r+0x26>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <__swbuf_r+0x3a>
 8005dba:	0021      	movs	r1, r4
 8005dbc:	0030      	movs	r0, r6
 8005dbe:	f000 f82b 	bl	8005e18 <__swsetup_r>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d003      	beq.n	8005dce <__swbuf_r+0x3a>
 8005dc6:	2501      	movs	r5, #1
 8005dc8:	426d      	negs	r5, r5
 8005dca:	0028      	movs	r0, r5
 8005dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	b2ef      	uxtb	r7, r5
 8005dd4:	1ac0      	subs	r0, r0, r3
 8005dd6:	6963      	ldr	r3, [r4, #20]
 8005dd8:	b2ed      	uxtb	r5, r5
 8005dda:	4283      	cmp	r3, r0
 8005ddc:	dc05      	bgt.n	8005dea <__swbuf_r+0x56>
 8005dde:	0021      	movs	r1, r4
 8005de0:	0030      	movs	r0, r6
 8005de2:	f000 fd3f 	bl	8006864 <_fflush_r>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d1ed      	bne.n	8005dc6 <__swbuf_r+0x32>
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	3001      	adds	r0, #1
 8005dee:	3b01      	subs	r3, #1
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	6022      	str	r2, [r4, #0]
 8005df8:	701f      	strb	r7, [r3, #0]
 8005dfa:	6963      	ldr	r3, [r4, #20]
 8005dfc:	4283      	cmp	r3, r0
 8005dfe:	d004      	beq.n	8005e0a <__swbuf_r+0x76>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	07db      	lsls	r3, r3, #31
 8005e04:	d5e1      	bpl.n	8005dca <__swbuf_r+0x36>
 8005e06:	2d0a      	cmp	r5, #10
 8005e08:	d1df      	bne.n	8005dca <__swbuf_r+0x36>
 8005e0a:	0021      	movs	r1, r4
 8005e0c:	0030      	movs	r0, r6
 8005e0e:	f000 fd29 	bl	8006864 <_fflush_r>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0d9      	beq.n	8005dca <__swbuf_r+0x36>
 8005e16:	e7d6      	b.n	8005dc6 <__swbuf_r+0x32>

08005e18 <__swsetup_r>:
 8005e18:	4b2d      	ldr	r3, [pc, #180]	@ (8005ed0 <__swsetup_r+0xb8>)
 8005e1a:	b570      	push	{r4, r5, r6, lr}
 8005e1c:	0005      	movs	r5, r0
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	000c      	movs	r4, r1
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d004      	beq.n	8005e30 <__swsetup_r+0x18>
 8005e26:	6a03      	ldr	r3, [r0, #32]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <__swsetup_r+0x18>
 8005e2c:	f7ff fec2 	bl	8005bb4 <__sinit>
 8005e30:	230c      	movs	r3, #12
 8005e32:	5ee2      	ldrsh	r2, [r4, r3]
 8005e34:	0713      	lsls	r3, r2, #28
 8005e36:	d423      	bmi.n	8005e80 <__swsetup_r+0x68>
 8005e38:	06d3      	lsls	r3, r2, #27
 8005e3a:	d407      	bmi.n	8005e4c <__swsetup_r+0x34>
 8005e3c:	2309      	movs	r3, #9
 8005e3e:	602b      	str	r3, [r5, #0]
 8005e40:	2340      	movs	r3, #64	@ 0x40
 8005e42:	2001      	movs	r0, #1
 8005e44:	4313      	orrs	r3, r2
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	4240      	negs	r0, r0
 8005e4a:	e03a      	b.n	8005ec2 <__swsetup_r+0xaa>
 8005e4c:	0752      	lsls	r2, r2, #29
 8005e4e:	d513      	bpl.n	8005e78 <__swsetup_r+0x60>
 8005e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e52:	2900      	cmp	r1, #0
 8005e54:	d008      	beq.n	8005e68 <__swsetup_r+0x50>
 8005e56:	0023      	movs	r3, r4
 8005e58:	3344      	adds	r3, #68	@ 0x44
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	d002      	beq.n	8005e64 <__swsetup_r+0x4c>
 8005e5e:	0028      	movs	r0, r5
 8005e60:	f000 f8bc 	bl	8005fdc <_free_r>
 8005e64:	2300      	movs	r3, #0
 8005e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e68:	2224      	movs	r2, #36	@ 0x24
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	4393      	bics	r3, r2
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	2300      	movs	r3, #0
 8005e72:	6063      	str	r3, [r4, #4]
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	2308      	movs	r3, #8
 8005e7a:	89a2      	ldrh	r2, [r4, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	81a3      	strh	r3, [r4, #12]
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <__swsetup_r+0x86>
 8005e86:	21a0      	movs	r1, #160	@ 0xa0
 8005e88:	2280      	movs	r2, #128	@ 0x80
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	0089      	lsls	r1, r1, #2
 8005e8e:	0092      	lsls	r2, r2, #2
 8005e90:	400b      	ands	r3, r1
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <__swsetup_r+0x86>
 8005e96:	0021      	movs	r1, r4
 8005e98:	0028      	movs	r0, r5
 8005e9a:	f000 fd39 	bl	8006910 <__smakebuf_r>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	5ee2      	ldrsh	r2, [r4, r3]
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	0013      	movs	r3, r2
 8005ea6:	400b      	ands	r3, r1
 8005ea8:	420a      	tst	r2, r1
 8005eaa:	d00b      	beq.n	8005ec4 <__swsetup_r+0xac>
 8005eac:	2300      	movs	r3, #0
 8005eae:	60a3      	str	r3, [r4, #8]
 8005eb0:	6963      	ldr	r3, [r4, #20]
 8005eb2:	425b      	negs	r3, r3
 8005eb4:	61a3      	str	r3, [r4, #24]
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	4283      	cmp	r3, r0
 8005ebc:	d101      	bne.n	8005ec2 <__swsetup_r+0xaa>
 8005ebe:	0613      	lsls	r3, r2, #24
 8005ec0:	d4be      	bmi.n	8005e40 <__swsetup_r+0x28>
 8005ec2:	bd70      	pop	{r4, r5, r6, pc}
 8005ec4:	0791      	lsls	r1, r2, #30
 8005ec6:	d400      	bmi.n	8005eca <__swsetup_r+0xb2>
 8005ec8:	6963      	ldr	r3, [r4, #20]
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	e7f3      	b.n	8005eb6 <__swsetup_r+0x9e>
 8005ece:	46c0      	nop			@ (mov r8, r8)
 8005ed0:	20000018 	.word	0x20000018

08005ed4 <memset>:
 8005ed4:	0003      	movs	r3, r0
 8005ed6:	1882      	adds	r2, r0, r2
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d100      	bne.n	8005ede <memset+0xa>
 8005edc:	4770      	bx	lr
 8005ede:	7019      	strb	r1, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	e7f9      	b.n	8005ed8 <memset+0x4>

08005ee4 <_close_r>:
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	b570      	push	{r4, r5, r6, lr}
 8005ee8:	4d06      	ldr	r5, [pc, #24]	@ (8005f04 <_close_r+0x20>)
 8005eea:	0004      	movs	r4, r0
 8005eec:	0008      	movs	r0, r1
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	f7fa fe0d 	bl	8000b0e <_close>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d103      	bne.n	8005f00 <_close_r+0x1c>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d000      	beq.n	8005f00 <_close_r+0x1c>
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	20000580 	.word	0x20000580

08005f08 <_lseek_r>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	0004      	movs	r4, r0
 8005f0c:	0008      	movs	r0, r1
 8005f0e:	0011      	movs	r1, r2
 8005f10:	001a      	movs	r2, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	4d05      	ldr	r5, [pc, #20]	@ (8005f2c <_lseek_r+0x24>)
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	f7fa fe1a 	bl	8000b50 <_lseek>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d103      	bne.n	8005f28 <_lseek_r+0x20>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <_lseek_r+0x20>
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	20000580 	.word	0x20000580

08005f30 <_read_r>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	0004      	movs	r4, r0
 8005f34:	0008      	movs	r0, r1
 8005f36:	0011      	movs	r1, r2
 8005f38:	001a      	movs	r2, r3
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4d05      	ldr	r5, [pc, #20]	@ (8005f54 <_read_r+0x24>)
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fa fdac 	bl	8000a9c <_read>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d103      	bne.n	8005f50 <_read_r+0x20>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d000      	beq.n	8005f50 <_read_r+0x20>
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	bd70      	pop	{r4, r5, r6, pc}
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	20000580 	.word	0x20000580

08005f58 <_write_r>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	0004      	movs	r4, r0
 8005f5c:	0008      	movs	r0, r1
 8005f5e:	0011      	movs	r1, r2
 8005f60:	001a      	movs	r2, r3
 8005f62:	2300      	movs	r3, #0
 8005f64:	4d05      	ldr	r5, [pc, #20]	@ (8005f7c <_write_r+0x24>)
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	f7fa fdb5 	bl	8000ad6 <_write>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d103      	bne.n	8005f78 <_write_r+0x20>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d000      	beq.n	8005f78 <_write_r+0x20>
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	20000580 	.word	0x20000580

08005f80 <__errno>:
 8005f80:	4b01      	ldr	r3, [pc, #4]	@ (8005f88 <__errno+0x8>)
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	4770      	bx	lr
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	20000018 	.word	0x20000018

08005f8c <__libc_init_array>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	2600      	movs	r6, #0
 8005f90:	4c0c      	ldr	r4, [pc, #48]	@ (8005fc4 <__libc_init_array+0x38>)
 8005f92:	4d0d      	ldr	r5, [pc, #52]	@ (8005fc8 <__libc_init_array+0x3c>)
 8005f94:	1b64      	subs	r4, r4, r5
 8005f96:	10a4      	asrs	r4, r4, #2
 8005f98:	42a6      	cmp	r6, r4
 8005f9a:	d109      	bne.n	8005fb0 <__libc_init_array+0x24>
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	f000 fd3b 	bl	8006a18 <_init>
 8005fa2:	4c0a      	ldr	r4, [pc, #40]	@ (8005fcc <__libc_init_array+0x40>)
 8005fa4:	4d0a      	ldr	r5, [pc, #40]	@ (8005fd0 <__libc_init_array+0x44>)
 8005fa6:	1b64      	subs	r4, r4, r5
 8005fa8:	10a4      	asrs	r4, r4, #2
 8005faa:	42a6      	cmp	r6, r4
 8005fac:	d105      	bne.n	8005fba <__libc_init_array+0x2e>
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	00b3      	lsls	r3, r6, #2
 8005fb2:	58eb      	ldr	r3, [r5, r3]
 8005fb4:	4798      	blx	r3
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	e7ee      	b.n	8005f98 <__libc_init_array+0xc>
 8005fba:	00b3      	lsls	r3, r6, #2
 8005fbc:	58eb      	ldr	r3, [r5, r3]
 8005fbe:	4798      	blx	r3
 8005fc0:	3601      	adds	r6, #1
 8005fc2:	e7f2      	b.n	8005faa <__libc_init_array+0x1e>
 8005fc4:	08006c24 	.word	0x08006c24
 8005fc8:	08006c24 	.word	0x08006c24
 8005fcc:	08006c28 	.word	0x08006c28
 8005fd0:	08006c24 	.word	0x08006c24

08005fd4 <__retarget_lock_init_recursive>:
 8005fd4:	4770      	bx	lr

08005fd6 <__retarget_lock_acquire_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <__retarget_lock_release_recursive>:
 8005fd8:	4770      	bx	lr
	...

08005fdc <_free_r>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	0005      	movs	r5, r0
 8005fe0:	1e0c      	subs	r4, r1, #0
 8005fe2:	d010      	beq.n	8006006 <_free_r+0x2a>
 8005fe4:	3c04      	subs	r4, #4
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da00      	bge.n	8005fee <_free_r+0x12>
 8005fec:	18e4      	adds	r4, r4, r3
 8005fee:	0028      	movs	r0, r5
 8005ff0:	f000 f8e0 	bl	80061b4 <__malloc_lock>
 8005ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800606c <_free_r+0x90>)
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <_free_r+0x2c>
 8005ffc:	6063      	str	r3, [r4, #4]
 8005ffe:	6014      	str	r4, [r2, #0]
 8006000:	0028      	movs	r0, r5
 8006002:	f000 f8df 	bl	80061c4 <__malloc_unlock>
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	42a3      	cmp	r3, r4
 800600a:	d908      	bls.n	800601e <_free_r+0x42>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	1821      	adds	r1, r4, r0
 8006010:	428b      	cmp	r3, r1
 8006012:	d1f3      	bne.n	8005ffc <_free_r+0x20>
 8006014:	6819      	ldr	r1, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	1809      	adds	r1, r1, r0
 800601a:	6021      	str	r1, [r4, #0]
 800601c:	e7ee      	b.n	8005ffc <_free_r+0x20>
 800601e:	001a      	movs	r2, r3
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <_free_r+0x4e>
 8006026:	42a3      	cmp	r3, r4
 8006028:	d9f9      	bls.n	800601e <_free_r+0x42>
 800602a:	6811      	ldr	r1, [r2, #0]
 800602c:	1850      	adds	r0, r2, r1
 800602e:	42a0      	cmp	r0, r4
 8006030:	d10b      	bne.n	800604a <_free_r+0x6e>
 8006032:	6820      	ldr	r0, [r4, #0]
 8006034:	1809      	adds	r1, r1, r0
 8006036:	1850      	adds	r0, r2, r1
 8006038:	6011      	str	r1, [r2, #0]
 800603a:	4283      	cmp	r3, r0
 800603c:	d1e0      	bne.n	8006000 <_free_r+0x24>
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	1841      	adds	r1, r0, r1
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	6053      	str	r3, [r2, #4]
 8006048:	e7da      	b.n	8006000 <_free_r+0x24>
 800604a:	42a0      	cmp	r0, r4
 800604c:	d902      	bls.n	8006054 <_free_r+0x78>
 800604e:	230c      	movs	r3, #12
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	e7d5      	b.n	8006000 <_free_r+0x24>
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	1821      	adds	r1, r4, r0
 8006058:	428b      	cmp	r3, r1
 800605a:	d103      	bne.n	8006064 <_free_r+0x88>
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	1809      	adds	r1, r1, r0
 8006062:	6021      	str	r1, [r4, #0]
 8006064:	6063      	str	r3, [r4, #4]
 8006066:	6054      	str	r4, [r2, #4]
 8006068:	e7ca      	b.n	8006000 <_free_r+0x24>
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	2000058c 	.word	0x2000058c

08006070 <sbrk_aligned>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4e0f      	ldr	r6, [pc, #60]	@ (80060b0 <sbrk_aligned+0x40>)
 8006074:	000d      	movs	r5, r1
 8006076:	6831      	ldr	r1, [r6, #0]
 8006078:	0004      	movs	r4, r0
 800607a:	2900      	cmp	r1, #0
 800607c:	d102      	bne.n	8006084 <sbrk_aligned+0x14>
 800607e:	f000 fcad 	bl	80069dc <_sbrk_r>
 8006082:	6030      	str	r0, [r6, #0]
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f000 fca8 	bl	80069dc <_sbrk_r>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d103      	bne.n	8006098 <sbrk_aligned+0x28>
 8006090:	2501      	movs	r5, #1
 8006092:	426d      	negs	r5, r5
 8006094:	0028      	movs	r0, r5
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	2303      	movs	r3, #3
 800609a:	1cc5      	adds	r5, r0, #3
 800609c:	439d      	bics	r5, r3
 800609e:	42a8      	cmp	r0, r5
 80060a0:	d0f8      	beq.n	8006094 <sbrk_aligned+0x24>
 80060a2:	1a29      	subs	r1, r5, r0
 80060a4:	0020      	movs	r0, r4
 80060a6:	f000 fc99 	bl	80069dc <_sbrk_r>
 80060aa:	3001      	adds	r0, #1
 80060ac:	d1f2      	bne.n	8006094 <sbrk_aligned+0x24>
 80060ae:	e7ef      	b.n	8006090 <sbrk_aligned+0x20>
 80060b0:	20000588 	.word	0x20000588

080060b4 <_malloc_r>:
 80060b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060b6:	2203      	movs	r2, #3
 80060b8:	1ccb      	adds	r3, r1, #3
 80060ba:	4393      	bics	r3, r2
 80060bc:	3308      	adds	r3, #8
 80060be:	0005      	movs	r5, r0
 80060c0:	001f      	movs	r7, r3
 80060c2:	2b0c      	cmp	r3, #12
 80060c4:	d234      	bcs.n	8006130 <_malloc_r+0x7c>
 80060c6:	270c      	movs	r7, #12
 80060c8:	42b9      	cmp	r1, r7
 80060ca:	d833      	bhi.n	8006134 <_malloc_r+0x80>
 80060cc:	0028      	movs	r0, r5
 80060ce:	f000 f871 	bl	80061b4 <__malloc_lock>
 80060d2:	4e37      	ldr	r6, [pc, #220]	@ (80061b0 <_malloc_r+0xfc>)
 80060d4:	6833      	ldr	r3, [r6, #0]
 80060d6:	001c      	movs	r4, r3
 80060d8:	2c00      	cmp	r4, #0
 80060da:	d12f      	bne.n	800613c <_malloc_r+0x88>
 80060dc:	0039      	movs	r1, r7
 80060de:	0028      	movs	r0, r5
 80060e0:	f7ff ffc6 	bl	8006070 <sbrk_aligned>
 80060e4:	0004      	movs	r4, r0
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	d15f      	bne.n	80061aa <_malloc_r+0xf6>
 80060ea:	6834      	ldr	r4, [r6, #0]
 80060ec:	9400      	str	r4, [sp, #0]
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d14a      	bne.n	800618a <_malloc_r+0xd6>
 80060f4:	2c00      	cmp	r4, #0
 80060f6:	d052      	beq.n	800619e <_malloc_r+0xea>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	0028      	movs	r0, r5
 80060fc:	18e3      	adds	r3, r4, r3
 80060fe:	9900      	ldr	r1, [sp, #0]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	f000 fc6b 	bl	80069dc <_sbrk_r>
 8006106:	9b01      	ldr	r3, [sp, #4]
 8006108:	4283      	cmp	r3, r0
 800610a:	d148      	bne.n	800619e <_malloc_r+0xea>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	0028      	movs	r0, r5
 8006110:	1aff      	subs	r7, r7, r3
 8006112:	0039      	movs	r1, r7
 8006114:	f7ff ffac 	bl	8006070 <sbrk_aligned>
 8006118:	3001      	adds	r0, #1
 800611a:	d040      	beq.n	800619e <_malloc_r+0xea>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	19db      	adds	r3, r3, r7
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	6833      	ldr	r3, [r6, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	2a00      	cmp	r2, #0
 8006128:	d133      	bne.n	8006192 <_malloc_r+0xde>
 800612a:	9b00      	ldr	r3, [sp, #0]
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	e019      	b.n	8006164 <_malloc_r+0xb0>
 8006130:	2b00      	cmp	r3, #0
 8006132:	dac9      	bge.n	80060c8 <_malloc_r+0x14>
 8006134:	230c      	movs	r3, #12
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	2000      	movs	r0, #0
 800613a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	1bc9      	subs	r1, r1, r7
 8006140:	d420      	bmi.n	8006184 <_malloc_r+0xd0>
 8006142:	290b      	cmp	r1, #11
 8006144:	d90a      	bls.n	800615c <_malloc_r+0xa8>
 8006146:	19e2      	adds	r2, r4, r7
 8006148:	6027      	str	r7, [r4, #0]
 800614a:	42a3      	cmp	r3, r4
 800614c:	d104      	bne.n	8006158 <_malloc_r+0xa4>
 800614e:	6032      	str	r2, [r6, #0]
 8006150:	6863      	ldr	r3, [r4, #4]
 8006152:	6011      	str	r1, [r2, #0]
 8006154:	6053      	str	r3, [r2, #4]
 8006156:	e005      	b.n	8006164 <_malloc_r+0xb0>
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	e7f9      	b.n	8006150 <_malloc_r+0x9c>
 800615c:	6862      	ldr	r2, [r4, #4]
 800615e:	42a3      	cmp	r3, r4
 8006160:	d10e      	bne.n	8006180 <_malloc_r+0xcc>
 8006162:	6032      	str	r2, [r6, #0]
 8006164:	0028      	movs	r0, r5
 8006166:	f000 f82d 	bl	80061c4 <__malloc_unlock>
 800616a:	0020      	movs	r0, r4
 800616c:	2207      	movs	r2, #7
 800616e:	300b      	adds	r0, #11
 8006170:	1d23      	adds	r3, r4, #4
 8006172:	4390      	bics	r0, r2
 8006174:	1ac2      	subs	r2, r0, r3
 8006176:	4298      	cmp	r0, r3
 8006178:	d0df      	beq.n	800613a <_malloc_r+0x86>
 800617a:	1a1b      	subs	r3, r3, r0
 800617c:	50a3      	str	r3, [r4, r2]
 800617e:	e7dc      	b.n	800613a <_malloc_r+0x86>
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	e7ef      	b.n	8006164 <_malloc_r+0xb0>
 8006184:	0023      	movs	r3, r4
 8006186:	6864      	ldr	r4, [r4, #4]
 8006188:	e7a6      	b.n	80060d8 <_malloc_r+0x24>
 800618a:	9c00      	ldr	r4, [sp, #0]
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	e7ad      	b.n	80060ee <_malloc_r+0x3a>
 8006192:	001a      	movs	r2, r3
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	42a3      	cmp	r3, r4
 8006198:	d1fb      	bne.n	8006192 <_malloc_r+0xde>
 800619a:	2300      	movs	r3, #0
 800619c:	e7da      	b.n	8006154 <_malloc_r+0xa0>
 800619e:	230c      	movs	r3, #12
 80061a0:	0028      	movs	r0, r5
 80061a2:	602b      	str	r3, [r5, #0]
 80061a4:	f000 f80e 	bl	80061c4 <__malloc_unlock>
 80061a8:	e7c6      	b.n	8006138 <_malloc_r+0x84>
 80061aa:	6007      	str	r7, [r0, #0]
 80061ac:	e7da      	b.n	8006164 <_malloc_r+0xb0>
 80061ae:	46c0      	nop			@ (mov r8, r8)
 80061b0:	2000058c 	.word	0x2000058c

080061b4 <__malloc_lock>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	4802      	ldr	r0, [pc, #8]	@ (80061c0 <__malloc_lock+0xc>)
 80061b8:	f7ff ff0d 	bl	8005fd6 <__retarget_lock_acquire_recursive>
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	20000584 	.word	0x20000584

080061c4 <__malloc_unlock>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	4802      	ldr	r0, [pc, #8]	@ (80061d0 <__malloc_unlock+0xc>)
 80061c8:	f7ff ff06 	bl	8005fd8 <__retarget_lock_release_recursive>
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	20000584 	.word	0x20000584

080061d4 <__sfputc_r>:
 80061d4:	6893      	ldr	r3, [r2, #8]
 80061d6:	b510      	push	{r4, lr}
 80061d8:	3b01      	subs	r3, #1
 80061da:	6093      	str	r3, [r2, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da04      	bge.n	80061ea <__sfputc_r+0x16>
 80061e0:	6994      	ldr	r4, [r2, #24]
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	db07      	blt.n	80061f6 <__sfputc_r+0x22>
 80061e6:	290a      	cmp	r1, #10
 80061e8:	d005      	beq.n	80061f6 <__sfputc_r+0x22>
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	1c58      	adds	r0, r3, #1
 80061ee:	6010      	str	r0, [r2, #0]
 80061f0:	7019      	strb	r1, [r3, #0]
 80061f2:	0008      	movs	r0, r1
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	f7ff fdcd 	bl	8005d94 <__swbuf_r>
 80061fa:	0001      	movs	r1, r0
 80061fc:	e7f9      	b.n	80061f2 <__sfputc_r+0x1e>

080061fe <__sfputs_r>:
 80061fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006200:	0006      	movs	r6, r0
 8006202:	000f      	movs	r7, r1
 8006204:	0014      	movs	r4, r2
 8006206:	18d5      	adds	r5, r2, r3
 8006208:	42ac      	cmp	r4, r5
 800620a:	d101      	bne.n	8006210 <__sfputs_r+0x12>
 800620c:	2000      	movs	r0, #0
 800620e:	e007      	b.n	8006220 <__sfputs_r+0x22>
 8006210:	7821      	ldrb	r1, [r4, #0]
 8006212:	003a      	movs	r2, r7
 8006214:	0030      	movs	r0, r6
 8006216:	f7ff ffdd 	bl	80061d4 <__sfputc_r>
 800621a:	3401      	adds	r4, #1
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d1f3      	bne.n	8006208 <__sfputs_r+0xa>
 8006220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006224 <_vfiprintf_r>:
 8006224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006226:	b0a1      	sub	sp, #132	@ 0x84
 8006228:	000f      	movs	r7, r1
 800622a:	0015      	movs	r5, r2
 800622c:	001e      	movs	r6, r3
 800622e:	9003      	str	r0, [sp, #12]
 8006230:	2800      	cmp	r0, #0
 8006232:	d004      	beq.n	800623e <_vfiprintf_r+0x1a>
 8006234:	6a03      	ldr	r3, [r0, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <_vfiprintf_r+0x1a>
 800623a:	f7ff fcbb 	bl	8005bb4 <__sinit>
 800623e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006240:	07db      	lsls	r3, r3, #31
 8006242:	d405      	bmi.n	8006250 <_vfiprintf_r+0x2c>
 8006244:	89bb      	ldrh	r3, [r7, #12]
 8006246:	059b      	lsls	r3, r3, #22
 8006248:	d402      	bmi.n	8006250 <_vfiprintf_r+0x2c>
 800624a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800624c:	f7ff fec3 	bl	8005fd6 <__retarget_lock_acquire_recursive>
 8006250:	89bb      	ldrh	r3, [r7, #12]
 8006252:	071b      	lsls	r3, r3, #28
 8006254:	d502      	bpl.n	800625c <_vfiprintf_r+0x38>
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d113      	bne.n	8006284 <_vfiprintf_r+0x60>
 800625c:	0039      	movs	r1, r7
 800625e:	9803      	ldr	r0, [sp, #12]
 8006260:	f7ff fdda 	bl	8005e18 <__swsetup_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	d00d      	beq.n	8006284 <_vfiprintf_r+0x60>
 8006268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800626a:	07db      	lsls	r3, r3, #31
 800626c:	d503      	bpl.n	8006276 <_vfiprintf_r+0x52>
 800626e:	2001      	movs	r0, #1
 8006270:	4240      	negs	r0, r0
 8006272:	b021      	add	sp, #132	@ 0x84
 8006274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006276:	89bb      	ldrh	r3, [r7, #12]
 8006278:	059b      	lsls	r3, r3, #22
 800627a:	d4f8      	bmi.n	800626e <_vfiprintf_r+0x4a>
 800627c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800627e:	f7ff feab 	bl	8005fd8 <__retarget_lock_release_recursive>
 8006282:	e7f4      	b.n	800626e <_vfiprintf_r+0x4a>
 8006284:	2300      	movs	r3, #0
 8006286:	ac08      	add	r4, sp, #32
 8006288:	6163      	str	r3, [r4, #20]
 800628a:	3320      	adds	r3, #32
 800628c:	7663      	strb	r3, [r4, #25]
 800628e:	3310      	adds	r3, #16
 8006290:	76a3      	strb	r3, [r4, #26]
 8006292:	9607      	str	r6, [sp, #28]
 8006294:	002e      	movs	r6, r5
 8006296:	7833      	ldrb	r3, [r6, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <_vfiprintf_r+0x7c>
 800629c:	2b25      	cmp	r3, #37	@ 0x25
 800629e:	d148      	bne.n	8006332 <_vfiprintf_r+0x10e>
 80062a0:	1b73      	subs	r3, r6, r5
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	42ae      	cmp	r6, r5
 80062a6:	d00b      	beq.n	80062c0 <_vfiprintf_r+0x9c>
 80062a8:	002a      	movs	r2, r5
 80062aa:	0039      	movs	r1, r7
 80062ac:	9803      	ldr	r0, [sp, #12]
 80062ae:	f7ff ffa6 	bl	80061fe <__sfputs_r>
 80062b2:	3001      	adds	r0, #1
 80062b4:	d100      	bne.n	80062b8 <_vfiprintf_r+0x94>
 80062b6:	e0ae      	b.n	8006416 <_vfiprintf_r+0x1f2>
 80062b8:	6963      	ldr	r3, [r4, #20]
 80062ba:	9a05      	ldr	r2, [sp, #20]
 80062bc:	189b      	adds	r3, r3, r2
 80062be:	6163      	str	r3, [r4, #20]
 80062c0:	7833      	ldrb	r3, [r6, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d100      	bne.n	80062c8 <_vfiprintf_r+0xa4>
 80062c6:	e0a6      	b.n	8006416 <_vfiprintf_r+0x1f2>
 80062c8:	2201      	movs	r2, #1
 80062ca:	2300      	movs	r3, #0
 80062cc:	4252      	negs	r2, r2
 80062ce:	6062      	str	r2, [r4, #4]
 80062d0:	a904      	add	r1, sp, #16
 80062d2:	3254      	adds	r2, #84	@ 0x54
 80062d4:	1852      	adds	r2, r2, r1
 80062d6:	1c75      	adds	r5, r6, #1
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	60e3      	str	r3, [r4, #12]
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	7013      	strb	r3, [r2, #0]
 80062e0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80062e2:	4b59      	ldr	r3, [pc, #356]	@ (8006448 <_vfiprintf_r+0x224>)
 80062e4:	2205      	movs	r2, #5
 80062e6:	0018      	movs	r0, r3
 80062e8:	7829      	ldrb	r1, [r5, #0]
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	f000 fb88 	bl	8006a00 <memchr>
 80062f0:	1c6e      	adds	r6, r5, #1
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d11f      	bne.n	8006336 <_vfiprintf_r+0x112>
 80062f6:	6822      	ldr	r2, [r4, #0]
 80062f8:	06d3      	lsls	r3, r2, #27
 80062fa:	d504      	bpl.n	8006306 <_vfiprintf_r+0xe2>
 80062fc:	2353      	movs	r3, #83	@ 0x53
 80062fe:	a904      	add	r1, sp, #16
 8006300:	185b      	adds	r3, r3, r1
 8006302:	2120      	movs	r1, #32
 8006304:	7019      	strb	r1, [r3, #0]
 8006306:	0713      	lsls	r3, r2, #28
 8006308:	d504      	bpl.n	8006314 <_vfiprintf_r+0xf0>
 800630a:	2353      	movs	r3, #83	@ 0x53
 800630c:	a904      	add	r1, sp, #16
 800630e:	185b      	adds	r3, r3, r1
 8006310:	212b      	movs	r1, #43	@ 0x2b
 8006312:	7019      	strb	r1, [r3, #0]
 8006314:	782b      	ldrb	r3, [r5, #0]
 8006316:	2b2a      	cmp	r3, #42	@ 0x2a
 8006318:	d016      	beq.n	8006348 <_vfiprintf_r+0x124>
 800631a:	002e      	movs	r6, r5
 800631c:	2100      	movs	r1, #0
 800631e:	200a      	movs	r0, #10
 8006320:	68e3      	ldr	r3, [r4, #12]
 8006322:	7832      	ldrb	r2, [r6, #0]
 8006324:	1c75      	adds	r5, r6, #1
 8006326:	3a30      	subs	r2, #48	@ 0x30
 8006328:	2a09      	cmp	r2, #9
 800632a:	d950      	bls.n	80063ce <_vfiprintf_r+0x1aa>
 800632c:	2900      	cmp	r1, #0
 800632e:	d111      	bne.n	8006354 <_vfiprintf_r+0x130>
 8006330:	e017      	b.n	8006362 <_vfiprintf_r+0x13e>
 8006332:	3601      	adds	r6, #1
 8006334:	e7af      	b.n	8006296 <_vfiprintf_r+0x72>
 8006336:	9b05      	ldr	r3, [sp, #20]
 8006338:	6822      	ldr	r2, [r4, #0]
 800633a:	1ac0      	subs	r0, r0, r3
 800633c:	2301      	movs	r3, #1
 800633e:	4083      	lsls	r3, r0
 8006340:	4313      	orrs	r3, r2
 8006342:	0035      	movs	r5, r6
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	e7cc      	b.n	80062e2 <_vfiprintf_r+0xbe>
 8006348:	9b07      	ldr	r3, [sp, #28]
 800634a:	1d19      	adds	r1, r3, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	9107      	str	r1, [sp, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	db01      	blt.n	8006358 <_vfiprintf_r+0x134>
 8006354:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006356:	e004      	b.n	8006362 <_vfiprintf_r+0x13e>
 8006358:	425b      	negs	r3, r3
 800635a:	60e3      	str	r3, [r4, #12]
 800635c:	2302      	movs	r3, #2
 800635e:	4313      	orrs	r3, r2
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	7833      	ldrb	r3, [r6, #0]
 8006364:	2b2e      	cmp	r3, #46	@ 0x2e
 8006366:	d10c      	bne.n	8006382 <_vfiprintf_r+0x15e>
 8006368:	7873      	ldrb	r3, [r6, #1]
 800636a:	2b2a      	cmp	r3, #42	@ 0x2a
 800636c:	d134      	bne.n	80063d8 <_vfiprintf_r+0x1b4>
 800636e:	9b07      	ldr	r3, [sp, #28]
 8006370:	3602      	adds	r6, #2
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	9207      	str	r2, [sp, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	da01      	bge.n	8006380 <_vfiprintf_r+0x15c>
 800637c:	2301      	movs	r3, #1
 800637e:	425b      	negs	r3, r3
 8006380:	9309      	str	r3, [sp, #36]	@ 0x24
 8006382:	4d32      	ldr	r5, [pc, #200]	@ (800644c <_vfiprintf_r+0x228>)
 8006384:	2203      	movs	r2, #3
 8006386:	0028      	movs	r0, r5
 8006388:	7831      	ldrb	r1, [r6, #0]
 800638a:	f000 fb39 	bl	8006a00 <memchr>
 800638e:	2800      	cmp	r0, #0
 8006390:	d006      	beq.n	80063a0 <_vfiprintf_r+0x17c>
 8006392:	2340      	movs	r3, #64	@ 0x40
 8006394:	1b40      	subs	r0, r0, r5
 8006396:	4083      	lsls	r3, r0
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	3601      	adds	r6, #1
 800639c:	4313      	orrs	r3, r2
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	7831      	ldrb	r1, [r6, #0]
 80063a2:	2206      	movs	r2, #6
 80063a4:	482a      	ldr	r0, [pc, #168]	@ (8006450 <_vfiprintf_r+0x22c>)
 80063a6:	1c75      	adds	r5, r6, #1
 80063a8:	7621      	strb	r1, [r4, #24]
 80063aa:	f000 fb29 	bl	8006a00 <memchr>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d040      	beq.n	8006434 <_vfiprintf_r+0x210>
 80063b2:	4b28      	ldr	r3, [pc, #160]	@ (8006454 <_vfiprintf_r+0x230>)
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d122      	bne.n	80063fe <_vfiprintf_r+0x1da>
 80063b8:	2207      	movs	r2, #7
 80063ba:	9b07      	ldr	r3, [sp, #28]
 80063bc:	3307      	adds	r3, #7
 80063be:	4393      	bics	r3, r2
 80063c0:	3308      	adds	r3, #8
 80063c2:	9307      	str	r3, [sp, #28]
 80063c4:	6963      	ldr	r3, [r4, #20]
 80063c6:	9a04      	ldr	r2, [sp, #16]
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	6163      	str	r3, [r4, #20]
 80063cc:	e762      	b.n	8006294 <_vfiprintf_r+0x70>
 80063ce:	4343      	muls	r3, r0
 80063d0:	002e      	movs	r6, r5
 80063d2:	2101      	movs	r1, #1
 80063d4:	189b      	adds	r3, r3, r2
 80063d6:	e7a4      	b.n	8006322 <_vfiprintf_r+0xfe>
 80063d8:	2300      	movs	r3, #0
 80063da:	200a      	movs	r0, #10
 80063dc:	0019      	movs	r1, r3
 80063de:	3601      	adds	r6, #1
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	7832      	ldrb	r2, [r6, #0]
 80063e4:	1c75      	adds	r5, r6, #1
 80063e6:	3a30      	subs	r2, #48	@ 0x30
 80063e8:	2a09      	cmp	r2, #9
 80063ea:	d903      	bls.n	80063f4 <_vfiprintf_r+0x1d0>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0c8      	beq.n	8006382 <_vfiprintf_r+0x15e>
 80063f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80063f2:	e7c6      	b.n	8006382 <_vfiprintf_r+0x15e>
 80063f4:	4341      	muls	r1, r0
 80063f6:	002e      	movs	r6, r5
 80063f8:	2301      	movs	r3, #1
 80063fa:	1889      	adds	r1, r1, r2
 80063fc:	e7f1      	b.n	80063e2 <_vfiprintf_r+0x1be>
 80063fe:	aa07      	add	r2, sp, #28
 8006400:	9200      	str	r2, [sp, #0]
 8006402:	0021      	movs	r1, r4
 8006404:	003a      	movs	r2, r7
 8006406:	4b14      	ldr	r3, [pc, #80]	@ (8006458 <_vfiprintf_r+0x234>)
 8006408:	9803      	ldr	r0, [sp, #12]
 800640a:	e000      	b.n	800640e <_vfiprintf_r+0x1ea>
 800640c:	bf00      	nop
 800640e:	9004      	str	r0, [sp, #16]
 8006410:	9b04      	ldr	r3, [sp, #16]
 8006412:	3301      	adds	r3, #1
 8006414:	d1d6      	bne.n	80063c4 <_vfiprintf_r+0x1a0>
 8006416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006418:	07db      	lsls	r3, r3, #31
 800641a:	d405      	bmi.n	8006428 <_vfiprintf_r+0x204>
 800641c:	89bb      	ldrh	r3, [r7, #12]
 800641e:	059b      	lsls	r3, r3, #22
 8006420:	d402      	bmi.n	8006428 <_vfiprintf_r+0x204>
 8006422:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006424:	f7ff fdd8 	bl	8005fd8 <__retarget_lock_release_recursive>
 8006428:	89bb      	ldrh	r3, [r7, #12]
 800642a:	065b      	lsls	r3, r3, #25
 800642c:	d500      	bpl.n	8006430 <_vfiprintf_r+0x20c>
 800642e:	e71e      	b.n	800626e <_vfiprintf_r+0x4a>
 8006430:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006432:	e71e      	b.n	8006272 <_vfiprintf_r+0x4e>
 8006434:	aa07      	add	r2, sp, #28
 8006436:	9200      	str	r2, [sp, #0]
 8006438:	0021      	movs	r1, r4
 800643a:	003a      	movs	r2, r7
 800643c:	4b06      	ldr	r3, [pc, #24]	@ (8006458 <_vfiprintf_r+0x234>)
 800643e:	9803      	ldr	r0, [sp, #12]
 8006440:	f000 f87c 	bl	800653c <_printf_i>
 8006444:	e7e3      	b.n	800640e <_vfiprintf_r+0x1ea>
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	08006bf0 	.word	0x08006bf0
 800644c:	08006bf6 	.word	0x08006bf6
 8006450:	08006bfa 	.word	0x08006bfa
 8006454:	00000000 	.word	0x00000000
 8006458:	080061ff 	.word	0x080061ff

0800645c <_printf_common>:
 800645c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800645e:	0016      	movs	r6, r2
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	688a      	ldr	r2, [r1, #8]
 8006464:	690b      	ldr	r3, [r1, #16]
 8006466:	000c      	movs	r4, r1
 8006468:	9000      	str	r0, [sp, #0]
 800646a:	4293      	cmp	r3, r2
 800646c:	da00      	bge.n	8006470 <_printf_common+0x14>
 800646e:	0013      	movs	r3, r2
 8006470:	0022      	movs	r2, r4
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	3243      	adds	r2, #67	@ 0x43
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	2a00      	cmp	r2, #0
 800647a:	d001      	beq.n	8006480 <_printf_common+0x24>
 800647c:	3301      	adds	r3, #1
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	069b      	lsls	r3, r3, #26
 8006484:	d502      	bpl.n	800648c <_printf_common+0x30>
 8006486:	6833      	ldr	r3, [r6, #0]
 8006488:	3302      	adds	r3, #2
 800648a:	6033      	str	r3, [r6, #0]
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	2306      	movs	r3, #6
 8006490:	0015      	movs	r5, r2
 8006492:	401d      	ands	r5, r3
 8006494:	421a      	tst	r2, r3
 8006496:	d027      	beq.n	80064e8 <_printf_common+0x8c>
 8006498:	0023      	movs	r3, r4
 800649a:	3343      	adds	r3, #67	@ 0x43
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	1e5a      	subs	r2, r3, #1
 80064a0:	4193      	sbcs	r3, r2
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	0692      	lsls	r2, r2, #26
 80064a6:	d430      	bmi.n	800650a <_printf_common+0xae>
 80064a8:	0022      	movs	r2, r4
 80064aa:	9901      	ldr	r1, [sp, #4]
 80064ac:	9800      	ldr	r0, [sp, #0]
 80064ae:	9d08      	ldr	r5, [sp, #32]
 80064b0:	3243      	adds	r2, #67	@ 0x43
 80064b2:	47a8      	blx	r5
 80064b4:	3001      	adds	r0, #1
 80064b6:	d025      	beq.n	8006504 <_printf_common+0xa8>
 80064b8:	2206      	movs	r2, #6
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	2500      	movs	r5, #0
 80064be:	4013      	ands	r3, r2
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d105      	bne.n	80064d0 <_printf_common+0x74>
 80064c4:	6833      	ldr	r3, [r6, #0]
 80064c6:	68e5      	ldr	r5, [r4, #12]
 80064c8:	1aed      	subs	r5, r5, r3
 80064ca:	43eb      	mvns	r3, r5
 80064cc:	17db      	asrs	r3, r3, #31
 80064ce:	401d      	ands	r5, r3
 80064d0:	68a3      	ldr	r3, [r4, #8]
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	4293      	cmp	r3, r2
 80064d6:	dd01      	ble.n	80064dc <_printf_common+0x80>
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	18ed      	adds	r5, r5, r3
 80064dc:	2600      	movs	r6, #0
 80064de:	42b5      	cmp	r5, r6
 80064e0:	d120      	bne.n	8006524 <_printf_common+0xc8>
 80064e2:	2000      	movs	r0, #0
 80064e4:	e010      	b.n	8006508 <_printf_common+0xac>
 80064e6:	3501      	adds	r5, #1
 80064e8:	68e3      	ldr	r3, [r4, #12]
 80064ea:	6832      	ldr	r2, [r6, #0]
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	42ab      	cmp	r3, r5
 80064f0:	ddd2      	ble.n	8006498 <_printf_common+0x3c>
 80064f2:	0022      	movs	r2, r4
 80064f4:	2301      	movs	r3, #1
 80064f6:	9901      	ldr	r1, [sp, #4]
 80064f8:	9800      	ldr	r0, [sp, #0]
 80064fa:	9f08      	ldr	r7, [sp, #32]
 80064fc:	3219      	adds	r2, #25
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	d1f0      	bne.n	80064e6 <_printf_common+0x8a>
 8006504:	2001      	movs	r0, #1
 8006506:	4240      	negs	r0, r0
 8006508:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800650a:	2030      	movs	r0, #48	@ 0x30
 800650c:	18e1      	adds	r1, r4, r3
 800650e:	3143      	adds	r1, #67	@ 0x43
 8006510:	7008      	strb	r0, [r1, #0]
 8006512:	0021      	movs	r1, r4
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	3145      	adds	r1, #69	@ 0x45
 8006518:	7809      	ldrb	r1, [r1, #0]
 800651a:	18a2      	adds	r2, r4, r2
 800651c:	3243      	adds	r2, #67	@ 0x43
 800651e:	3302      	adds	r3, #2
 8006520:	7011      	strb	r1, [r2, #0]
 8006522:	e7c1      	b.n	80064a8 <_printf_common+0x4c>
 8006524:	0022      	movs	r2, r4
 8006526:	2301      	movs	r3, #1
 8006528:	9901      	ldr	r1, [sp, #4]
 800652a:	9800      	ldr	r0, [sp, #0]
 800652c:	9f08      	ldr	r7, [sp, #32]
 800652e:	321a      	adds	r2, #26
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	d0e6      	beq.n	8006504 <_printf_common+0xa8>
 8006536:	3601      	adds	r6, #1
 8006538:	e7d1      	b.n	80064de <_printf_common+0x82>
	...

0800653c <_printf_i>:
 800653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653e:	b08b      	sub	sp, #44	@ 0x2c
 8006540:	9206      	str	r2, [sp, #24]
 8006542:	000a      	movs	r2, r1
 8006544:	3243      	adds	r2, #67	@ 0x43
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	9005      	str	r0, [sp, #20]
 800654a:	9203      	str	r2, [sp, #12]
 800654c:	7e0a      	ldrb	r2, [r1, #24]
 800654e:	000c      	movs	r4, r1
 8006550:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006552:	2a78      	cmp	r2, #120	@ 0x78
 8006554:	d809      	bhi.n	800656a <_printf_i+0x2e>
 8006556:	2a62      	cmp	r2, #98	@ 0x62
 8006558:	d80b      	bhi.n	8006572 <_printf_i+0x36>
 800655a:	2a00      	cmp	r2, #0
 800655c:	d100      	bne.n	8006560 <_printf_i+0x24>
 800655e:	e0bc      	b.n	80066da <_printf_i+0x19e>
 8006560:	497b      	ldr	r1, [pc, #492]	@ (8006750 <_printf_i+0x214>)
 8006562:	9104      	str	r1, [sp, #16]
 8006564:	2a58      	cmp	r2, #88	@ 0x58
 8006566:	d100      	bne.n	800656a <_printf_i+0x2e>
 8006568:	e090      	b.n	800668c <_printf_i+0x150>
 800656a:	0025      	movs	r5, r4
 800656c:	3542      	adds	r5, #66	@ 0x42
 800656e:	702a      	strb	r2, [r5, #0]
 8006570:	e022      	b.n	80065b8 <_printf_i+0x7c>
 8006572:	0010      	movs	r0, r2
 8006574:	3863      	subs	r0, #99	@ 0x63
 8006576:	2815      	cmp	r0, #21
 8006578:	d8f7      	bhi.n	800656a <_printf_i+0x2e>
 800657a:	f7f9 fdc5 	bl	8000108 <__gnu_thumb1_case_shi>
 800657e:	0016      	.short	0x0016
 8006580:	fff6001f 	.word	0xfff6001f
 8006584:	fff6fff6 	.word	0xfff6fff6
 8006588:	001ffff6 	.word	0x001ffff6
 800658c:	fff6fff6 	.word	0xfff6fff6
 8006590:	fff6fff6 	.word	0xfff6fff6
 8006594:	003600a1 	.word	0x003600a1
 8006598:	fff60080 	.word	0xfff60080
 800659c:	00b2fff6 	.word	0x00b2fff6
 80065a0:	0036fff6 	.word	0x0036fff6
 80065a4:	fff6fff6 	.word	0xfff6fff6
 80065a8:	0084      	.short	0x0084
 80065aa:	0025      	movs	r5, r4
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	3542      	adds	r5, #66	@ 0x42
 80065b0:	1d11      	adds	r1, r2, #4
 80065b2:	6019      	str	r1, [r3, #0]
 80065b4:	6813      	ldr	r3, [r2, #0]
 80065b6:	702b      	strb	r3, [r5, #0]
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0a0      	b.n	80066fe <_printf_i+0x1c2>
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	6809      	ldr	r1, [r1, #0]
 80065c0:	1d02      	adds	r2, r0, #4
 80065c2:	060d      	lsls	r5, r1, #24
 80065c4:	d50b      	bpl.n	80065de <_printf_i+0xa2>
 80065c6:	6806      	ldr	r6, [r0, #0]
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	da03      	bge.n	80065d6 <_printf_i+0x9a>
 80065ce:	232d      	movs	r3, #45	@ 0x2d
 80065d0:	9a03      	ldr	r2, [sp, #12]
 80065d2:	4276      	negs	r6, r6
 80065d4:	7013      	strb	r3, [r2, #0]
 80065d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006750 <_printf_i+0x214>)
 80065d8:	270a      	movs	r7, #10
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	e018      	b.n	8006610 <_printf_i+0xd4>
 80065de:	6806      	ldr	r6, [r0, #0]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	0649      	lsls	r1, r1, #25
 80065e4:	d5f1      	bpl.n	80065ca <_printf_i+0x8e>
 80065e6:	b236      	sxth	r6, r6
 80065e8:	e7ef      	b.n	80065ca <_printf_i+0x8e>
 80065ea:	6808      	ldr	r0, [r1, #0]
 80065ec:	6819      	ldr	r1, [r3, #0]
 80065ee:	c940      	ldmia	r1!, {r6}
 80065f0:	0605      	lsls	r5, r0, #24
 80065f2:	d402      	bmi.n	80065fa <_printf_i+0xbe>
 80065f4:	0640      	lsls	r0, r0, #25
 80065f6:	d500      	bpl.n	80065fa <_printf_i+0xbe>
 80065f8:	b2b6      	uxth	r6, r6
 80065fa:	6019      	str	r1, [r3, #0]
 80065fc:	4b54      	ldr	r3, [pc, #336]	@ (8006750 <_printf_i+0x214>)
 80065fe:	270a      	movs	r7, #10
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	2a6f      	cmp	r2, #111	@ 0x6f
 8006604:	d100      	bne.n	8006608 <_printf_i+0xcc>
 8006606:	3f02      	subs	r7, #2
 8006608:	0023      	movs	r3, r4
 800660a:	2200      	movs	r2, #0
 800660c:	3343      	adds	r3, #67	@ 0x43
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	60a3      	str	r3, [r4, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	db03      	blt.n	8006620 <_printf_i+0xe4>
 8006618:	2104      	movs	r1, #4
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	438a      	bics	r2, r1
 800661e:	6022      	str	r2, [r4, #0]
 8006620:	2e00      	cmp	r6, #0
 8006622:	d102      	bne.n	800662a <_printf_i+0xee>
 8006624:	9d03      	ldr	r5, [sp, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <_printf_i+0x108>
 800662a:	9d03      	ldr	r5, [sp, #12]
 800662c:	0030      	movs	r0, r6
 800662e:	0039      	movs	r1, r7
 8006630:	f7f9 fdfa 	bl	8000228 <__aeabi_uidivmod>
 8006634:	9b04      	ldr	r3, [sp, #16]
 8006636:	3d01      	subs	r5, #1
 8006638:	5c5b      	ldrb	r3, [r3, r1]
 800663a:	702b      	strb	r3, [r5, #0]
 800663c:	0033      	movs	r3, r6
 800663e:	0006      	movs	r6, r0
 8006640:	429f      	cmp	r7, r3
 8006642:	d9f3      	bls.n	800662c <_printf_i+0xf0>
 8006644:	2f08      	cmp	r7, #8
 8006646:	d109      	bne.n	800665c <_printf_i+0x120>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07db      	lsls	r3, r3, #31
 800664c:	d506      	bpl.n	800665c <_printf_i+0x120>
 800664e:	6862      	ldr	r2, [r4, #4]
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	429a      	cmp	r2, r3
 8006654:	dc02      	bgt.n	800665c <_printf_i+0x120>
 8006656:	2330      	movs	r3, #48	@ 0x30
 8006658:	3d01      	subs	r5, #1
 800665a:	702b      	strb	r3, [r5, #0]
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	1b5b      	subs	r3, r3, r5
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	9b07      	ldr	r3, [sp, #28]
 8006664:	0021      	movs	r1, r4
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	9805      	ldr	r0, [sp, #20]
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	aa09      	add	r2, sp, #36	@ 0x24
 800666e:	f7ff fef5 	bl	800645c <_printf_common>
 8006672:	3001      	adds	r0, #1
 8006674:	d148      	bne.n	8006708 <_printf_i+0x1cc>
 8006676:	2001      	movs	r0, #1
 8006678:	4240      	negs	r0, r0
 800667a:	b00b      	add	sp, #44	@ 0x2c
 800667c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667e:	2220      	movs	r2, #32
 8006680:	6809      	ldr	r1, [r1, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	6022      	str	r2, [r4, #0]
 8006686:	2278      	movs	r2, #120	@ 0x78
 8006688:	4932      	ldr	r1, [pc, #200]	@ (8006754 <_printf_i+0x218>)
 800668a:	9104      	str	r1, [sp, #16]
 800668c:	0021      	movs	r1, r4
 800668e:	3145      	adds	r1, #69	@ 0x45
 8006690:	700a      	strb	r2, [r1, #0]
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	c940      	ldmia	r1!, {r6}
 8006698:	0610      	lsls	r0, r2, #24
 800669a:	d402      	bmi.n	80066a2 <_printf_i+0x166>
 800669c:	0650      	lsls	r0, r2, #25
 800669e:	d500      	bpl.n	80066a2 <_printf_i+0x166>
 80066a0:	b2b6      	uxth	r6, r6
 80066a2:	6019      	str	r1, [r3, #0]
 80066a4:	07d3      	lsls	r3, r2, #31
 80066a6:	d502      	bpl.n	80066ae <_printf_i+0x172>
 80066a8:	2320      	movs	r3, #32
 80066aa:	4313      	orrs	r3, r2
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d001      	beq.n	80066b6 <_printf_i+0x17a>
 80066b2:	2710      	movs	r7, #16
 80066b4:	e7a8      	b.n	8006608 <_printf_i+0xcc>
 80066b6:	2220      	movs	r2, #32
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	4393      	bics	r3, r2
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	e7f8      	b.n	80066b2 <_printf_i+0x176>
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	680d      	ldr	r5, [r1, #0]
 80066c4:	1d10      	adds	r0, r2, #4
 80066c6:	6949      	ldr	r1, [r1, #20]
 80066c8:	6018      	str	r0, [r3, #0]
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	062e      	lsls	r6, r5, #24
 80066ce:	d501      	bpl.n	80066d4 <_printf_i+0x198>
 80066d0:	6019      	str	r1, [r3, #0]
 80066d2:	e002      	b.n	80066da <_printf_i+0x19e>
 80066d4:	066d      	lsls	r5, r5, #25
 80066d6:	d5fb      	bpl.n	80066d0 <_printf_i+0x194>
 80066d8:	8019      	strh	r1, [r3, #0]
 80066da:	2300      	movs	r3, #0
 80066dc:	9d03      	ldr	r5, [sp, #12]
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	e7bf      	b.n	8006662 <_printf_i+0x126>
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	1d11      	adds	r1, r2, #4
 80066e6:	6019      	str	r1, [r3, #0]
 80066e8:	6815      	ldr	r5, [r2, #0]
 80066ea:	2100      	movs	r1, #0
 80066ec:	0028      	movs	r0, r5
 80066ee:	6862      	ldr	r2, [r4, #4]
 80066f0:	f000 f986 	bl	8006a00 <memchr>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d001      	beq.n	80066fc <_printf_i+0x1c0>
 80066f8:	1b40      	subs	r0, r0, r5
 80066fa:	6060      	str	r0, [r4, #4]
 80066fc:	6863      	ldr	r3, [r4, #4]
 80066fe:	6123      	str	r3, [r4, #16]
 8006700:	2300      	movs	r3, #0
 8006702:	9a03      	ldr	r2, [sp, #12]
 8006704:	7013      	strb	r3, [r2, #0]
 8006706:	e7ac      	b.n	8006662 <_printf_i+0x126>
 8006708:	002a      	movs	r2, r5
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	9906      	ldr	r1, [sp, #24]
 800670e:	9805      	ldr	r0, [sp, #20]
 8006710:	9d07      	ldr	r5, [sp, #28]
 8006712:	47a8      	blx	r5
 8006714:	3001      	adds	r0, #1
 8006716:	d0ae      	beq.n	8006676 <_printf_i+0x13a>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	079b      	lsls	r3, r3, #30
 800671c:	d415      	bmi.n	800674a <_printf_i+0x20e>
 800671e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006720:	68e0      	ldr	r0, [r4, #12]
 8006722:	4298      	cmp	r0, r3
 8006724:	daa9      	bge.n	800667a <_printf_i+0x13e>
 8006726:	0018      	movs	r0, r3
 8006728:	e7a7      	b.n	800667a <_printf_i+0x13e>
 800672a:	0022      	movs	r2, r4
 800672c:	2301      	movs	r3, #1
 800672e:	9906      	ldr	r1, [sp, #24]
 8006730:	9805      	ldr	r0, [sp, #20]
 8006732:	9e07      	ldr	r6, [sp, #28]
 8006734:	3219      	adds	r2, #25
 8006736:	47b0      	blx	r6
 8006738:	3001      	adds	r0, #1
 800673a:	d09c      	beq.n	8006676 <_printf_i+0x13a>
 800673c:	3501      	adds	r5, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	42ab      	cmp	r3, r5
 8006746:	dcf0      	bgt.n	800672a <_printf_i+0x1ee>
 8006748:	e7e9      	b.n	800671e <_printf_i+0x1e2>
 800674a:	2500      	movs	r5, #0
 800674c:	e7f7      	b.n	800673e <_printf_i+0x202>
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	08006c01 	.word	0x08006c01
 8006754:	08006c12 	.word	0x08006c12

08006758 <__sflush_r>:
 8006758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800675a:	220c      	movs	r2, #12
 800675c:	5e8b      	ldrsh	r3, [r1, r2]
 800675e:	0005      	movs	r5, r0
 8006760:	000c      	movs	r4, r1
 8006762:	071a      	lsls	r2, r3, #28
 8006764:	d456      	bmi.n	8006814 <__sflush_r+0xbc>
 8006766:	684a      	ldr	r2, [r1, #4]
 8006768:	2a00      	cmp	r2, #0
 800676a:	dc02      	bgt.n	8006772 <__sflush_r+0x1a>
 800676c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800676e:	2a00      	cmp	r2, #0
 8006770:	dd4e      	ble.n	8006810 <__sflush_r+0xb8>
 8006772:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006774:	2f00      	cmp	r7, #0
 8006776:	d04b      	beq.n	8006810 <__sflush_r+0xb8>
 8006778:	2200      	movs	r2, #0
 800677a:	2080      	movs	r0, #128	@ 0x80
 800677c:	682e      	ldr	r6, [r5, #0]
 800677e:	602a      	str	r2, [r5, #0]
 8006780:	001a      	movs	r2, r3
 8006782:	0140      	lsls	r0, r0, #5
 8006784:	6a21      	ldr	r1, [r4, #32]
 8006786:	4002      	ands	r2, r0
 8006788:	4203      	tst	r3, r0
 800678a:	d033      	beq.n	80067f4 <__sflush_r+0x9c>
 800678c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	075b      	lsls	r3, r3, #29
 8006792:	d506      	bpl.n	80067a2 <__sflush_r+0x4a>
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	1ad2      	subs	r2, r2, r3
 8006798:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <__sflush_r+0x4a>
 800679e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067a0:	1ad2      	subs	r2, r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	0028      	movs	r0, r5
 80067a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80067a8:	6a21      	ldr	r1, [r4, #32]
 80067aa:	47b8      	blx	r7
 80067ac:	89a2      	ldrh	r2, [r4, #12]
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	d106      	bne.n	80067c0 <__sflush_r+0x68>
 80067b2:	6829      	ldr	r1, [r5, #0]
 80067b4:	291d      	cmp	r1, #29
 80067b6:	d846      	bhi.n	8006846 <__sflush_r+0xee>
 80067b8:	4b29      	ldr	r3, [pc, #164]	@ (8006860 <__sflush_r+0x108>)
 80067ba:	410b      	asrs	r3, r1
 80067bc:	07db      	lsls	r3, r3, #31
 80067be:	d442      	bmi.n	8006846 <__sflush_r+0xee>
 80067c0:	2300      	movs	r3, #0
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	04d2      	lsls	r2, r2, #19
 80067ca:	d505      	bpl.n	80067d8 <__sflush_r+0x80>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <__sflush_r+0x7e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d100      	bne.n	80067d8 <__sflush_r+0x80>
 80067d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80067d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067da:	602e      	str	r6, [r5, #0]
 80067dc:	2900      	cmp	r1, #0
 80067de:	d017      	beq.n	8006810 <__sflush_r+0xb8>
 80067e0:	0023      	movs	r3, r4
 80067e2:	3344      	adds	r3, #68	@ 0x44
 80067e4:	4299      	cmp	r1, r3
 80067e6:	d002      	beq.n	80067ee <__sflush_r+0x96>
 80067e8:	0028      	movs	r0, r5
 80067ea:	f7ff fbf7 	bl	8005fdc <_free_r>
 80067ee:	2300      	movs	r3, #0
 80067f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067f2:	e00d      	b.n	8006810 <__sflush_r+0xb8>
 80067f4:	2301      	movs	r3, #1
 80067f6:	0028      	movs	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	0002      	movs	r2, r0
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d1c6      	bne.n	800678e <__sflush_r+0x36>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0c3      	beq.n	800678e <__sflush_r+0x36>
 8006806:	2b1d      	cmp	r3, #29
 8006808:	d001      	beq.n	800680e <__sflush_r+0xb6>
 800680a:	2b16      	cmp	r3, #22
 800680c:	d11a      	bne.n	8006844 <__sflush_r+0xec>
 800680e:	602e      	str	r6, [r5, #0]
 8006810:	2000      	movs	r0, #0
 8006812:	e01e      	b.n	8006852 <__sflush_r+0xfa>
 8006814:	690e      	ldr	r6, [r1, #16]
 8006816:	2e00      	cmp	r6, #0
 8006818:	d0fa      	beq.n	8006810 <__sflush_r+0xb8>
 800681a:	680f      	ldr	r7, [r1, #0]
 800681c:	600e      	str	r6, [r1, #0]
 800681e:	1bba      	subs	r2, r7, r6
 8006820:	9201      	str	r2, [sp, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	079b      	lsls	r3, r3, #30
 8006826:	d100      	bne.n	800682a <__sflush_r+0xd2>
 8006828:	694a      	ldr	r2, [r1, #20]
 800682a:	60a2      	str	r2, [r4, #8]
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	ddee      	ble.n	8006810 <__sflush_r+0xb8>
 8006832:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006834:	0032      	movs	r2, r6
 8006836:	001f      	movs	r7, r3
 8006838:	0028      	movs	r0, r5
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	6a21      	ldr	r1, [r4, #32]
 800683e:	47b8      	blx	r7
 8006840:	2800      	cmp	r0, #0
 8006842:	dc07      	bgt.n	8006854 <__sflush_r+0xfc>
 8006844:	89a2      	ldrh	r2, [r4, #12]
 8006846:	2340      	movs	r3, #64	@ 0x40
 8006848:	2001      	movs	r0, #1
 800684a:	4313      	orrs	r3, r2
 800684c:	b21b      	sxth	r3, r3
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	4240      	negs	r0, r0
 8006852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	1836      	adds	r6, r6, r0
 8006858:	1a1b      	subs	r3, r3, r0
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	e7e6      	b.n	800682c <__sflush_r+0xd4>
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	dfbffffe 	.word	0xdfbffffe

08006864 <_fflush_r>:
 8006864:	690b      	ldr	r3, [r1, #16]
 8006866:	b570      	push	{r4, r5, r6, lr}
 8006868:	0005      	movs	r5, r0
 800686a:	000c      	movs	r4, r1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <_fflush_r+0x12>
 8006870:	2500      	movs	r5, #0
 8006872:	0028      	movs	r0, r5
 8006874:	bd70      	pop	{r4, r5, r6, pc}
 8006876:	2800      	cmp	r0, #0
 8006878:	d004      	beq.n	8006884 <_fflush_r+0x20>
 800687a:	6a03      	ldr	r3, [r0, #32]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <_fflush_r+0x20>
 8006880:	f7ff f998 	bl	8005bb4 <__sinit>
 8006884:	220c      	movs	r2, #12
 8006886:	5ea3      	ldrsh	r3, [r4, r2]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0f1      	beq.n	8006870 <_fflush_r+0xc>
 800688c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800688e:	07d2      	lsls	r2, r2, #31
 8006890:	d404      	bmi.n	800689c <_fflush_r+0x38>
 8006892:	059b      	lsls	r3, r3, #22
 8006894:	d402      	bmi.n	800689c <_fflush_r+0x38>
 8006896:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006898:	f7ff fb9d 	bl	8005fd6 <__retarget_lock_acquire_recursive>
 800689c:	0028      	movs	r0, r5
 800689e:	0021      	movs	r1, r4
 80068a0:	f7ff ff5a 	bl	8006758 <__sflush_r>
 80068a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068a6:	0005      	movs	r5, r0
 80068a8:	07db      	lsls	r3, r3, #31
 80068aa:	d4e2      	bmi.n	8006872 <_fflush_r+0xe>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	059b      	lsls	r3, r3, #22
 80068b0:	d4df      	bmi.n	8006872 <_fflush_r+0xe>
 80068b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068b4:	f7ff fb90 	bl	8005fd8 <__retarget_lock_release_recursive>
 80068b8:	e7db      	b.n	8006872 <_fflush_r+0xe>
	...

080068bc <__swhatbuf_r>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	000e      	movs	r6, r1
 80068c0:	001d      	movs	r5, r3
 80068c2:	230e      	movs	r3, #14
 80068c4:	5ec9      	ldrsh	r1, [r1, r3]
 80068c6:	0014      	movs	r4, r2
 80068c8:	b096      	sub	sp, #88	@ 0x58
 80068ca:	2900      	cmp	r1, #0
 80068cc:	da0c      	bge.n	80068e8 <__swhatbuf_r+0x2c>
 80068ce:	89b2      	ldrh	r2, [r6, #12]
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	0011      	movs	r1, r2
 80068d4:	4019      	ands	r1, r3
 80068d6:	421a      	tst	r2, r3
 80068d8:	d114      	bne.n	8006904 <__swhatbuf_r+0x48>
 80068da:	2380      	movs	r3, #128	@ 0x80
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	2000      	movs	r0, #0
 80068e0:	6029      	str	r1, [r5, #0]
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	b016      	add	sp, #88	@ 0x58
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	466a      	mov	r2, sp
 80068ea:	f000 f853 	bl	8006994 <_fstat_r>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	dbed      	blt.n	80068ce <__swhatbuf_r+0x12>
 80068f2:	23f0      	movs	r3, #240	@ 0xf0
 80068f4:	9901      	ldr	r1, [sp, #4]
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	4019      	ands	r1, r3
 80068fa:	4b04      	ldr	r3, [pc, #16]	@ (800690c <__swhatbuf_r+0x50>)
 80068fc:	18c9      	adds	r1, r1, r3
 80068fe:	424b      	negs	r3, r1
 8006900:	4159      	adcs	r1, r3
 8006902:	e7ea      	b.n	80068da <__swhatbuf_r+0x1e>
 8006904:	2100      	movs	r1, #0
 8006906:	2340      	movs	r3, #64	@ 0x40
 8006908:	e7e9      	b.n	80068de <__swhatbuf_r+0x22>
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	ffffe000 	.word	0xffffe000

08006910 <__smakebuf_r>:
 8006910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006912:	2602      	movs	r6, #2
 8006914:	898b      	ldrh	r3, [r1, #12]
 8006916:	0005      	movs	r5, r0
 8006918:	000c      	movs	r4, r1
 800691a:	b085      	sub	sp, #20
 800691c:	4233      	tst	r3, r6
 800691e:	d007      	beq.n	8006930 <__smakebuf_r+0x20>
 8006920:	0023      	movs	r3, r4
 8006922:	3347      	adds	r3, #71	@ 0x47
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	2301      	movs	r3, #1
 800692a:	6163      	str	r3, [r4, #20]
 800692c:	b005      	add	sp, #20
 800692e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006930:	ab03      	add	r3, sp, #12
 8006932:	aa02      	add	r2, sp, #8
 8006934:	f7ff ffc2 	bl	80068bc <__swhatbuf_r>
 8006938:	9f02      	ldr	r7, [sp, #8]
 800693a:	9001      	str	r0, [sp, #4]
 800693c:	0039      	movs	r1, r7
 800693e:	0028      	movs	r0, r5
 8006940:	f7ff fbb8 	bl	80060b4 <_malloc_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	d108      	bne.n	800695a <__smakebuf_r+0x4a>
 8006948:	220c      	movs	r2, #12
 800694a:	5ea3      	ldrsh	r3, [r4, r2]
 800694c:	059a      	lsls	r2, r3, #22
 800694e:	d4ed      	bmi.n	800692c <__smakebuf_r+0x1c>
 8006950:	2203      	movs	r2, #3
 8006952:	4393      	bics	r3, r2
 8006954:	431e      	orrs	r6, r3
 8006956:	81a6      	strh	r6, [r4, #12]
 8006958:	e7e2      	b.n	8006920 <__smakebuf_r+0x10>
 800695a:	2380      	movs	r3, #128	@ 0x80
 800695c:	89a2      	ldrh	r2, [r4, #12]
 800695e:	6020      	str	r0, [r4, #0]
 8006960:	4313      	orrs	r3, r2
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	6120      	str	r0, [r4, #16]
 8006968:	6167      	str	r7, [r4, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00c      	beq.n	8006988 <__smakebuf_r+0x78>
 800696e:	0028      	movs	r0, r5
 8006970:	230e      	movs	r3, #14
 8006972:	5ee1      	ldrsh	r1, [r4, r3]
 8006974:	f000 f820 	bl	80069b8 <_isatty_r>
 8006978:	2800      	cmp	r0, #0
 800697a:	d005      	beq.n	8006988 <__smakebuf_r+0x78>
 800697c:	2303      	movs	r3, #3
 800697e:	89a2      	ldrh	r2, [r4, #12]
 8006980:	439a      	bics	r2, r3
 8006982:	3b02      	subs	r3, #2
 8006984:	4313      	orrs	r3, r2
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	9a01      	ldr	r2, [sp, #4]
 800698c:	4313      	orrs	r3, r2
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	e7cc      	b.n	800692c <__smakebuf_r+0x1c>
	...

08006994 <_fstat_r>:
 8006994:	2300      	movs	r3, #0
 8006996:	b570      	push	{r4, r5, r6, lr}
 8006998:	4d06      	ldr	r5, [pc, #24]	@ (80069b4 <_fstat_r+0x20>)
 800699a:	0004      	movs	r4, r0
 800699c:	0008      	movs	r0, r1
 800699e:	0011      	movs	r1, r2
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	f7fa f8be 	bl	8000b22 <_fstat>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d103      	bne.n	80069b2 <_fstat_r+0x1e>
 80069aa:	682b      	ldr	r3, [r5, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d000      	beq.n	80069b2 <_fstat_r+0x1e>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	20000580 	.word	0x20000580

080069b8 <_isatty_r>:
 80069b8:	2300      	movs	r3, #0
 80069ba:	b570      	push	{r4, r5, r6, lr}
 80069bc:	4d06      	ldr	r5, [pc, #24]	@ (80069d8 <_isatty_r+0x20>)
 80069be:	0004      	movs	r4, r0
 80069c0:	0008      	movs	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fa f8bb 	bl	8000b3e <_isatty>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d103      	bne.n	80069d4 <_isatty_r+0x1c>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d000      	beq.n	80069d4 <_isatty_r+0x1c>
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	20000580 	.word	0x20000580

080069dc <_sbrk_r>:
 80069dc:	2300      	movs	r3, #0
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	4d06      	ldr	r5, [pc, #24]	@ (80069fc <_sbrk_r+0x20>)
 80069e2:	0004      	movs	r4, r0
 80069e4:	0008      	movs	r0, r1
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	f7fa f8be 	bl	8000b68 <_sbrk>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d103      	bne.n	80069f8 <_sbrk_r+0x1c>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d000      	beq.n	80069f8 <_sbrk_r+0x1c>
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	bd70      	pop	{r4, r5, r6, pc}
 80069fa:	46c0      	nop			@ (mov r8, r8)
 80069fc:	20000580 	.word	0x20000580

08006a00 <memchr>:
 8006a00:	b2c9      	uxtb	r1, r1
 8006a02:	1882      	adds	r2, r0, r2
 8006a04:	4290      	cmp	r0, r2
 8006a06:	d101      	bne.n	8006a0c <memchr+0xc>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	4770      	bx	lr
 8006a0c:	7803      	ldrb	r3, [r0, #0]
 8006a0e:	428b      	cmp	r3, r1
 8006a10:	d0fb      	beq.n	8006a0a <memchr+0xa>
 8006a12:	3001      	adds	r0, #1
 8006a14:	e7f6      	b.n	8006a04 <memchr+0x4>
	...

08006a18 <_init>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr

08006a24 <_fini>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2a:	bc08      	pop	{r3}
 8006a2c:	469e      	mov	lr, r3
 8006a2e:	4770      	bx	lr
